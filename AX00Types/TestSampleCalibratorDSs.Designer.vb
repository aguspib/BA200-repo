'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.18063
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("TestSampleCalibratorDS"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class TestSampleCalibratorDS
    Inherits Global.System.Data.DataSet
    
    Private tabletparTestCalibrators As tparTestCalibratorsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tparTestCalibrators")) Is Nothing) Then
                MyBase.Tables.Add(New tparTestCalibratorsDataTable(ds.Tables("tparTestCalibrators")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tparTestCalibrators() As tparTestCalibratorsDataTable
        Get
            Return Me.tabletparTestCalibrators
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As TestSampleCalibratorDS = CType(MyBase.Clone,TestSampleCalibratorDS)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("tparTestCalibrators")) Is Nothing) Then
                MyBase.Tables.Add(New tparTestCalibratorsDataTable(ds.Tables("tparTestCalibrators")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletparTestCalibrators = CType(MyBase.Tables("tparTestCalibrators"),tparTestCalibratorsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletparTestCalibrators) Is Nothing) Then
                Me.tabletparTestCalibrators.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "TestSampleCalibratorDS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/TestSampleCalibratorDS.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletparTestCalibrators = New tparTestCalibratorsDataTable()
        MyBase.Tables.Add(Me.tabletparTestCalibrators)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetparTestCalibrators() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As TestSampleCalibratorDS = New TestSampleCalibratorDS()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub tparTestCalibratorsRowChangeEventHandler(ByVal sender As Object, ByVal e As tparTestCalibratorsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tparTestCalibratorsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tparTestCalibratorsRow)
        
        Private columnTestCalibratorID As Global.System.Data.DataColumn
        
        Private columnTestID As Global.System.Data.DataColumn
        
        Private columnTestName As Global.System.Data.DataColumn
        
        Private columnTestVersionNumber As Global.System.Data.DataColumn
        
        Private columnSampleType As Global.System.Data.DataColumn
        
        Private columnCalibratorID As Global.System.Data.DataColumn
        
        Private columnDecimalsAllowed As Global.System.Data.DataColumn
        
        Private columnCalibratorType As Global.System.Data.DataColumn
        
        Private columnCurveGrowthType As Global.System.Data.DataColumn
        
        Private columnCurveType As Global.System.Data.DataColumn
        
        Private columnCurveAxisXType As Global.System.Data.DataColumn
        
        Private columnCurveAxisYType As Global.System.Data.DataColumn
        
        Private columnTS_User As Global.System.Data.DataColumn
        
        Private columnTS_DateTime As Global.System.Data.DataColumn
        
        Private columnCalibratorName As Global.System.Data.DataColumn
        
        Private columnLotNumber As Global.System.Data.DataColumn
        
        Private columnExpirationDate As Global.System.Data.DataColumn
        
        Private columnNumberOfCalibrators As Global.System.Data.DataColumn
        
        Private columnRealNumOfCalibrators As Global.System.Data.DataColumn
        
        Private columnAlternativeFlag As Global.System.Data.DataColumn
        
        Private columnCalibratorFactor As Global.System.Data.DataColumn
        
        Private columnAlternativeSampleType As Global.System.Data.DataColumn
        
        Private columnCalibratorReplicates As Global.System.Data.DataColumn
        
        Private columnTubeType As Global.System.Data.DataColumn
        
        Private columnInUse As Global.System.Data.DataColumn
        
        Private columnIsNew As Global.System.Data.DataColumn
        
        Private columnSpecialCalib As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tparTestCalibrators"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TestCalibratorIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestCalibratorID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TestIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TestNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TestVersionNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestVersionNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SampleTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CalibratorIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalibratorID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DecimalsAllowedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDecimalsAllowed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CalibratorTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalibratorType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CurveGrowthTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurveGrowthType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CurveTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurveType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CurveAxisXTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurveAxisXType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CurveAxisYTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurveAxisYType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TS_UserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTS_User
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TS_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTS_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CalibratorNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalibratorName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LotNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ExpirationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpirationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NumberOfCalibratorsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumberOfCalibrators
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RealNumOfCalibratorsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRealNumOfCalibrators
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AlternativeFlagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlternativeFlag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CalibratorFactorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalibratorFactor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AlternativeSampleTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlternativeSampleType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CalibratorReplicatesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalibratorReplicates
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TubeTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTubeType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InUseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInUse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IsNewColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsNew
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpecialCalibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecialCalib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tparTestCalibratorsRow
            Get
                Return CType(Me.Rows(index),tparTestCalibratorsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tparTestCalibratorsRowChanging As tparTestCalibratorsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tparTestCalibratorsRowChanged As tparTestCalibratorsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tparTestCalibratorsRowDeleting As tparTestCalibratorsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tparTestCalibratorsRowDeleted As tparTestCalibratorsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddtparTestCalibratorsRow(ByVal row As tparTestCalibratorsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddtparTestCalibratorsRow( _
                    ByVal TestID As Integer,  _
                    ByVal TestName As String,  _
                    ByVal TestVersionNumber As Integer,  _
                    ByVal SampleType As String,  _
                    ByVal CalibratorID As Integer,  _
                    ByVal DecimalsAllowed As Integer,  _
                    ByVal CalibratorType As String,  _
                    ByVal CurveGrowthType As String,  _
                    ByVal CurveType As String,  _
                    ByVal CurveAxisXType As String,  _
                    ByVal CurveAxisYType As String,  _
                    ByVal TS_User As String,  _
                    ByVal TS_DateTime As Date,  _
                    ByVal CalibratorName As String,  _
                    ByVal LotNumber As String,  _
                    ByVal ExpirationDate As Date,  _
                    ByVal NumberOfCalibrators As Integer,  _
                    ByVal RealNumOfCalibrators As Integer,  _
                    ByVal AlternativeFlag As Boolean,  _
                    ByVal CalibratorFactor As Single,  _
                    ByVal AlternativeSampleType As String,  _
                    ByVal CalibratorReplicates As Integer,  _
                    ByVal TubeType As String,  _
                    ByVal InUse As Boolean,  _
                    ByVal IsNew As Boolean,  _
                    ByVal SpecialCalib As Boolean) As tparTestCalibratorsRow
            Dim rowtparTestCalibratorsRow As tparTestCalibratorsRow = CType(Me.NewRow,tparTestCalibratorsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TestID, TestName, TestVersionNumber, SampleType, CalibratorID, DecimalsAllowed, CalibratorType, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, TS_User, TS_DateTime, CalibratorName, LotNumber, ExpirationDate, NumberOfCalibrators, RealNumOfCalibrators, AlternativeFlag, CalibratorFactor, AlternativeSampleType, CalibratorReplicates, TubeType, InUse, IsNew, SpecialCalib}
            rowtparTestCalibratorsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtparTestCalibratorsRow)
            Return rowtparTestCalibratorsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tparTestCalibratorsDataTable = CType(MyBase.Clone,tparTestCalibratorsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tparTestCalibratorsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnTestCalibratorID = MyBase.Columns("TestCalibratorID")
            Me.columnTestID = MyBase.Columns("TestID")
            Me.columnTestName = MyBase.Columns("TestName")
            Me.columnTestVersionNumber = MyBase.Columns("TestVersionNumber")
            Me.columnSampleType = MyBase.Columns("SampleType")
            Me.columnCalibratorID = MyBase.Columns("CalibratorID")
            Me.columnDecimalsAllowed = MyBase.Columns("DecimalsAllowed")
            Me.columnCalibratorType = MyBase.Columns("CalibratorType")
            Me.columnCurveGrowthType = MyBase.Columns("CurveGrowthType")
            Me.columnCurveType = MyBase.Columns("CurveType")
            Me.columnCurveAxisXType = MyBase.Columns("CurveAxisXType")
            Me.columnCurveAxisYType = MyBase.Columns("CurveAxisYType")
            Me.columnTS_User = MyBase.Columns("TS_User")
            Me.columnTS_DateTime = MyBase.Columns("TS_DateTime")
            Me.columnCalibratorName = MyBase.Columns("CalibratorName")
            Me.columnLotNumber = MyBase.Columns("LotNumber")
            Me.columnExpirationDate = MyBase.Columns("ExpirationDate")
            Me.columnNumberOfCalibrators = MyBase.Columns("NumberOfCalibrators")
            Me.columnRealNumOfCalibrators = MyBase.Columns("RealNumOfCalibrators")
            Me.columnAlternativeFlag = MyBase.Columns("AlternativeFlag")
            Me.columnCalibratorFactor = MyBase.Columns("CalibratorFactor")
            Me.columnAlternativeSampleType = MyBase.Columns("AlternativeSampleType")
            Me.columnCalibratorReplicates = MyBase.Columns("CalibratorReplicates")
            Me.columnTubeType = MyBase.Columns("TubeType")
            Me.columnInUse = MyBase.Columns("InUse")
            Me.columnIsNew = MyBase.Columns("IsNew")
            Me.columnSpecialCalib = MyBase.Columns("SpecialCalib")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnTestCalibratorID = New Global.System.Data.DataColumn("TestCalibratorID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestCalibratorID)
            Me.columnTestID = New Global.System.Data.DataColumn("TestID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestID)
            Me.columnTestName = New Global.System.Data.DataColumn("TestName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestName)
            Me.columnTestVersionNumber = New Global.System.Data.DataColumn("TestVersionNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestVersionNumber)
            Me.columnSampleType = New Global.System.Data.DataColumn("SampleType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleType)
            Me.columnCalibratorID = New Global.System.Data.DataColumn("CalibratorID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalibratorID)
            Me.columnDecimalsAllowed = New Global.System.Data.DataColumn("DecimalsAllowed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDecimalsAllowed)
            Me.columnCalibratorType = New Global.System.Data.DataColumn("CalibratorType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalibratorType)
            Me.columnCurveGrowthType = New Global.System.Data.DataColumn("CurveGrowthType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurveGrowthType)
            Me.columnCurveType = New Global.System.Data.DataColumn("CurveType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurveType)
            Me.columnCurveAxisXType = New Global.System.Data.DataColumn("CurveAxisXType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurveAxisXType)
            Me.columnCurveAxisYType = New Global.System.Data.DataColumn("CurveAxisYType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurveAxisYType)
            Me.columnTS_User = New Global.System.Data.DataColumn("TS_User", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTS_User)
            Me.columnTS_DateTime = New Global.System.Data.DataColumn("TS_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTS_DateTime)
            Me.columnCalibratorName = New Global.System.Data.DataColumn("CalibratorName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalibratorName)
            Me.columnLotNumber = New Global.System.Data.DataColumn("LotNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotNumber)
            Me.columnExpirationDate = New Global.System.Data.DataColumn("ExpirationDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpirationDate)
            Me.columnNumberOfCalibrators = New Global.System.Data.DataColumn("NumberOfCalibrators", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumberOfCalibrators)
            Me.columnRealNumOfCalibrators = New Global.System.Data.DataColumn("RealNumOfCalibrators", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRealNumOfCalibrators)
            Me.columnAlternativeFlag = New Global.System.Data.DataColumn("AlternativeFlag", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlternativeFlag)
            Me.columnCalibratorFactor = New Global.System.Data.DataColumn("CalibratorFactor", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalibratorFactor)
            Me.columnAlternativeSampleType = New Global.System.Data.DataColumn("AlternativeSampleType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlternativeSampleType)
            Me.columnCalibratorReplicates = New Global.System.Data.DataColumn("CalibratorReplicates", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalibratorReplicates)
            Me.columnTubeType = New Global.System.Data.DataColumn("TubeType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTubeType)
            Me.columnInUse = New Global.System.Data.DataColumn("InUse", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInUse)
            Me.columnIsNew = New Global.System.Data.DataColumn("IsNew", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsNew)
            Me.columnSpecialCalib = New Global.System.Data.DataColumn("SpecialCalib", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecialCalib)
            Me.columnTestCalibratorID.AutoIncrement = true
            Me.columnTestCalibratorID.AutoIncrementSeed = -1
            Me.columnTestCalibratorID.AutoIncrementStep = -1
            Me.columnCalibratorFactor.DefaultValue = CType(0!,Single)
            Me.columnInUse.DefaultValue = CType(false,Boolean)
            Me.columnIsNew.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewtparTestCalibratorsRow() As tparTestCalibratorsRow
            Return CType(Me.NewRow,tparTestCalibratorsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tparTestCalibratorsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tparTestCalibratorsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tparTestCalibratorsRowChangedEvent) Is Nothing) Then
                RaiseEvent tparTestCalibratorsRowChanged(Me, New tparTestCalibratorsRowChangeEvent(CType(e.Row,tparTestCalibratorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tparTestCalibratorsRowChangingEvent) Is Nothing) Then
                RaiseEvent tparTestCalibratorsRowChanging(Me, New tparTestCalibratorsRowChangeEvent(CType(e.Row,tparTestCalibratorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tparTestCalibratorsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tparTestCalibratorsRowDeleted(Me, New tparTestCalibratorsRowChangeEvent(CType(e.Row,tparTestCalibratorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tparTestCalibratorsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tparTestCalibratorsRowDeleting(Me, New tparTestCalibratorsRowChangeEvent(CType(e.Row,tparTestCalibratorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovetparTestCalibratorsRow(ByVal row As tparTestCalibratorsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TestSampleCalibratorDS = New TestSampleCalibratorDS()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tparTestCalibratorsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tparTestCalibratorsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletparTestCalibrators As tparTestCalibratorsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletparTestCalibrators = CType(Me.Table,tparTestCalibratorsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TestCalibratorID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletparTestCalibrators.TestCalibratorIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TestCalibratorID' de la tabla 'tparTestCalibrators' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletparTestCalibrators.TestCalibratorIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TestID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletparTestCalibrators.TestIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TestID' de la tabla 'tparTestCalibrators' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletparTestCalibrators.TestIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TestName() As String
            Get
                If Me.IsTestNameNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabletparTestCalibrators.TestNameColumn),String)
                End If
            End Get
            Set
                Me(Me.tabletparTestCalibrators.TestNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TestVersionNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletparTestCalibrators.TestVersionNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TestVersionNumber' de la tabla 'tparTestCalibrators' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletparTestCalibrators.TestVersionNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SampleType() As String
            Get
                If Me.IsSampleTypeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabletparTestCalibrators.SampleTypeColumn),String)
                End If
            End Get
            Set
                Me(Me.tabletparTestCalibrators.SampleTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CalibratorID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletparTestCalibrators.CalibratorIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CalibratorID' de la tabla 'tparTestCalibrators' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletparTestCalibrators.CalibratorIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DecimalsAllowed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletparTestCalibrators.DecimalsAllowedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DecimalsAllowed' de la tabla 'tparTestCalibrators' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletparTestCalibrators.DecimalsAllowedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CalibratorType() As String
            Get
                If Me.IsCalibratorTypeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabletparTestCalibrators.CalibratorTypeColumn),String)
                End If
            End Get
            Set
                Me(Me.tabletparTestCalibrators.CalibratorTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CurveGrowthType() As String
            Get
                If Me.IsCurveGrowthTypeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabletparTestCalibrators.CurveGrowthTypeColumn),String)
                End If
            End Get
            Set
                Me(Me.tabletparTestCalibrators.CurveGrowthTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CurveType() As String
            Get
                If Me.IsCurveTypeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabletparTestCalibrators.CurveTypeColumn),String)
                End If
            End Get
            Set
                Me(Me.tabletparTestCalibrators.CurveTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CurveAxisXType() As String
            Get
                If Me.IsCurveAxisXTypeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabletparTestCalibrators.CurveAxisXTypeColumn),String)
                End If
            End Get
            Set
                Me(Me.tabletparTestCalibrators.CurveAxisXTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CurveAxisYType() As String
            Get
                If Me.IsCurveAxisYTypeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabletparTestCalibrators.CurveAxisYTypeColumn),String)
                End If
            End Get
            Set
                Me(Me.tabletparTestCalibrators.CurveAxisYTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TS_User() As String
            Get
                If Me.IsTS_UserNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabletparTestCalibrators.TS_UserColumn),String)
                End If
            End Get
            Set
                Me(Me.tabletparTestCalibrators.TS_UserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TS_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletparTestCalibrators.TS_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TS_DateTime' de la tabla 'tparTestCalibrators' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletparTestCalibrators.TS_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CalibratorName() As String
            Get
                If Me.IsCalibratorNameNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabletparTestCalibrators.CalibratorNameColumn),String)
                End If
            End Get
            Set
                Me(Me.tabletparTestCalibrators.CalibratorNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LotNumber() As String
            Get
                If Me.IsLotNumberNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabletparTestCalibrators.LotNumberColumn),String)
                End If
            End Get
            Set
                Me(Me.tabletparTestCalibrators.LotNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ExpirationDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletparTestCalibrators.ExpirationDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ExpirationDate' de la tabla 'tparTestCalibrators' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletparTestCalibrators.ExpirationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NumberOfCalibrators() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletparTestCalibrators.NumberOfCalibratorsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumberOfCalibrators' de la tabla 'tparTestCalibrators' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletparTestCalibrators.NumberOfCalibratorsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RealNumOfCalibrators() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletparTestCalibrators.RealNumOfCalibratorsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RealNumOfCalibrators' de la tabla 'tparTestCalibrators' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletparTestCalibrators.RealNumOfCalibratorsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AlternativeFlag() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletparTestCalibrators.AlternativeFlagColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AlternativeFlag' de la tabla 'tparTestCalibrators' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletparTestCalibrators.AlternativeFlagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CalibratorFactor() As Single
            Get
                Try 
                    Return CType(Me(Me.tabletparTestCalibrators.CalibratorFactorColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CalibratorFactor' de la tabla 'tparTestCalibrators' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletparTestCalibrators.CalibratorFactorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AlternativeSampleType() As String
            Get
                If Me.IsAlternativeSampleTypeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabletparTestCalibrators.AlternativeSampleTypeColumn),String)
                End If
            End Get
            Set
                Me(Me.tabletparTestCalibrators.AlternativeSampleTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CalibratorReplicates() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletparTestCalibrators.CalibratorReplicatesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CalibratorReplicates' de la tabla 'tparTestCalibrators' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletparTestCalibrators.CalibratorReplicatesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TubeType() As String
            Get
                If Me.IsTubeTypeNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tabletparTestCalibrators.TubeTypeColumn),String)
                End If
            End Get
            Set
                Me(Me.tabletparTestCalibrators.TubeTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property InUse() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletparTestCalibrators.InUseColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'InUse' de la tabla 'tparTestCalibrators' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletparTestCalibrators.InUseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IsNew() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletparTestCalibrators.IsNewColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IsNew' de la tabla 'tparTestCalibrators' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletparTestCalibrators.IsNewColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpecialCalib() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletparTestCalibrators.SpecialCalibColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SpecialCalib' de la tabla 'tparTestCalibrators' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletparTestCalibrators.SpecialCalibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTestCalibratorIDNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.TestCalibratorIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTestCalibratorIDNull()
            Me(Me.tabletparTestCalibrators.TestCalibratorIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTestIDNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.TestIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTestIDNull()
            Me(Me.tabletparTestCalibrators.TestIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTestNameNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.TestNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTestNameNull()
            Me(Me.tabletparTestCalibrators.TestNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTestVersionNumberNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.TestVersionNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTestVersionNumberNull()
            Me(Me.tabletparTestCalibrators.TestVersionNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSampleTypeNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.SampleTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSampleTypeNull()
            Me(Me.tabletparTestCalibrators.SampleTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCalibratorIDNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.CalibratorIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCalibratorIDNull()
            Me(Me.tabletparTestCalibrators.CalibratorIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDecimalsAllowedNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.DecimalsAllowedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDecimalsAllowedNull()
            Me(Me.tabletparTestCalibrators.DecimalsAllowedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCalibratorTypeNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.CalibratorTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCalibratorTypeNull()
            Me(Me.tabletparTestCalibrators.CalibratorTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCurveGrowthTypeNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.CurveGrowthTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCurveGrowthTypeNull()
            Me(Me.tabletparTestCalibrators.CurveGrowthTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCurveTypeNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.CurveTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCurveTypeNull()
            Me(Me.tabletparTestCalibrators.CurveTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCurveAxisXTypeNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.CurveAxisXTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCurveAxisXTypeNull()
            Me(Me.tabletparTestCalibrators.CurveAxisXTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCurveAxisYTypeNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.CurveAxisYTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCurveAxisYTypeNull()
            Me(Me.tabletparTestCalibrators.CurveAxisYTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTS_UserNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.TS_UserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTS_UserNull()
            Me(Me.tabletparTestCalibrators.TS_UserColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTS_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.TS_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTS_DateTimeNull()
            Me(Me.tabletparTestCalibrators.TS_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCalibratorNameNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.CalibratorNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCalibratorNameNull()
            Me(Me.tabletparTestCalibrators.CalibratorNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLotNumberNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.LotNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLotNumberNull()
            Me(Me.tabletparTestCalibrators.LotNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsExpirationDateNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.ExpirationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetExpirationDateNull()
            Me(Me.tabletparTestCalibrators.ExpirationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNumberOfCalibratorsNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.NumberOfCalibratorsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNumberOfCalibratorsNull()
            Me(Me.tabletparTestCalibrators.NumberOfCalibratorsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRealNumOfCalibratorsNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.RealNumOfCalibratorsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRealNumOfCalibratorsNull()
            Me(Me.tabletparTestCalibrators.RealNumOfCalibratorsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAlternativeFlagNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.AlternativeFlagColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAlternativeFlagNull()
            Me(Me.tabletparTestCalibrators.AlternativeFlagColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCalibratorFactorNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.CalibratorFactorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCalibratorFactorNull()
            Me(Me.tabletparTestCalibrators.CalibratorFactorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAlternativeSampleTypeNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.AlternativeSampleTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAlternativeSampleTypeNull()
            Me(Me.tabletparTestCalibrators.AlternativeSampleTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCalibratorReplicatesNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.CalibratorReplicatesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCalibratorReplicatesNull()
            Me(Me.tabletparTestCalibrators.CalibratorReplicatesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTubeTypeNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.TubeTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTubeTypeNull()
            Me(Me.tabletparTestCalibrators.TubeTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsInUseNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.InUseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetInUseNull()
            Me(Me.tabletparTestCalibrators.InUseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIsNewNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.IsNewColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIsNewNull()
            Me(Me.tabletparTestCalibrators.IsNewColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSpecialCalibNull() As Boolean
            Return Me.IsNull(Me.tabletparTestCalibrators.SpecialCalibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSpecialCalibNull()
            Me(Me.tabletparTestCalibrators.SpecialCalibColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class tparTestCalibratorsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tparTestCalibratorsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As tparTestCalibratorsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As tparTestCalibratorsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
