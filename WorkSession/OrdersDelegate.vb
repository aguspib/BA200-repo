Option Explicit On
Option Strict On

Imports System.Text
Imports Biosystems.Ax00.DAL
Imports Biosystems.Ax00.DAL.DAO
Imports Biosystems.Ax00.Types
Imports Biosystems.Ax00.Global
Imports Biosystems.Ax00.Global.TO
Imports Biosystems.Ax00.Global.GlobalConstants

Namespace Biosystems.Ax00.BL
    Public Class OrdersDelegate

#Region "Declarations"
        Private myAnalyzerModel As String 'SGM 04/03/2011
#End Region

#Region "Constructor"
        'SGM 04/03/2011
        Public Sub New(Optional ByVal pAnalyzerModel As String = "")
            Try
                myAnalyzerModel = pAnalyzerModel
            Catch ex As Exception
                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.New", EventLogEntryType.Error, False)
            End Try
        End Sub
#End Region

#Region "Public Functions"
        ''' <summary>
        ''' Create an Order with its list of Order Tests and the customized Demographics informed for it 
        ''' </summary>
        ''' <param name="pDBConnection">Open Database Connection</param>
        ''' <param name="pOrdersDS">DataSet containing the Order to be created</param>
        ''' <param name="pOrderTestDS">DataSet containing the list of Order Tests to be added to the Order</param>
        ''' <param name="pOrderDemographicsDS">DataSet containing values of customized Order Demographics 
        '''                                    for the Order</param>
        ''' <returns>GlobalDataTO containing sucess/error information. When only an Order is created, then it contains also a typed 
        '''          DataSet OrderTestsDS with the list of Order Tests added to the Order (including the generated OrderTestID)</returns>
        ''' <remarks>
        ''' Created by:  TR
        ''' Modified by: SA 08/01/2010 - Changes to open the DB Transaction using the new template
        '''              SA 23/02/2010 - When just an Order has to be created, the GlobalDataTO should return the list 
        '''                              of Order Tests in a typed DataSet OrderTestDS
        '''              SA 15/09/2010 - Code used to verify if an Order exists searching for the External OID has been
        '''                              commented; current process of Import from LIMS does not use this field
        ''' </remarks>
        Public Function CreateOrder(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pOrdersDS As OrdersDS, _
                                    ByVal pOrderTestDS As OrderTestsDS, ByVal pOrderDemographicsDS As OrderDemographicsDS) As GlobalDataTO
            Dim dataToReturn As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                dataToReturn = DAOBase.GetOpenDBTransaction(pDBConnection)
                If (Not dataToReturn.HasError AndAlso Not dataToReturn.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(dataToReturn.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        'To create an Order, datasets OrdersDS and OrderTestsDS should have information
                        If (Not pOrdersDS Is Nothing) AndAlso (Not pOrderTestDS Is Nothing) Then
                            Dim myOrderDS As New OrdersDS()
                            Dim mytwksOrdersDAO As New TwksOrdersDAO()
                            Dim myOrderTestDelegate As New OrderTestsDelegate()
                            Dim myOrderDemographicsDelegate As New OrdersDemographicsDelegate

                            Dim i As Integer = 0
                            Dim noError As Boolean = True
                            Do While (i < pOrdersDS.twksOrders.Rows.Count) And (noError)
                                myOrderDS.twksOrders.Clear()
                                myOrderDS.twksOrders.ImportRow(pOrdersDS.twksOrders(0))

                                'Inform OrderID and SampleClass for each Order Test to include in the Order
                                For Each drOrderTest As OrderTestsDS.twksOrderTestsRow In pOrderTestDS.twksOrderTests
                                    drOrderTest.OrderID = myOrderDS.twksOrders(0).OrderID
                                    drOrderTest.SampleClass = myOrderDS.twksOrders(0).SampleClass
                                Next

                                'Add the new Order
                                dataToReturn = mytwksOrdersDAO.Create(dbConnection, myOrderDS)
                                noError = (Not dataToReturn.HasError)

                                'Add the Order Tests to the added or existing Order
                                If (noError) Then
                                    'The GlobalDataTO will contain the same entry OrderTestDS with the OrderTestID automatically generated by the DB informed
                                    dataToReturn = myOrderTestDelegate.Create(dbConnection, pOrderTestDS)
                                    If (Not dataToReturn.HasError) Then
                                        'If there are values for customized Order Demographics, then add them
                                        Dim myGlobalDataTO As New GlobalDataTO
                                        If (Not pOrderDemographicsDS Is Nothing) Then myGlobalDataTO = myOrderDemographicsDelegate.Create(dbConnection, pOrderDemographicsDS)
                                        noError = (Not myGlobalDataTO.HasError)
                                    Else
                                        noError = False
                                    End If
                                End If
                                i += 1
                            Loop

                            If (noError) Then
                                'When the Database Connection was opened locally, then the Commit is executed
                                If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                            Else
                                'When the Connection was opened locally, then the Rollback is executed
                                If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                            End If
                        End If
                    End If
                End If
            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)

                dataToReturn = New GlobalDataTO()
                dataToReturn.HasError = True
                dataToReturn.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                dataToReturn.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.CreateOrder", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return dataToReturn
        End Function

        ''' <summary>
        ''' Deletes informed Order if it is empty (there are not Order Tests related to it)
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pOrderID">Order Identifier</param>
        ''' <returns>GlobalDataTO containing success/error information</returns>
        ''' <remarks>
        ''' Created by:  SG 15/03/2013
        ''' Modified by: SA 04/04/2013 - Removed Exit Try when the DAO function returns an Error (Commit/Rollback has to be executed
        '''                              in case the DB Transaction is locally opened)
        ''' </remarks>
        Public Function DeleteEmptyOrder(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pOrderID As String) As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBTransaction(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim myOrdersDAO As New TwksOrdersDAO
                        resultData = myOrdersDAO.DeleteEmptyOrder(dbConnection, pOrderID)

                        If (Not resultData.HasError) Then
                            'When the Database Connection was opened locally, then the Commit is executed
                            If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                        Else
                            'When the Database Connection was opened locally, then the Rollback is executed
                            If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                        End If
                    End If
                End If
            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)

                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.DeleteEmptyOrder", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function

        ''' <summary>
        ''' Delete all Orders of the specified SampleClass
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pWorkSessionID">Work Session Identifier</param>
        ''' <param name="pSampleClass">Sample Class code</param>
        ''' <returns>GlobalDataTO containing Success/Error information</returns>
        ''' <remarks>
        ''' Created by:  SA 25/02/2010
        ''' </remarks>
        Public Function DeleteOrdersBySampleClass(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pWorkSessionID As String, _
                                                  ByVal pSampleClass As String) As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBTransaction(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim myOrderTestsDelegate As New OrderTestsDelegate
                        resultData = myOrderTestsDelegate.DeleteOpenOrderTestsBySampleClass(dbConnection, pWorkSessionID, pSampleClass)
                        If (Not resultData.HasError) Then
                            Dim myOrdersDAO As New TwksOrdersDAO
                            resultData = myOrdersDAO.DeleteEmptyOrdersBySampleClass(dbConnection, pSampleClass)
                        End If

                        If (Not resultData.HasError) Then
                            'When the Database Connection was opened locally, then the Commit is executed
                            If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                        Else
                            'When the Database Connection was opened locally, then the Rollback is executed
                            If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                        End If
                    End If
                End If
            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)

                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.DeleteOrdersBySampleClass", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function

        ''' <summary>
        ''' Delete all Orders that have been removed from the specified WorkSession
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pWorkSessionID">Work Session Identifier</param>
        ''' <param name="pListOfWSOrders">List of IDs of the Orders that have to remain in the specified Work Session</param>
        ''' <param name="pSampleClass">Sample Class Code</param>
        ''' <returns>GlobalDataTO containing success/error information</returns>
        ''' <remarks>
        ''' Created by:  SA 08/06/2010
        ''' Modified by: SA 01/02/2012 - Added parameter for the SampleClass; call to function GetPatientOrdersNotInWS changed by call to 
        '''                              function GetOrdersNotInWS due to now it is used for all different Sample Classes; changed the function template 
        ''' </remarks>
        Public Function DeleteOrdersNotInWS(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pWorkSessionID As String, ByVal pListOfWSOrders As String, _
                                            ByVal pSampleClass As String) As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBTransaction(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        'Get the list of Orders of the specified SampleClass and linked to the specified WorkSession but that are not in the informed
                        'list of Orders to remain in the WorkSession
                        Dim myWSOrderTestsDelegate As New WSOrderTestsDelegate
                        resultData = myWSOrderTestsDelegate.GetOrdersNotInWS(dbConnection, pWorkSessionID, pListOfWSOrders, pSampleClass)

                        If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                            Dim myOrdersDS As OrdersDS = DirectCast(resultData.SetDatos, OrdersDS)

                            'Delete each obtained Order with all its Order Tests
                            Dim myOrdersDAO As New TwksOrdersDAO
                            Dim myOrderTestsDelegate As New OrderTestsDelegate

                            For Each ordersList As OrdersDS.twksOrdersRow In myOrdersDS.twksOrders
                                'Remove the link between the Order Tests and the specified WorkSession
                                resultData = myWSOrderTestsDelegate.DeleteByOrderID(dbConnection, pWorkSessionID, ordersList.OrderID)
                                If (resultData.HasError) Then Exit For

                                'Delete the Order Tests...
                                resultData = myOrderTestsDelegate.DeleteByOrderID(dbConnection, ordersList.OrderID)
                                If (resultData.HasError) Then Exit For

                                'Delete the Order
                                resultData = myOrdersDAO.Delete(dbConnection, ordersList.OrderID)
                                If (resultData.HasError) Then Exit For
                            Next
                        End If

                        If (Not resultData.HasError) Then
                            'When the Database Connection was opened locally, then the Commit is executed
                            If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                        Else
                            'When the Database Connection was opened locally, then the Rollback is executed
                            If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                        End If
                    End If
                End If
            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)

                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.DeleteOrdersNotInWS", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function

        ''' <summary>
        ''' Verify if the specified Order already exists in the DB
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pOrderID">Order Identifier</param>
        ''' <returns>GlobalDataTO containing a boolean value that indicates if the Order exists or not</returns>
        ''' <remarks>
        ''' Created by:  SA 18/03/2010
        ''' </remarks>
        Public Function ExistOrder(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pOrderID As String) As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBConnection(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim mytwksOrdersDAO As New TwksOrdersDAO
                        resultData = mytwksOrdersDAO.Read(dbConnection, pOrderID)

                        If (Not resultData.HasError And Not resultData.SetDatos Is Nothing) Then
                            Dim myOrderDS As OrdersDS = DirectCast(resultData.SetDatos, OrdersDS)
                            resultData.SetDatos = (myOrderDS.twksOrders.Rows.Count > 0)
                        End If
                    End If
                End If
            Catch ex As Exception
                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.ExistOrder", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function

        ''' <summary>
        ''' Method in charge to create the next Order Identifier. The OrderID is a code made using 
        ''' the current date (date of Order creation) and a four digits secuence code, with the 
        ''' following format: "yyyyMMdd####". Example: 200908010001.
        ''' This function implements LINQ
        ''' </summary>
        ''' <param name="pDbConnection">Open Database Connection</param>
        ''' <returns>GlobalDataTO containing the generated Order Identifier</returns>
        ''' <remarks>
        ''' Created by:  TR
        ''' Modified by: SA 18/01/2010 - Changed the way of opening the DB Connection to fulfill the new template
        '''                              Changed the returned value for a GlobalDataTO with a String value inside
        ''' </remarks>
        Public Function GenerateOrderID(ByVal pDbConnection As SqlClient.SqlConnection) As GlobalDataTO
            Dim myGlobalDataTO As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                myGlobalDataTO = DAOBase.GetOpenDBConnection(pDbConnection)
                If (Not myGlobalDataTO.HasError AndAlso Not myGlobalDataTO.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(myGlobalDataTO.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        'Get all Orders created in the current day
                        Dim myOrdersDAO As New TwksOrdersDAO()
                        myGlobalDataTO = myOrdersDAO.ReadByOrderDateTime(dbConnection, DateTime.Now)   'This is not from the GeneratedDAO

                        If (Not myGlobalDataTO.HasError AndAlso Not myGlobalDataTO.SetDatos Is Nothing) Then
                            Dim myOrdersDS As OrdersDS = DirectCast(myGlobalDataTO.SetDatos, OrdersDS)

                            'If there is at least an Order created in the current day...
                            Dim orderID As String = ""
                            If (myOrdersDS.twksOrders.Rows.Count > 0) Then
                                'Implement LINQ to move throught the Orders and sort them by Sequence Number descending
                                'and put the more recently created first
                                Dim latestOrder = From e In myOrdersDS.twksOrders _
                                                 Select e Order By e.SequenceNumber Descending

                                'Sequence Number of the next OrderID will be the last created plus one
                                Dim orderCode As Integer = CType(latestOrder(0).OrderID.Remove(0, 8), Integer) + 1
                                orderID = DateTime.Now.ToString("yyyyMMdd") & Format(orderCode, "0000")
                            Else
                                'If there are not Orders created in the current day, next OrderID will has 1 as Sequence Number
                                orderID = DateTime.Now.ToString("yyyyMMdd") & "0001"
                            End If

                            myGlobalDataTO.SetDatos = orderID
                            myGlobalDataTO.HasError = False
                        End If
                    End If
                End If
            Catch ex As Exception
                myGlobalDataTO = New GlobalDataTO()
                myGlobalDataTO.HasError = True
                myGlobalDataTO.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                myGlobalDataTO.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.GenerateOrderID", EventLogEntryType.Error, False)
            Finally
                If (pDbConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return myGlobalDataTO
        End Function

        ''' <summary>
        ''' Get the number of Blanks, Calibrators, Controls and Patient's Samples requested for
        ''' a specific TestID/SampleType inside the list of Order Tests included in a Work Session
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pOrderTestsList">List of Order Tests included in a Work Session</param>
        ''' <param name="pTestID">Test Identifier</param>
        ''' <param name="pSampleType">Sample Type Code</param>
        ''' <param name="pWorkSessionID">Work Session Identifier. Optional parameter</param>
        ''' <returns>GlobalDataTO containing a typed DataSet SampleClassesByTestDS with the number of Orders 
        '''          requested of each different Sample Class for a specific TestID/SampleType</returns>
        ''' <remarks>
        ''' Modified by: SA 11/06/2010 - Changed the way of opening the DB Connection to fulfill the new template;
        '''                              return a GlobalDataTO instead of a typed Dataset; added optional parameter
        '''                              for the Work Session ID, needed to improve the performance
        ''' </remarks>
        Public Function GetSampleClassesByTest(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pOrderTestsList As String, ByVal pTestID As Integer, _
                                               ByVal pSampleType As String, Optional ByVal pWorkSessionID As String = "") As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBConnection(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim ordersData As New TwksOrdersDAO
                        resultData = ordersData.GetSampleClassesByTest(dbConnection, pOrderTestsList, pTestID, pSampleType, pWorkSessionID)
                    End If
                End If
            Catch ex As Exception
                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.GetSampleClassesByTest", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function

        ''' <summary>
        ''' Update data of an Order that already exists in the DB
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pOrderDS">Typed DataSet OrderDS containing data of the Order to update</param>
        ''' <returns>GlobalDataTO containing success/error information</returns>
        ''' <remarks>
        ''' Created by:  SA 05/03/2010
        ''' Modified by: SA 03/05/2013 - Once the update of the Order was executed, if field PatientID is informed,
        '''                              check if it is needed to update the corresponding WS required Patient Elements (this only 
        '''                              happens when LIS sends demographics for a Patient previously used as SampleID in the WS
        ''' </remarks>
        Public Function ModifyOrder(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pOrderDS As OrdersDS) As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBTransaction(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim mytwksOrdersDAO As New TwksOrdersDAO
                        resultData = mytwksOrdersDAO.Update(dbConnection, pOrderDS)

                        If (Not resultData.HasError) Then
                            If (Not pOrderDS.twksOrders.First.IsPatientIDNull AndAlso pOrderDS.twksOrders.First.PatientID <> String.Empty) Then
                                Dim myWSReqElementsDelegate As New WSRequiredElementsDelegate
                                resultData = myWSReqElementsDelegate.ChangeSampleIDToPatientID(dbConnection, pOrderDS.twksOrders.First.PatientID)
                            End If
                        End If

                        If (Not resultData.HasError) Then
                            'When the Database Connection was opened locally, then the Commit is executed
                            If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                        Else
                            'When the Database Connection was opened locally, then the Rollback is executed
                            If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                        End If
                    End If
                End If
            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)

                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.ModifyOrder", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function

        ''' <summary>
        ''' Read data of the Order to which the specified OrderTest belongs 
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pOrderTestID">Order Test Identifier</param>
        ''' <returns>GlobalDataTO containing a typed DataSet OrdersDS with all data of the Order to which the specified OrderTest belongs</returns>
        ''' <remarks>
        ''' Created by:  SA 04/07/2012
        ''' </remarks>
        Public Function ReadByOrderTestID(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pOrderTestID As Integer) As GlobalDataTO
            Dim myGlobalDataTO As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                myGlobalDataTO = DAOBase.GetOpenDBConnection(pDBConnection)
                If (Not myGlobalDataTO.HasError AndAlso Not myGlobalDataTO.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(myGlobalDataTO.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim myOrdersDAO As New TwksOrdersDAO
                        myGlobalDataTO = myOrdersDAO.ReadByOrderTestID(dbConnection, pOrderTestID)
                    End If
                End If
            Catch ex As Exception
                myGlobalDataTO = New GlobalDataTO()
                myGlobalDataTO.HasError = True
                myGlobalDataTO.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                myGlobalDataTO.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.ReadByOrderTestID", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return myGlobalDataTO
        End Function

        ''' <summary>
        ''' Get the ElementID related to the ExternalPID read from BarCode
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pBarCodeDS"></param>
        ''' <returns>WSRequiredElementsDS</returns>
        ''' <remarks>
        ''' Created by: AG 29/08/2011
        ''' </remarks>
        Public Function ReadElementIdByExternalOID(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pBarCodeDS As BarCodesDS) As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBConnection(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        If (pBarCodeDS.DecodedSamplesFields.Rows.Count > 0) Then
                            '1) Exits the ExternalOrder in Orders table?
                            '   NO: No exist in WorkSession, YES: Check if there are test requests
                            Dim sampleType As String = ""
                            If (Not pBarCodeDS.DecodedSamplesFields(0).IsSampleTypeNull) Then sampleType = pBarCodeDS.DecodedSamplesFields(0).SampleType

                            Dim myDAO As New TwksOrdersDAO
                            resultData = myDAO.ReadByExternalOID(dbConnection, pBarCodeDS.DecodedSamplesFields(0).ExternalPID, sampleType)
                        End If
                    End If
                End If
            Catch ex As Exception
                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString()
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.ReadElementIdByExternalOID", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function

        ''' <summary>
        ''' Get all data of the specified Order
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pOrderID">Order Identifier</param>
        ''' <returns>GlobalDataTO containing a typed DataSet OrdersDS with basic data of the specified Order</returns>
        ''' <remarks>
        ''' Created by:  TR 12/05/2010
        ''' </remarks>
        Public Function ReadOrders(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pOrderID As String) As GlobalDataTO
            Dim myGlobalDataTO As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                myGlobalDataTO = DAOBase.GetOpenDBConnection(pDBConnection)
                If (Not myGlobalDataTO.HasError AndAlso Not myGlobalDataTO.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(myGlobalDataTO.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim mytwksOrdersDAO As New TwksOrdersDAO
                        myGlobalDataTO = mytwksOrdersDAO.Read(dbConnection, pOrderID)
                    End If
                End If

            Catch ex As Exception
                myGlobalDataTO = New GlobalDataTO()
                myGlobalDataTO.HasError = True
                myGlobalDataTO.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                myGlobalDataTO.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.ReadOrders", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return myGlobalDataTO
        End Function

        ''' <summary>
        ''' Verify if the Order has to be re-opened (when an Order is closed but a new 
        ''' OrderTest is added to it, the Order is re-opened)
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pOrderID">Identifier of the Order</param>
        ''' <returns>GlobalDataTO containing success/error information</returns>
        ''' <remarks>
        ''' Created by:  SA 14/06/2010
        ''' </remarks>
        Public Function ReOpenClosedOrder(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pOrderID As String) As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBTransaction(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim myOrdersDAO As New TwksOrdersDAO
                        resultData = myOrdersDAO.ReOpenClosedOrder(dbConnection, pOrderID)

                        If (Not resultData.HasError) Then
                            'When the Database Connection was opened locally, then the Commit is executed
                            If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                        Else
                            'When the Database Connection was opened locally, then the Rollback is executed
                            If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                        End If
                    End If
                End If
            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)

                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.ReOpenClosedOrder", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function

        ''' <summary>
        ''' Delete all Orders included not included in a Work Session
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <returns>GlobalDataTO containing sucess/error information</returns>
        ''' <remarks>
        ''' Created By: GDS 21/04/2010
        ''' </remarks>
        Public Function ResetWS(ByVal pDBConnection As SqlClient.SqlConnection) As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBTransaction(pDBConnection)
                If (Not resultData.HasError) AndAlso (Not resultData.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim myDAO As New TwksOrdersDAO
                        resultData = myDAO.ResetWS(dbConnection)

                        If (Not resultData.HasError) Then
                            'When the Database Connection was opened locally, then the Commit is executed
                            If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                        Else
                            'When the Database Connection was opened locally, then the Rollback is executed
                            If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                        End If
                    End If
                End If
            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)

                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.ResetWS", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function

        ''' <summary>
        ''' Update values of Order Tests belonging to one or more Orders. For each different Order, Order Tests with 
        ''' status OPEN that are not in the entry DataSet, are deleted
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pOrderTestsDS">Typed DataSet OrderTestsDS containing the list of Order Tests that should remain
        ''' in the Orders that have to be updated</param>
        ''' <returns>GlobalDataTO containing success/error information</returns>
        ''' <remarks>
        ''' Created by:  SA 25/02/2010
        ''' Modified by: SA 15/04/2010 - When an Alternative Calibrator is added for an existing one, it has to be added as 
        '''                              a new Order Test in the Calibrator Order
        '''              SA 26/04/2010 - Add parameter for the Work Session Identifier
        ''' </remarks>
        Public Function UpdateOrders(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pWorkSessionID As String, _
                                     ByVal pOrderTestsDS As OrderTestsDS) As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBTransaction(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim currentOrderID As String = ""
                        Dim orderTestsList As String = ""

                        Dim myOrderTestsDS As New OrderTestsDS
                        Dim orderTestsToAdd As New OrderTestsDS
                        Dim myOrderTestsDelegate As New OrderTestsDelegate
                        For Each orderTestRow As OrderTestsDS.twksOrderTestsRow In pOrderTestsDS.twksOrderTests
                            If (orderTestRow.OrderID <> currentOrderID) Then
                                If (currentOrderID <> "") Then
                                    'Update values of Order Tests that remains in the Order
                                    resultData = myOrderTestsDelegate.Update(dbConnection, myOrderTestsDS)
                                    If (Not resultData.HasError) Then
                                        'Delete all Open Order Tests that are not included in the list
                                        resultData = myOrderTestsDelegate.DeleteNotInList(dbConnection, pWorkSessionID, currentOrderID, orderTestsList)

                                        If (Not resultData.HasError) Then
                                            'If there are Order Tests to add to the Order...then create them
                                            If (orderTestsToAdd.twksOrderTests.Rows.Count > 0) Then
                                                resultData = myOrderTestsDelegate.Create(dbConnection, orderTestsToAdd)
                                            End If
                                        End If
                                    End If

                                    'If an error happens when update or delete Order Tests, process finishes
                                    If (resultData.HasError) Then Exit For
                                End If

                                'Initialize variables used to control the loop
                                currentOrderID = orderTestRow.OrderID
                                If (Not orderTestRow.IsOrderTestIDNull) Then
                                    orderTestsList = orderTestRow.OrderTestID.ToString

                                    'Import the current OrderTest to the local DataSet containing Order Tests to update
                                    myOrderTestsDS.Clear()
                                    myOrderTestsDS.twksOrderTests.ImportRow(orderTestRow)
                                Else
                                    'Import the current OrderTest to the local DataSet containing Order Tests to add
                                    orderTestsToAdd.Clear()
                                    orderTestsToAdd.twksOrderTests.ImportRow(orderTestRow)
                                End If
                            Else
                                If (Not orderTestRow.IsOrderTestIDNull) Then
                                    'Add the OrderTestID to the list 
                                    orderTestsList += "," + orderTestRow.OrderTestID.ToString

                                    'Import the current OrderTest to the local DataSet
                                    myOrderTestsDS.twksOrderTests.ImportRow(orderTestRow)
                                Else
                                    'Import the current OrderTest to the local DataSet containing Order Tests to add
                                    orderTestsToAdd.twksOrderTests.ImportRow(orderTestRow)
                                End If
                            End If
                        Next

                        'Process for the last row...
                        If (pOrderTestsDS.twksOrderTests.Rows.Count > 0) Then
                            'Update values of Order Tests that remains in the Order
                            resultData = myOrderTestsDelegate.Update(dbConnection, myOrderTestsDS)
                            If (Not resultData.HasError) Then
                                'Delete all Open Order Tests that are not included in the list
                                resultData = myOrderTestsDelegate.DeleteNotInList(dbConnection, pWorkSessionID, currentOrderID, orderTestsList)

                                If (Not resultData.HasError) Then
                                    'If there are Order Tests to add to the Order...then create them
                                    If (orderTestsToAdd.twksOrderTests.Rows.Count > 0) Then
                                        resultData = myOrderTestsDelegate.Create(dbConnection, orderTestsToAdd)
                                    End If
                                End If
                            End If
                        End If

                        If (Not resultData.HasError) Then
                            'When the Database Connection was opened locally, then the Commit is executed
                            If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                        Else
                            'When the Connection was opened locally, then the Rollback is executed
                            If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                        End If
                    End If
                End If
            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)

                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.UpdateOrders", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function

        ''' <summary>
        ''' Update fields PatientID and SampleID for the specified Order, depending on value of parameter pSampleIDType:
        ''' ** If MAN, update SampleID = pSampleID and PatientID = NULL
        ''' ** If DB,  update PatientID = pSampleID and SampleID = NULL
        ''' Update fields PatientID and SampleID in the same way also for the required Patient Sample Element
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pOrderIDList">Order Identifier</param>
        ''' <param name="pSampleID">Sample or Patient Identifier to update</param>
        ''' <param name="pSampleIDType">Type of Sample ID: DB or MAN</param>
        ''' <param name="pSampleType">Sample Type Code</param>
        ''' <returns>GlobalDataTO containing success/error information</returns>
        ''' <remarks>
        ''' Created by:  SA 01/08/2013 
        ''' </remarks>
        Public Function UpdatePatientSampleFields(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pOrderIDList As List(Of String), ByVal pSampleID As String, _
                                                  ByVal pSampleIDType As String, ByVal pSampleType As String) As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBTransaction(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim myOrders As New TwksOrdersDAO
                        Dim myWSReqElemDelegate As New WSRequiredElementsDelegate

                        For Each myOrderID As String In pOrderIDList
                            'Update fields for the Order
                            resultData = myOrders.UpdatePatientSampleFields(dbConnection, myOrderID, pSampleID, pSampleIDType)
                            If (resultData.HasError) Then Exit For

                            'Update fields for the Required WS Element
                            resultData = myWSReqElemDelegate.UpdatePatientSampleFields(dbConnection, myOrderID, pSampleID, pSampleIDType, pSampleType)
                            If (resultData.HasError) Then Exit For
                        Next

                        If (Not resultData.HasError) Then
                            'When the Database Connection was opened locally, then the Commit is executed
                            If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                        Else
                            'When the Database Connection was opened locally, then the Rollback is executed
                            If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                        End If
                    End If
                End If
            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)

                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.UpdatePatientSampleFields", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function

        ''' <summary>
        ''' Updates the status of the specified Order with the informed value
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pOrderID">Order Identifier</param>
        ''' <param name="pNewStatus">New Order Status</param>
        ''' <returns>GlobalDataTO containing success/error information</returns>
        ''' <remarks>
        ''' Created by:  SG 15/06/2010
        ''' </remarks>
        Public Function UpdateOrderStatus(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pOrderID As String, ByVal pNewStatus As String) As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBConnection(pDBConnection)
                If (Not resultData.HasError) AndAlso (Not resultData.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim myOrders As New TwksOrdersDAO
                        resultData = myOrders.UpdateOrderStatus(dbConnection, pOrderID, pNewStatus)

                        If (Not resultData.HasError) Then
                            'When the Database Connection was opened locally, then the Commit is executed
                            If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                        Else
                            'When the Database Connection was opened locally, then the Rollback is executed
                            If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                        End If
                    End If
                End If
            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)

                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.UpdateOrderStatus", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function

        ''' <summary>
        ''' Update flags indicating if an Order has been printed and/or exported to an external LIMS system
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pSampleID">Sample or Patient Identifier</param>
        ''' <param name="pExportState">New value to Export field</param>
        ''' <param name="pPrintState">New value to print field</param>
        ''' <returns>GlobalDataTO containing success/error information</returns>
        ''' <remarks>
        ''' Created by:  DL 16/03/2011
        ''' </remarks>
        Public Function UpdateOutputBySampleID(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pSampleID As String, ByVal pPrintState As Boolean, _
                                               ByVal pExportState As Boolean) As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBTransaction(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim mytwksOrdersDAO As New TwksOrdersDAO
                        resultData = mytwksOrdersDAO.UpdateOutputBySampleID(dbConnection, pSampleID, pPrintState, pExportState)

                        If (Not resultData.HasError) Then
                            'When the Database Connection was opened locally, then the Commit is executed
                            If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                        Else
                            'When the Database Connection was opened locally, then the Rollback is executed
                            If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                        End If
                    End If
                End If
            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)

                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.UpdateOutputBySampleID", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function


        ''' <summary>
        ''' Get all Orders having Tests of the specified Test Type and, when informed, with the specified Status
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pTestType">Test Type Code</param>
        ''' <param name="pOrderStatus">Order Status (optional parameter</param>
        ''' <returns>GlobalDataTO containing a typed DataSet OrdersDS</returns>
        ''' <remarks>
        ''' Created by: JV + AG 02/10/2013
        ''' </remarks>
        Public Function GetOrdersByTestType(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pTestType As String, Optional ByVal pOrderStatus As String = "") As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBConnection(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim myDAO As New TwksOrdersDAO
                        resultData = myDAO.GetOrdersByTestType(dbConnection, pTestType, pOrderStatus)
                    End If
                End If
            Catch ex As Exception
                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString()
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.GetOrdersByTestType", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function

        ''' <summary>
        ''' Get the identifier of all Orders of the specified Sample Class and having Executions with the informed Execution Status
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pWorkSessionID">Work Session Identifier</param>
        ''' <param name="pAnalyzerID">Analyzer Identifier</param>
        ''' <param name="pSampleClass">Sample Class Code</param>
        ''' <param name="pStatus">Execution Status Code</param>
        ''' <returns>GlobalDataTO containing a typed DataSet WSOrderTestsDS when the identifier of the Orders that fulfill the specified conditions</returns>
        ''' <remarks>
        ''' Created by: JV 01/09/2013
        ''' </remarks>
        Public Function ReadWSOrders(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pAnalyzerID As String, ByVal pWorkSessionID As String, ByVal pSampleClass As String, ByVal pStatus As String) As GlobalDataTO
            Dim myGlobalDataTO As New GlobalDataTO
            Dim dbConnection As New SqlClient.SqlConnection
            Try
                myGlobalDataTO = DAOBase.GetOpenDBConnection(pDBConnection)
                If (Not myGlobalDataTO.HasError) And (Not myGlobalDataTO.SetDatos Is Nothing) Then
                    dbConnection = CType(myGlobalDataTO.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim myWSOrdersDAO As New TwksOrdersDAO
                        myGlobalDataTO = myWSOrdersDAO.GetOrdersPatientByAnalyzerWS(dbConnection, pWorkSessionID, pAnalyzerID, pSampleClass, pStatus)
                    End If
                End If

            Catch ex As Exception
                myGlobalDataTO.HasError = True
                myGlobalDataTO.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                myGlobalDataTO.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.ReadWSOrders", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) And (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return myGlobalDataTO
        End Function

        ''' <summary>
        ''' Returns all the Orders for the specified Work Session, Analyzer, Sample Class and Order Status
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pWorkSessionID">Work Session Identifier</param>
        ''' <param name="pAnalyzerID">Analyzer Identifier</param>
        ''' <param name="pSampleClass">Sample Class Code</param>
        ''' <param name="pStatus">Order Status Code</param>
        ''' <returns>GlobalDataTO containing a typed DataSet OrdersDS with all data of the Orders that fulfill the specified conditions</returns>
        ''' <remarks>
        ''' Created by:  JV 03/10/13 
        ''' </remarks> 
        Public Function ReadWSOrdersAllTypes(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pAnalyzerID As String, ByVal pWorkSessionID As String, ByVal pSampleClass As String, ByVal pStatus As String) As GlobalDataTO
            Dim myGlobalDataTO As New GlobalDataTO
            Dim dbConnection As New SqlClient.SqlConnection
            Try
                myGlobalDataTO = DAOBase.GetOpenDBConnection(pDBConnection)
                If (Not myGlobalDataTO.HasError) And (Not myGlobalDataTO.SetDatos Is Nothing) Then
                    dbConnection = CType(myGlobalDataTO.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim myWSOrdersDAO As New TwksOrdersDAO
                        myGlobalDataTO = myWSOrdersDAO.GetOrdersPatientByAnalyzerAndWSAllTypes(dbConnection, pWorkSessionID, pAnalyzerID, pSampleClass, pStatus)
                    End If
                End If

            Catch ex As Exception
                myGlobalDataTO.HasError = True
                myGlobalDataTO.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                myGlobalDataTO.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.ReadWSOrdersAllTypes", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) And (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return myGlobalDataTO
        End Function


        ''' <summary>
        ''' Updates the column OrderToExport to pNewValue by the informed filter parameters
        ''' Filter1: by orderTest + Rerun
        ''' Filter2: by LISMEssageID
        ''' </summary>
        ''' <param name="pDBConnection"></param>
        ''' <param name="pOrderID"></param>
        ''' <param name="pNewValue"></param>
        ''' <returns></returns>
        ''' <remarks>AG 30/07/2014 - #1887 OrderToExport management</remarks>
        Public Function UpdateOrderToExport(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pNewValue As Boolean, Optional ByVal pOrderID As String = "", _
                                            Optional ByVal pOrderTestID As Integer = -1, Optional ByVal pLISMessageID As String = "") As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBTransaction(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = CType(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim myDAO As New TwksOrdersDAO

                        'Search the orderID (if not informed)
                        Dim affectedOrderID As String = pOrderID
                        If affectedOrderID = "" Then
                            If pOrderTestID <> -1 Then
                                resultData = myDAO.ReadByOrderTestID(dbConnection, pOrderTestID)
                            ElseIf pLISMessageID <> "" Then
                                resultData = myDAO.ReadByLISMessageID(dbConnection, pLISMessageID)
                            End If

                            If Not (pOrderID = "" AndAlso pOrderTestID = -1 AndAlso pLISMessageID = "") Then
                                If Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing Then
                                    If DirectCast(resultData.SetDatos, OrdersDS).twksOrders.Rows.Count > 0 AndAlso Not DirectCast(resultData.SetDatos, OrdersDS).twksOrders(0).IsOrderIDNull Then
                                        affectedOrderID = DirectCast(resultData.SetDatos, OrdersDS).twksOrders(0).OrderID
                                    End If
                                End If
                            End If
                        End If

                        If affectedOrderID <> "" Then
                            resultData = myDAO.UpdateOrderToExport(dbConnection, affectedOrderID, pNewValue)

                            'If affected orderID not found because no parameter informed ... update all by sampleclass = PATIENT
                            '<Note: when user enables or disables all the LIS checkbox by clicking on list header>
                        ElseIf pOrderID = "" AndAlso pOrderTestID = -1 AndAlso pLISMessageID = "" Then
                            resultData = myDAO.UpdateOrderToExport(dbConnection, "", pNewValue)
                        End If

                        If (Not resultData.HasError) Then
                            'When the Database Connection was opened locally, then the Commit is executed
                            If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                        Else
                            'When the Database Connection was opened locally, then the Rollback is executed
                            If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                        End If
                    End If
                End If

            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString()
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message + " ((" + ex.HResult.ToString + "))", "OrdersDelegate.UpdateOrderToExport", EventLogEntryType.Error, False)

            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function


        ''' <summary>
        ''' Get all ExportStatus for the current order and calculates new OrderToExport value by the informed filter (Filter1: by orderTest // Filter2: by LISMEssageID)
        ''' - All results SENT: New OrderToExport = FALSE
        ''' - Some result NOTSENT: New OrderToExport = TRUE
        ''' </summary>
        ''' <param name="pDBConnection"></param>
        ''' <param name="pOrderID"></param>
        ''' <param name="pF1OrderTestID"></param>
        ''' <param name="pF2LISMessageID"></param>
        ''' <returns></returns>
        ''' <remarks>AG 30/07/2014 - #1887 OrderToExport management
        ''' AG 15/10/2014 BA-2011 - When none of the results of the patient is accepted automatically the LIS checkbox in the list of patients becomes disabled
        '''                       - Do not update the field OrderToExport if no changes</remarks>
        Public Function SetNewOrderToExportValue(ByVal pDBConnection As SqlClient.SqlConnection, Optional ByVal pOrderID As String = "", _
                                                 Optional ByVal pF1OrderTestID As Integer = -1, Optional ByVal pF2LISMessageID As String = "") As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBTransaction(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = CType(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then

                        '(1) Get the affected orderID by filter1 or filter2
                        Dim myDAO As New TwksOrdersDAO
                        Dim affectedOrderID As String = pOrderID

                        Dim updateAlways As Boolean = CBool(IIf(pOrderID <> "", True, False)) 'AG 15/10/2014 BA-2011 - when orderID informed update always, else update only when changes
                        Dim affectedOrderToExportValue As Boolean = False 'AG 15/10/2014 BA-2011

                        If affectedOrderID = "" Then
                            If pF1OrderTestID <> -1 Then
                                resultData = myDAO.ReadByOrderTestID(dbConnection, pF1OrderTestID)
                            ElseIf pF2LISMessageID <> "" Then
                                resultData = myDAO.ReadByLISMessageID(dbConnection, pF2LISMessageID)
                            End If

                            If Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing Then
                                If DirectCast(resultData.SetDatos, OrdersDS).twksOrders.Rows.Count > 0 AndAlso Not DirectCast(resultData.SetDatos, OrdersDS).twksOrders(0).IsOrderIDNull Then
                                    affectedOrderID = DirectCast(resultData.SetDatos, OrdersDS).twksOrders(0).OrderID
                                    affectedOrderToExportValue = DirectCast(resultData.SetDatos, OrdersDS).twksOrders(0).OrderToExport 'AG 15/10/2014 BA-2011
                                End If
                            End If
                        End If

                        '(2) Get all results belongs the current orderID
                        If affectedOrderID <> "" Then
                            Dim resultsDlg As New ResultsDelegate
                            resultData = resultsDlg.GetAcceptedResultsByOrder(dbConnection, affectedOrderID, True)

                            '(3) Calculate the new OrderToExport value
                            If Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing Then
                                Dim myResDS As New ResultsDS
                                myResDS = DirectCast(resultData.SetDatos, ResultsDS)

                                Dim newOrderToExportValue As Boolean = False 'Default value: Suppose ALL results of the orderID with ExportStatus = 'SENT'
                                If myResDS.vwksResults.Rows.Count > 0 Then
                                    If (From a As ResultsDS.vwksResultsRow In myResDS.vwksResults Where a.ExportStatus <> "SENT").ToList.Count > 0 Then
                                        'Some result with ExportStatus <> 'SENT'
                                        newOrderToExportValue = True
                                    End If

                                    'AG 15/10/2014 BA-2011 move code in order to call the myDAO.UpdateOrderToExport method out of this IF ... ENDIF block
                                    '...

                                End If

                                '(4) Finally update the new value
                                If Not resultData.HasError AndAlso Not myResDS.vwksResults(0).IsOrderIDNull Then
                                    If updateAlways OrElse affectedOrderToExportValue <> newOrderToExportValue Then 'AG 15/10/2014 BA-2011 update only when changes
                                        resultData = myDAO.UpdateOrderToExport(dbConnection, myResDS.vwksResults(0).OrderID, newOrderToExportValue)
                                    End If
                                End If

                            End If
                        End If

                        If (Not resultData.HasError) Then
                            'When the Database Connection was opened locally, then the Commit is executed
                            If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                            'resultData.SetDatos = <value to return; if any>
                        Else
                            'When the Database Connection was opened locally, then the Rollback is executed
                            If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                        End If
                    End If
                End If

            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString()
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message + " ((" + ex.HResult.ToString + "))", "OrdersDelegate.SetNewOrderToExportValue", EventLogEntryType.Error, False)

            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData

        End Function


        ''' <summary>
        ''' Read data of the Order to which the specified LISMessageID belongs 
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pLISMessageID">LIS message Identifier</param>
        ''' <returns>GlobalDataTO containing a typed DataSet OrdersDS with all data of the Order to which the specified LIS message identifier belongs</returns>
        ''' <remarks>
        ''' Created by:  AG 30/07/2014 - #1887 OrderToExport management
        ''' </remarks>
        Public Function ReadByLISMessageID(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pLISMessageID As String) As GlobalDataTO
            Dim myGlobalDataTO As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                myGlobalDataTO = DAOBase.GetOpenDBConnection(pDBConnection)
                If (Not myGlobalDataTO.HasError AndAlso Not myGlobalDataTO.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(myGlobalDataTO.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim myOrdersDAO As New TwksOrdersDAO
                        myGlobalDataTO = myOrdersDAO.ReadByLISMessageID(dbConnection, pLISMessageID)
                    End If
                End If
            Catch ex As Exception
                myGlobalDataTO = New GlobalDataTO()
                myGlobalDataTO.HasError = True
                myGlobalDataTO.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                myGlobalDataTO.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.ReadByLISMessageID", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return myGlobalDataTO
        End Function


        ''' <summary>
        ''' Updates the column OrderToPrint to pNewValue by the informed filter parameters
        ''' Filter1: by orderTest + Rerun
        ''' Filter2: by LISMEssageID
        ''' </summary>
        ''' <param name="pDBConnection"></param>
        ''' <param name="pOrderID"></param>
        ''' <param name="pNewValue"></param>
        ''' <returns></returns>
        ''' <remarks>AG 30/07/2014 - #1887 OrderToPrint management</remarks>
        Public Function UpdateOrderToPrint(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pNewValue As Boolean, Optional ByVal pOrderID As String = "", _
                                            Optional ByVal pOrderTestID As Integer = -1, Optional ByVal pLISMessageID As String = "") As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBTransaction(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = CType(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim myDAO As New TwksOrdersDAO

                        'Search the orderID (if not informed)
                        Dim affectedOrderID As String = pOrderID
                        If affectedOrderID = "" Then
                            If pOrderTestID <> -1 Then
                                resultData = myDAO.ReadByOrderTestID(dbConnection, pOrderTestID)
                            ElseIf pLISMessageID <> "" Then
                                resultData = myDAO.ReadByLISMessageID(dbConnection, pLISMessageID)
                            End If

                            If Not (pOrderID = "" AndAlso pOrderTestID = -1 AndAlso pLISMessageID = "") Then
                                If Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing Then
                                    If DirectCast(resultData.SetDatos, OrdersDS).twksOrders.Rows.Count > 0 AndAlso Not DirectCast(resultData.SetDatos, OrdersDS).twksOrders(0).IsOrderIDNull Then
                                        affectedOrderID = DirectCast(resultData.SetDatos, OrdersDS).twksOrders(0).OrderID
                                    End If
                                End If
                            End If
                        End If

                        If affectedOrderID <> "" Then
                            resultData = myDAO.UpdateOrderToPrint(dbConnection, affectedOrderID, pNewValue)

                            'If affected orderID not found because no parameter informed ... update all by sampleclass = PATIENT
                        ElseIf pOrderID = "" AndAlso pOrderTestID = -1 AndAlso pLISMessageID = "" Then
                            resultData = myDAO.UpdateOrderToPrint(dbConnection, "", pNewValue)
                        End If

                        If (Not resultData.HasError) Then
                            'When the Database Connection was opened locally, then the Commit is executed
                            If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                        Else
                            'When the Database Connection was opened locally, then the Rollback is executed
                            If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                        End If
                    End If
                End If

            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString()
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message + " ((" + ex.HResult.ToString + "))", "OrdersDelegate.UpdateOrderToPrint", EventLogEntryType.Error, False)

            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function


#End Region

#Region "LIS WITH FILES"
        ''' <summary>
        ''' Search the list of allowed values for each field in an Import from LIMS file and load them in an 
        ''' AllowedLIMSValuesTO that will be used to validate the content of every line in an Import from LIMS file
        ''' </summary>
        ''' <returns>GlobalDataTO containing an AllowedLIMSValuesTO with all values needed to validate fields in
        '''          each line of the Import from LIMS file</returns>
        ''' <remarks>
        ''' Created by:  SA 13/09/2010
        ''' </remarks>
        Private Function LoadAllowedValuesTO() As GlobalDataTO
            Dim resultData As New GlobalDataTO
            Try
                Dim myAllowedValuesTO As New AllowedLIMSValuesTO

                myAllowedValuesTO.SampleClasses = LIMS_FILE_ALLOWED_SAMPLE_CLASSES
                myAllowedValuesTO.MaxLenPatientID = LIMS_FILE_MAXLEN_EXTERNAL_PATIENTID

                'Get the list of allowed SampleTypes
                Dim myMasterDataDelegate As New MasterDataDelegate
                resultData = myMasterDataDelegate.GetList(Nothing, GlobalEnumerates.MasterDataEnum.SAMPLE_TYPES.ToString)

                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    Dim myMasterDataDS As MasterDataDS = DirectCast(resultData.SetDatos, MasterDataDS)

                    Dim allowedSampleTypes As String = ""
                    For i As Integer = 0 To myMasterDataDS.tcfgMasterData.Rows.Count - 1
                        If (i = 0) Then
                            allowedSampleTypes = myMasterDataDS.tcfgMasterData(i).ItemID
                        Else
                            allowedSampleTypes &= "|" & myMasterDataDS.tcfgMasterData(i).ItemID
                        End If
                    Next
                    myAllowedValuesTO.SampleTypes = allowedSampleTypes
                End If

                Dim myPreloadedMasterDataDS As New PreloadedMasterDataDS
                Dim myPreloadedMasterDataDelegate As New PreloadedMasterDataDelegate
                If (Not resultData.HasError) Then
                    'Get the list of allowed TubeTypes
                    Dim allowedTubeTypes As String = ""
                    resultData = myPreloadedMasterDataDelegate.GetList(Nothing, GlobalEnumerates.PreloadedMasterDataEnum.TUBE_TYPES_SAMPLES)

                    If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                        myPreloadedMasterDataDS = DirectCast(resultData.SetDatos, PreloadedMasterDataDS)

                        For i As Integer = 0 To myPreloadedMasterDataDS.tfmwPreloadedMasterData.Rows.Count - 1
                            If (i = 0) Then
                                allowedTubeTypes = myPreloadedMasterDataDS.tfmwPreloadedMasterData(i).ItemID
                            Else
                                allowedTubeTypes &= "|" & myPreloadedMasterDataDS.tfmwPreloadedMasterData(i).ItemID
                            End If
                        Next
                        myAllowedValuesTO.TubeTypes = allowedTubeTypes
                    End If
                End If

                If (Not resultData.HasError) Then
                    'Get the list of allowed TestTypes
                    Dim allowedTestTypes As String = ""
                    resultData = myPreloadedMasterDataDelegate.GetList(Nothing, GlobalEnumerates.PreloadedMasterDataEnum.TEST_TYPES)

                    If (Not resultData.HasError And Not resultData.SetDatos Is Nothing) Then
                        myPreloadedMasterDataDS = DirectCast(resultData.SetDatos, PreloadedMasterDataDS)

                        For i As Integer = 0 To myPreloadedMasterDataDS.tfmwPreloadedMasterData.Rows.Count - 1
                            If (i = 0) Then
                                allowedTestTypes = myPreloadedMasterDataDS.tfmwPreloadedMasterData(i).ItemID
                            Else
                                allowedTestTypes &= "|" & myPreloadedMasterDataDS.tfmwPreloadedMasterData(i).ItemID
                            End If
                        Next
                        myAllowedValuesTO.TestTypes = allowedTestTypes
                    End If
                End If

                Dim myFieldLimitsDS As New FieldLimitsDS
                Dim myFieldLimitsDelegate As New FieldLimitsDelegate
                If (Not resultData.HasError) Then
                    'Get limits (min and max values) for field Number of Test Replicates
                    resultData = myFieldLimitsDelegate.GetList(Nothing, GlobalEnumerates.FieldLimitsEnum.TEST_NUM_REPLICATES)
                    If (Not resultData.HasError And Not resultData.SetDatos Is Nothing) Then
                        myFieldLimitsDS = DirectCast(resultData.SetDatos, FieldLimitsDS)

                        If (myFieldLimitsDS.tfmwFieldLimits.Rows.Count = 1) Then
                            myAllowedValuesTO.MinTestReplicates = Convert.ToInt32(myFieldLimitsDS.tfmwFieldLimits(0).MinValue)
                            myAllowedValuesTO.MaxTestReplicates = Convert.ToInt32(myFieldLimitsDS.tfmwFieldLimits(0).MaxValue)
                        End If
                    End If
                End If

                If (Not resultData.HasError) Then
                    'Get limits (min and max values) for field Number of Blank & Calibrator Replicates
                    resultData = myFieldLimitsDelegate.GetList(Nothing, GlobalEnumerates.FieldLimitsEnum.BLK_CALIB_REPLICATES)
                    If (Not resultData.HasError And Not resultData.SetDatos Is Nothing) Then
                        myFieldLimitsDS = DirectCast(resultData.SetDatos, FieldLimitsDS)

                        If (myFieldLimitsDS.tfmwFieldLimits.Rows.Count = 1) Then
                            myAllowedValuesTO.MinCalibReplicates = Convert.ToInt32(myFieldLimitsDS.tfmwFieldLimits(0).MinValue)
                            myAllowedValuesTO.MaxCalibReplicates = Convert.ToInt32(myFieldLimitsDS.tfmwFieldLimits(0).MaxValue)
                        End If
                    End If
                End If

                If (Not resultData.HasError) Then
                    'Get limits (min and max values) for field Number of Control Replicates
                    resultData = myFieldLimitsDelegate.GetList(Nothing, GlobalEnumerates.FieldLimitsEnum.CONTROL_REPLICATES)
                    If (Not resultData.HasError And Not resultData.SetDatos Is Nothing) Then
                        myFieldLimitsDS = DirectCast(resultData.SetDatos, FieldLimitsDS)

                        If (myFieldLimitsDS.tfmwFieldLimits.Rows.Count = 1) Then
                            myAllowedValuesTO.MinCtrlReplicates = Convert.ToInt32(myFieldLimitsDS.tfmwFieldLimits(0).MinValue)
                            myAllowedValuesTO.MaxCtrlReplicates = Convert.ToInt32(myFieldLimitsDS.tfmwFieldLimits(0).MaxValue)
                        End If
                    End If
                End If

                'Return the object with the list of allowed values for each field in the Import from LIMS file
                If (Not resultData.HasError) Then resultData.SetDatos = myAllowedValuesTO
            Catch ex As Exception
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.LoadAllowedValuesTO", EventLogEntryType.Error, False)
            End Try
            Return resultData
        End Function

        ''' <summary>
        ''' Validate the value of each field in a line of an Import from LIMS file
        ''' </summary>
        ''' <param name="pFileLine">Valid line from the Import from LIMS file</param>
        ''' <param name="pSplitCharacter">Character used to split fields in in the line</param>
        ''' <param name="pAllowedValuesTO">Object containing the allowed values for each field in the line</param>
        ''' <param name="pSavedWSOrderTestsDS">Typed DataSet in which are loaded all fields informed in the line when
        '''                                    no errors were found</param>
        ''' <returns>GlobalDataTO containing success/error information</returns>
        ''' <remarks>
        ''' Created by:  SA 13/09/2010
        ''' Modified by: SA 25/10/2010 - Added processing of ISE Tests contained in the LIMS file to Import
        '''              DL 15/04/2011 - Changes in the way Controls are processed
        '''              SA 18/05/2012 - Changed validation of TestType field: only values STD and ISE are valids. Field position
        '''                              in the import file is 5 instead of 6
        '''                            - Field SampleType is always validated
        '''                            - Field TubeType is always validated
        '''                            - Position of field Number of Replicates in the import file is 6 instead of 4
        '''                            - Position of field Test Name in the import file is 4 instead of 1
        '''                            - Position of field External PatientID in the import file is 1 instead of 5
        '''              SA 29/05/2012 - When a Control has been requested but the QC is not active or there are not linked Controls for 
        '''                              the Test/SampleType, the line cannot be processed and it is marked with message LIMS_TEST_WITH_NO_QC
        '''              SA 11/06/2012 - When SampleClass=Q (request of Controls for the Test), add all active Controls linked to the 
        '''                              Test (current code adds only the last one due to the list is bad processed)
        '''              SA 20/06/2012 - Changes to allow processing of Controls (SampleClass=Q) also for ISE Tests
        ''' </remarks>
        Private Function LoadLIMSLineToProcess(ByVal pFileLine As String, ByVal pSplitCharacter As Char, ByVal pAllowedValuesTO As AllowedLIMSValuesTO, _
                                               ByRef pSavedWSOrderTestsDS As SavedWSOrderTestsDS) As GlobalDataTO
            Dim resultData As New GlobalDataTO
            Try
                Dim errorCode As String = ""
                Dim fieldIsOK As Boolean = False

                If (pFileLine.Split(pSplitCharacter).Length = LIMS_NUM_FIELDS_BY_LINE) Then
                    'Validate the SampleClass field
                    Dim sampleClass As String = ""
                    'sampleClass = pFileLine.Split(pSplitCharacter)(0).Trim.ToUpper
                    sampleClass = pFileLine.Split(pSplitCharacter)(0).Trim.ToUpperBS 'SGM 01/02/2012 Apply .ToUpperBS extension Bug #1112
                    fieldIsOK = (RegularExpressions.Regex.Match(sampleClass, pAllowedValuesTO.SampleClasses).Success)
                    If (Not fieldIsOK) Then errorCode = GlobalEnumerates.Messages.LIMS_INVALID_SAMPLECLASS.ToString

                    Dim extPatienTID As String = ""
                    If (fieldIsOK) Then
                        If (sampleClass = "N" Or sampleClass = "U") Then
                            'Validate the minimum and maximum allowed Length for the field External PatientID 
                            extPatienTID = pFileLine.Split(pSplitCharacter)(1).Trim
                            fieldIsOK = (extPatienTID.Count >= 1) AndAlso _
                                        (extPatienTID.Count <= pAllowedValuesTO.MaxLenPatientID)
                        End If
                        If (Not fieldIsOK) Then errorCode = GlobalEnumerates.Messages.LIMS_INVALID_PATIENTID.ToString
                    End If

                    Dim sampleType As String = ""
                    If (fieldIsOK) Then
                        'Validate the SampleType field 
                        'sampleType = pFileLine.Split(pSplitCharacter)(2).Trim.ToUpper
                        sampleType = pFileLine.Split(pSplitCharacter)(2).Trim.ToUpperBS 'SGM 01/02/2012 Apply .ToUpperBS extension Bug #1112
                        fieldIsOK = (RegularExpressions.Regex.Match(sampleType, pAllowedValuesTO.SampleTypes).Success)
                        If (Not fieldIsOK) Then errorCode = GlobalEnumerates.Messages.LIMS_INVALID_SAMPLETYPE.ToString
                    End If

                    Dim tubeType As String = ""
                    If (fieldIsOK) Then
                        'Validate the TubeType field 
                        'tubeType = pFileLine.Split(pSplitCharacter)(3).Trim.ToUpper
                        tubeType = pFileLine.Split(pSplitCharacter)(3).Trim.ToUpperBS 'SGM 01/02/2012 Apply .ToUpperBS extension Bug #1112
                        fieldIsOK = (RegularExpressions.Regex.Match(tubeType, pAllowedValuesTO.TubeTypes).Success)
                        If (Not fieldIsOK) Then errorCode = GlobalEnumerates.Messages.LIMS_INVALID_TUBETYPE.ToString
                    End If

                    Dim testType As String = ""
                    If (fieldIsOK) Then
                        'Validate the TestType field - Only STD and ISE Tests are allowed
                        'testType = pFileLine.Split(pSplitCharacter)(5).Trim.ToUpper
                        testType = pFileLine.Split(pSplitCharacter)(5).Trim.ToUpperBS 'SGM 01/02/2012 Apply .ToUpperBS extension Bug #1112
                        If (RegularExpressions.Regex.Match(testType, pAllowedValuesTO.TestTypes).Success) Then
                            fieldIsOK = (testType = "STD" OrElse testType = "ISE")
                        Else
                            fieldIsOK = False
                        End If
                        If (Not fieldIsOK) Then errorCode = GlobalEnumerates.Messages.LIMS_INVALID_TESTTYPE.ToString
                    End If

                    'Validate the informed TEST (Standard or ISE, searching by Test Name)
                    Dim testID As Integer = -1
                    Dim testName As String = ""
                    Dim defTestRepNum As Integer = -1

                    'Dim calcUniqueST As Boolean = True
                    'Dim calcSampleType As String = ""
                    'Dim calcFormulaText As String = ""

                    If (fieldIsOK) Then
                        'testName = pFileLine.Split(pSplitCharacter)(4).Trim.ToUpper
                        testName = pFileLine.Split(pSplitCharacter)(4).Trim.ToUpperBS 'SGM 01/02/2012 Apply .ToUpperBS extension Bug #1112
                        If (testType = "STD") Then
                            'Verify if the informed Standard Test exists in the DB
                            Dim myTestDelegate As New TestsDelegate
                            resultData = myTestDelegate.ExistsTestName(Nothing, testName)

                            If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                                Dim myTestDS As TestsDS = DirectCast(resultData.SetDatos, TestsDS)

                                If (myTestDS.tparTests.Rows.Count = 1) Then
                                    testID = myTestDS.tparTests(0).TestID
                                    defTestRepNum = myTestDS.tparTests(0).ReplicatesNumber
                                Else
                                    fieldIsOK = False
                                End If
                            Else
                                fieldIsOK = False
                            End If

                        ElseIf (testType = "ISE") Then
                            'Verifiy if the informed ISE Test exists in the DB
                            Dim myISETestDelegate As New ISETestsDelegate
                            resultData = myISETestDelegate.ExistsISETestName(Nothing, testName, "FNAME")

                            If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                                Dim myISETestDS As ISETestsDS = DirectCast(resultData.SetDatos, ISETestsDS)

                                If (myISETestDS.tparISETests.Rows.Count = 1) Then
                                    testID = myISETestDS.tparISETests(0).ISETestID
                                    defTestRepNum = 1
                                Else
                                    fieldIsOK = False
                                End If
                            Else
                                fieldIsOK = False
                            End If
                        End If
                        If (Not fieldIsOK) Then errorCode = GlobalEnumerates.Messages.LIMS_INVALID_TEST.ToString

                        'ElseIf (testType = "CALC") Then
                        '    'Verifiy if the informed Calculated Test exists in the DB
                        '    Dim myCalcTestDelegate As New CalculatedTestsDelegate
                        '    resultData = myCalcTestDelegate.ExistsCalcTestName(Nothing, testName)

                        '    If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                        '        Dim myCalcTestDS As CalculatedTestsDS = DirectCast(resultData.SetDatos, CalculatedTestsDS)

                        '        If (myCalcTestDS.tparCalculatedTests.Rows.Count = 1) Then
                        '            testID = myCalcTestDS.tparCalculatedTests(0).CalcTestID
                        '            calcUniqueST = myCalcTestDS.tparCalculatedTests(0).UniqueSampleType
                        '            If (Not myCalcTestDS.tparCalculatedTests(0).IsSampleTypeNull) Then calcSampleType = myCalcTestDS.tparCalculatedTests(0).SampleType
                        '            calcFormulaText = myCalcTestDS.tparCalculatedTests(0).FormulaText
                        '        Else
                        '            fieldIsOK = False
                        '        End If
                        '    Else
                        '        fieldIsOK = False
                        '    End If
                    End If

                    'Validate the informed TEST / SAMPLE TYPE
                    Dim defCtrlRepNumber As Integer = -1
                    Dim defNumOfControls As Integer = -1
                    Dim defQCActiveflag As Boolean

                    If (fieldIsOK) Then
                        'Validate TestID/SampleType exists in the DB
                        If (testType = "STD") Then
                            Dim myTestSampleDelegate As New TestSamplesDelegate
                            resultData = myTestSampleDelegate.GetDefinition(Nothing, testID, sampleType)

                            If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                                Dim myTestSampleDS As TestSamplesDS = DirectCast(resultData.SetDatos, TestSamplesDS)

                                If (myTestSampleDS.tparTestSamples.Rows.Count = 1) Then
                                    defQCActiveflag = myTestSampleDS.tparTestSamples(0).QCActive
                                    If (myTestSampleDS.tparTestSamples(0).QCActive) Then
                                        'defNumOfControls = myTestSampleDS.tparTestSamples(0).NumberOfControls
                                        defCtrlRepNumber = myTestSampleDS.tparTestSamples(0).ControlReplicates

                                        'Get the number of the active Controls for the Test/SampleType
                                        Dim myTestControlsDelegate As New TestControlsDelegate
                                        resultData = myTestControlsDelegate.CountActiveByTestIDAndSampleType(Nothing, "STD", testID, sampleType)
                                        If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                                            defNumOfControls = CType(resultData.SetDatos, Integer)
                                        Else
                                            fieldIsOK = False
                                        End If
                                    End If
                                Else
                                    fieldIsOK = False
                                End If
                            Else
                                fieldIsOK = False
                            End If

                        ElseIf (testType = "ISE") Then
                            Dim myISETestSampleDelegate As New ISETestSamplesDelegate
                            resultData = myISETestSampleDelegate.GetListByISETestID(Nothing, testID, sampleType)
                            If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                                Dim myISETestSampleDS As ISETestSamplesDS = DirectCast(resultData.SetDatos, ISETestSamplesDS)

                                If (myISETestSampleDS.tparISETestSamples.Rows.Count = 1) Then
                                    defQCActiveflag = myISETestSampleDS.tparISETestSamples(0).QCActive
                                    If (myISETestSampleDS.tparISETestSamples(0).QCActive) Then
                                        'defNumOfControls = myISETestSampleDS.tparISETestSamples(0).NumberOfControls
                                        defCtrlRepNumber = myISETestSampleDS.tparISETestSamples(0).ControlReplicates

                                        'Get the number of the active Controls for the Test/SampleType
                                        Dim myTestControlsDelegate As New TestControlsDelegate
                                        resultData = myTestControlsDelegate.CountActiveByTestIDAndSampleType(Nothing, "ISE", testID, sampleType)
                                        If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                                            defNumOfControls = CType(resultData.SetDatos, Integer)
                                        Else
                                            fieldIsOK = False
                                        End If
                                    End If
                                Else
                                    fieldIsOK = False
                                End If
                            End If

                            'ElseIf (testType = "CALC" AndAlso calcUniqueST) Then
                            '    fieldIsOK = (sampleType = calcSampleType)
                        End If

                        If (Not fieldIsOK) Then
                            errorCode = GlobalEnumerates.Messages.LIMS_INVALID_TEST_SAMPLETYPE.ToString
                        Else
                            'When a Control has been requested but the QC is not active or there are not linked Controls for the Test/SampleType
                            If (sampleClass = "Q" AndAlso (Not defQCActiveflag OrElse defNumOfControls <= 0)) Then
                                fieldIsOK = False
                                errorCode = GlobalEnumerates.Messages.LIMS_TEST_WITH_NO_QC.ToString
                            End If
                        End If
                    End If

                    Dim numReplicates As Integer = 0
                    If (fieldIsOK) Then
                        'Validate the Number of Replicates field
                        If (IsNumeric(pFileLine.Split(pSplitCharacter)(6).Trim)) Then
                            numReplicates = Convert.ToInt32(pFileLine.Split(pSplitCharacter)(6).Trim)

                            'Only if the number of replicates was informed it is validated
                            If (numReplicates > 0) Then
                                If (sampleClass = "N" Or sampleClass = "U") Then
                                    fieldIsOK = (pAllowedValuesTO.MinTestReplicates <= numReplicates And _
                                                 numReplicates <= pAllowedValuesTO.MaxTestReplicates)
                                ElseIf (sampleClass = "Q") Then
                                    fieldIsOK = (pAllowedValuesTO.MinCtrlReplicates <= numReplicates And _
                                                 numReplicates <= pAllowedValuesTO.MaxCtrlReplicates)
                                End If
                            End If
                        Else
                            'Number of Replicates has to be a numeric value
                            fieldIsOK = False
                        End If
                        If (Not fieldIsOK) Then errorCode = GlobalEnumerates.Messages.LIMS_INVALID_REPLICATES.ToString
                    End If

                    If (fieldIsOK) Then
                        Dim nextCreationOrder As Integer = 0
                        Dim savedWSOrderTestRow As SavedWSOrderTestsDS.tparSavedWSOrderTestsRow

                        If (sampleClass = "Q") Then
                            'Get all Controls linked to the TestType/TestID/SampleType
                            Dim myTestDelegate As New TestControlsDelegate
                            resultData = myTestDelegate.GetControlsNEW(Nothing, testType, testID, sampleType, 0, True)

                            If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                                Dim myTestCtrlDS As TestControlsDS = DirectCast(resultData.SetDatos, TestControlsDS)

                                Dim i As Integer = 0
                                For Each row As TestControlsDS.tparTestControlsRow In myTestCtrlDS.tparTestControls.Rows
                                    savedWSOrderTestRow = pSavedWSOrderTestsDS.tparSavedWSOrderTests.NewtparSavedWSOrderTestsRow()

                                    savedWSOrderTestRow.SampleClass = "CTRL"
                                    savedWSOrderTestRow.TestType = testType
                                    savedWSOrderTestRow.TestID = testID
                                    savedWSOrderTestRow.TestName = testName
                                    savedWSOrderTestRow.SampleType = sampleType
                                    savedWSOrderTestRow.TubeType = tubeType
                                    savedWSOrderTestRow.ReplicatesNumber = Convert.ToInt32(IIf(numReplicates > 0, numReplicates, defCtrlRepNumber))
                                    savedWSOrderTestRow.ControlID = row.ControlID

                                    nextCreationOrder = (From a In pSavedWSOrderTestsDS.tparSavedWSOrderTests _
                                                        Where a.SampleClass = "CTRL" _
                                                       Select a).Count
                                    savedWSOrderTestRow.CreationOrder = nextCreationOrder + 1

                                    pSavedWSOrderTestsDS.tparSavedWSOrderTests.AddtparSavedWSOrderTestsRow(savedWSOrderTestRow)
                                Next row
                            End If
                        Else
                            savedWSOrderTestRow = pSavedWSOrderTestsDS.tparSavedWSOrderTests.NewtparSavedWSOrderTestsRow()

                            savedWSOrderTestRow.TestType = testType
                            savedWSOrderTestRow.TestID = testID
                            savedWSOrderTestRow.TestName = testName
                            savedWSOrderTestRow.SampleClass = "PATIENT"
                            savedWSOrderTestRow.StatFlag = Convert.ToBoolean(IIf(sampleClass = "U", True, False))
                            savedWSOrderTestRow.TubeType = tubeType
                            savedWSOrderTestRow.ReplicatesNumber = Convert.ToInt32(IIf(numReplicates > 0, numReplicates, defTestRepNum))
                            If (extPatienTID <> "") Then
                                savedWSOrderTestRow.SampleID = extPatienTID
                                savedWSOrderTestRow.ExternalPID = extPatienTID
                            End If

                            If (testType = "STD") Or (testType = "ISE") Then
                                savedWSOrderTestRow.SampleType = sampleType
                                'ElseIf (testType = "CALC") Then
                                '    If (calcUniqueST) Then savedWSOrderTestRow.SampleType = sampleType
                                '    savedWSOrderTestRow.FormulaText = calcFormulaText
                            End If

                            nextCreationOrder = (From a In pSavedWSOrderTestsDS.tparSavedWSOrderTests _
                                                Where a.SampleClass = "PATIENT" _
                                               Select a).Count
                            savedWSOrderTestRow.CreationOrder = nextCreationOrder + 1
                            pSavedWSOrderTestsDS.tparSavedWSOrderTests.AddtparSavedWSOrderTestsRow(savedWSOrderTestRow)
                        End If
                    Else
                        resultData.HasError = True
                        resultData.ErrorCode = errorCode
                    End If
                Else
                    'Number of field in the file line is not the expected
                    resultData.HasError = True
                    resultData.ErrorCode = GlobalEnumerates.Messages.LIMS_INVALID_FIELD_NUM.ToString
                End If
            Catch ex As Exception
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.LoadLIMSLineToProcess", EventLogEntryType.Error, False)
            End Try
            Return resultData
        End Function

        ''' <summary>
        ''' Read the specified import LIMS file and process each line in it to get the information.  Valid lines
        ''' are loaded in a typed DataSet SavedWSOrderTestsDS, while the lines with errors are moved to the table
        ''' of Import Error Log
        ''' </summary>
        ''' <param name="pFileName">Valid line from the Import from LIMS file</param>
        ''' <returns>GlobalDataTO containing a typed DataSet SavedWSOrderTestsDS with the list of requested
        '''          Samples from the Import file</returns>
        ''' <remarks>
        ''' Created by:  SA 13/09/2010
        ''' </remarks>
        Private Function ReadLIMSFile(ByVal pFileName As String) As GlobalDataTO
            Dim resultData As New GlobalDataTO

            Try
                If (IO.File.Exists(pFileName)) Then
                    Dim fields As String() 'Represent a read line from the text file
                    Dim delimiter As String = "\t"

                    resultData = LoadAllowedValuesTO()
                    If (Not resultData.HasError And Not resultData.SetDatos Is Nothing) Then
                        Dim myAllowedValuesTO As AllowedLIMSValuesTO = DirectCast(resultData.SetDatos, AllowedLIMSValuesTO)

                        Dim importLogDS As New ImportErrorsLogDS
                        Dim mySavedWSOrderTestsDS As New SavedWSOrderTestsDS
                        Using parser As New FileIO.TextFieldParser(pFileName)
                            parser.SetDelimiters(delimiter)

                            'Set value of the split character to a variable; in this case is the TAB character
                            Dim lineNumber As Integer = 0
                            Dim splitCharacter As Char = Convert.ToChar(Windows.Forms.Keys.Tab)
                            While (Not parser.EndOfData)
                                'Read the current line and load it in fields variable
                                lineNumber += 1
                                fields = parser.ReadFields()

                                resultData = LoadLIMSLineToProcess(fields(0).ToString(), splitCharacter, myAllowedValuesTO, mySavedWSOrderTestsDS)
                                If (resultData.HasError) Then
                                    'Add the line with error to an ImportErrorsLogDS
                                    Dim importErrorRow As ImportErrorsLogDS.twksImportErrorsLogRow

                                    importErrorRow = importLogDS.twksImportErrorsLog.NewtwksImportErrorsLogRow()
                                    importErrorRow.ErrorCode = resultData.ErrorCode
                                    importErrorRow.LineNumber = lineNumber

                                    Dim fieldsInLine As String() = fields(0).Split(Convert.ToChar(Windows.Forms.Keys.Tab))
                                    Dim lineText As String = fieldsInLine(0)
                                    For i As Integer = 1 To fieldsInLine.Length - 1
                                        lineText &= " | " & fieldsInLine(i)
                                    Next
                                    importErrorRow.LineText = lineText

                                    importLogDS.twksImportErrorsLog.AddtwksImportErrorsLogRow(importErrorRow)
                                End If
                            End While
                        End Using

                        'If there are errors...
                        If (importLogDS.twksImportErrorsLog.Rows.Count > 0) Then
                            Dim myImportErrorsLogDelegate As New ImportErrorsLogDelegate
                            resultData = myImportErrorsLogDelegate.Add(Nothing, importLogDS)
                        End If

                        If (Not resultData.HasError) Then
                            'Return the list of requested Samples from the LIMS file
                            resultData.SetDatos = mySavedWSOrderTestsDS
                        End If
                    End If
                End If
            Catch ex As Exception
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.LIMS_FILE_SINTAX.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.ReadLIMSFile", EventLogEntryType.Error, False)
            End Try
            Return resultData
        End Function

        ''' <summary>
        ''' Execute the full Import from LIMS process, adding all valid requested Samples to the active WS (if there
        ''' is not an active WS, then a new one is created), through the same functionality used to load Saved WS.
        ''' When the process finished, the read file is renamed by adding it the current date and moved to the Memo path
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pImportFilePath">Full path of the Import from LIMS file</param>
        ''' <param name="pWSResultDS"></param>
        ''' <param name="pAnalyzerID">Analyzer Identifier</param>
        ''' <param name="pProcessedFilePath">Path for processed Import from LIMS file</param>
        ''' <param name="pWorkSessionID">Work Session Identifier. Optional parameter</param>
        ''' <param name="pWSStatus">Status of the active WS. Optional parameter, needed only when the imported data has to be added to the 
        '''                         active WS in the DB</param>
        ''' <param name="pSaveDataInDB">Optional parameter. When True, it indicates the data has to be added to the active WS in the DB; when False, 
        '''                             then the imported data is added to the DS containing all data requested for the WS (pWSResultDS)</param>
        ''' <returns>GlobalDataTO containing a typed DataSet WorkSessionResultDS extended with all valid requested
        '''          Samples contained in the LIMS Import File</returns>
        ''' <remarks>
        ''' Created by:  SA 14/09/2010
        ''' Modified by: SA 14/09/2011 - After load data read from LIMS file, delete the correspondent records in the table of 
        '''                              Incomplete Patient Samples. Added optional parameter for the WorkSession Identifier
        '''              SA 26/09/2011 - Added optional parameter for the Status of the active Work Session
        '''                            - Added optional parameter to indicate if the data received from LIS has to be saved in the application DB
        '''                            - Instead delete the affected records in table of Incomplete Patient Samples, mark them as Completed,
        '''                              updating also fields SampleType and PatientID
        '''                            - When pSaveDataInBD is TRUE, then the WS is created/updated
        '''              XB 05/02/2013 - Upper conversions redundants because the value is already in UpperCase must delete to avoid Regional Settings problems (Bugs tracking #1112)
        ''' </remarks>
        Public Function ImportFromLIMS(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pImportFilePath As String, ByVal pWSResultDS As WorkSessionResultDS, _
                                       ByVal pAnalyzerID As String, ByVal pProcessedFilePath As String, Optional ByVal pWorkSessionID As String = "", _
                                       Optional ByVal pWSStatus As String = "", Optional ByVal pSaveDataInDB As Boolean = False) As GlobalDataTO
            Dim resultData As New GlobalDataTO
            Dim dbConnection As New SqlClient.SqlConnection
            Try
                'Remove all import errors generated in a previous import process (if any)
                Dim myImportErrorsLogDelegate As New ImportErrorsLogDelegate
                resultData = myImportErrorsLogDelegate.DeleteAll(Nothing)
                If (Not resultData.HasError) Then
                    'Read and validate the import file. Requested Samples to add are returned in a SavedWSOrderTestsDS.
                    'Errors found (if any) were saved in the Import Errors Log table
                    resultData = ReadLIMSFile(pImportFilePath)
                    If (Not resultData.HasError AndAlso Not resultData Is Nothing) Then
                        Dim mySavedWSOrderTestsDS As SavedWSOrderTestsDS = DirectCast(resultData.SetDatos, SavedWSOrderTestsDS)

                        If (mySavedWSOrderTestsDS.tparSavedWSOrderTests.Rows.Count > 0) Then
                            'Open a DB Transaction to execute the final steps in the Import process
                            resultData = DAOBase.GetOpenDBTransaction(pDBConnection)
                            If (Not resultData.HasError AndAlso Not resultData Is Nothing) Then
                                dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                                If (Not dbConnection Is Nothing) Then
                                    'Get all requests for Patient Samples
                                    Dim lstPatientSamples As List(Of SavedWSOrderTestsDS.tparSavedWSOrderTestsRow)
                                    lstPatientSamples = (From a As SavedWSOrderTestsDS.tparSavedWSOrderTestsRow In mySavedWSOrderTestsDS.tparSavedWSOrderTests _
                                                        Where a.SampleClass = "PATIENT" _
                                                     Order By a.SampleID _
                                                       Select a).ToList
                                    'Order By a.SampleID.ToUpper _

                                    'Dim autoNumSeq As Integer = 1
                                    Dim currentSampleID As String = ""
                                    Dim currentPatientID As String = ""
                                    Dim myPatientsDelegate As New PatientDelegate

                                    For Each patientRow As SavedWSOrderTestsDS.tparSavedWSOrderTestsRow In lstPatientSamples
                                        'An External PatientID has been informed, verify if it already exists in the DB
                                        'If (currentSampleID.ToUpper <> patientRow.SampleID.ToUpper) Then
                                        If (currentSampleID <> patientRow.SampleID) Then
                                            currentPatientID = ""
                                            currentSampleID = patientRow.SampleID

                                            resultData = myPatientsDelegate.ReadByExternalPID(dbConnection, currentSampleID)
                                            If (Not resultData.HasError AndAlso Not resultData Is Nothing) Then
                                                Dim myPatientDS As PatientsDS = DirectCast(resultData.SetDatos, PatientsDS)

                                                If (myPatientDS.tparPatients.Rows.Count = 0) Then
                                                    'New LIMS Patient, add it to Patients Table
                                                    Dim newPatient As PatientsDS.tparPatientsRow
                                                    newPatient = myPatientDS.tparPatients.NewtparPatientsRow
                                                    newPatient.PatientType = "LIS"
                                                    newPatient.ExternalPID = currentSampleID
                                                    newPatient.ExternalArrivalDate = Now
                                                    myPatientDS.tparPatients.AddtparPatientsRow(newPatient)

                                                    resultData = myPatientsDelegate.Add(dbConnection, myPatientDS, False) 'AG 13/03/2013 add parameter False (patient not from xml message)
                                                    If (Not resultData.HasError AndAlso Not resultData Is Nothing) Then
                                                        'Set SampleID field in the DS with the PatientID created
                                                        currentPatientID = DirectCast(resultData.SetDatos, PatientsDS).tparPatients(0).PatientID
                                                        patientRow.SampleID = currentPatientID
                                                    End If
                                                Else
                                                    'Set SampleID field in the DS with the PatientID in the DB
                                                    currentPatientID = myPatientDS.tparPatients(0).PatientID
                                                    patientRow.SampleID = currentPatientID
                                                End If
                                            End If
                                        Else
                                            'Request is for an already processed Patient, set SampleID field in the DataSet
                                            patientRow.SampleID = currentPatientID
                                        End If

                                        If (resultData.HasError) Then Exit For
                                    Next

                                    If (Not resultData.HasError) Then
                                        'Create the special Saved WS...
                                        Dim mySavedWSDelegate As New SavedWSDelegate
                                        resultData = mySavedWSDelegate.Save(dbConnection, "LIMS " & Now.ToString("yyyyMMdd HH:mm:ss"), _
                                                                            Nothing, -1, True, mySavedWSOrderTestsDS)
                                        If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                                            Dim savedWSID As Integer = DirectCast(resultData.SetDatos, Integer)

                                            'Load the Saved WS...
                                            Dim myOrderTestDelegate As New OrderTestsDelegate
                                            resultData = myOrderTestDelegate.LoadFromSavedWS(dbConnection, savedWSID, pAnalyzerID, pWSResultDS, True)

                                            If (Not resultData.HasError) Then
                                                'Delete the Saved WS
                                                Dim mySavedWSDS As New SavedWSDS
                                                Dim mySavedWSRow As SavedWSDS.tparSavedWSRow

                                                mySavedWSRow = mySavedWSDS.tparSavedWS.NewtparSavedWSRow
                                                mySavedWSRow.SavedWSID = savedWSID
                                                mySavedWSDS.tparSavedWS.AddtparSavedWSRow(mySavedWSRow)

                                                resultData = mySavedWSDelegate.Delete(dbConnection, mySavedWSDS)
                                            End If

                                            'Update all affected incomplete Patient Samples
                                            If (Not resultData.HasError) Then
                                                lstPatientSamples = (From a As SavedWSOrderTestsDS.tparSavedWSOrderTestsRow In mySavedWSOrderTestsDS.tparSavedWSOrderTests _
                                                                    Where a.SampleClass = "PATIENT" _
                                                                 Order By a.ExternalPID, a.SampleType _
                                                                   Select a).ToList
                                                If (lstPatientSamples.Count > 0) Then
                                                    Dim myBCPosWithNoRequestDelegate As New BarcodePositionsWithNoRequestsDelegate

                                                    currentSampleID = ""
                                                    For Each patientRow As SavedWSOrderTestsDS.tparSavedWSOrderTestsRow In lstPatientSamples
                                                        If (currentSampleID = String.Empty OrElse _
                                                            currentSampleID <> patientRow.ExternalPID & "|" & patientRow.SampleType) Then
                                                            currentSampleID = patientRow.ExternalPID & "|" & patientRow.SampleType
                                                            'currentSampleID.ToUpper <> patientRow.ExternalPID.ToUpper & "|" & patientRow.SampleType.ToUpper) Then

                                                            'Mark as completed all Patient Samples for which the LIS requests Tests
                                                            resultData = myBCPosWithNoRequestDelegate.CompletePatientSamplesFromLIS(dbConnection, pAnalyzerID, pWorkSessionID, _
                                                                                                                                    patientRow)
                                                            If (resultData.HasError) Then Exit For
                                                        End If
                                                    Next
                                                End If
                                            End If

                                            If (Not resultData.HasError) Then
                                                If (pSaveDataInDB) Then
                                                    'Update the WorkSession in the application DB
                                                    Dim myWSDelegate As New WorkSessionsDelegate
                                                    resultData = myWSDelegate.PrepareOrderTestsForWS(dbConnection, pWSResultDS, False, pWorkSessionID, pAnalyzerID, pWSStatus, True, True)
                                                End If
                                            End If

                                            If (Not resultData.HasError) Then
                                                'Rename the processed file
                                                Dim pointPos As Integer = LIMS_IMPORT_FILE_NAME.IndexOf(CChar("."))
                                                Dim newFileName As String = LIMS_IMPORT_FILE_NAME.Substring(0, pointPos) & " " & _
                                                                            Now.ToString("yyyyMMdd HHmmss") & "." & _
                                                                            LIMS_IMPORT_FILE_NAME.Substring(pointPos + 1)

                                                'Move the Import file to the Memo path
                                                If (Not IO.Directory.Exists(pProcessedFilePath)) Then
                                                    IO.Directory.CreateDirectory(pProcessedFilePath)
                                                End If
                                                IO.File.Move(pImportFilePath, pProcessedFilePath & newFileName)
                                            End If
                                        End If
                                    End If
                                End If

                                If (Not resultData.HasError) Then
                                    'When the Database Connection was opened locally, then the Commit is executed
                                    If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                                Else
                                    'When the Database Connection was opened locally, then the Rollback is executed
                                    If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                                End If
                            Else
                                resultData.HasError = True
                                resultData.ErrorCode = GlobalEnumerates.Messages.LIMS_FILE_SINTAX.ToString
                            End If
                        End If
                    End If
                End If
            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)

                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.ImportFromLIMS", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function

#End Region

#Region "TO TEST - NEW METHODS TO DIVIDE ADD WS IN SEVERAL DB TRANSACTIONS"
        ''' <summary>
        ''' Update values of Order Tests belonging to one or more Orders. For each different Order, Order Tests with status OPEN that 
        ''' are not in the entry DataSet, are deleted
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pOrderTestsDS">Typed DataSet OrderTestsDS containing the list of Order Tests that should remain in the Orders 
        '''                             that have to be updated</param>
        ''' <returns>GlobalDataTO containing success/error information</returns>
        ''' <remarks>
        ''' Created by:  SA 25/02/2010
        ''' Modified by: SA 15/04/2010 - When an Alternative Calibrator is added for an existing one, it has to be added as a new Order 
        '''                              Test in the Calibrator Order
        '''              SA 26/04/2010 - Added parameter for the Work Session Identifier
        '''              SA 19/03/2014 - BT #1545 ==> Changes to divide AddWorkSession process in several DB Transactions 
        ''' </remarks>
        Public Function UpdateOrders_NEW(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pWorkSessionID As String, _
                                         ByVal pOrderTestsDS As OrderTestsDS) As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBTransaction(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim currentOrderID As String = String.Empty
                        Dim orderTestsList As String = String.Empty

                        Dim myOrderTestsDS As New OrderTestsDS
                        Dim orderTestsToAdd As New OrderTestsDS
                        Dim myOrderTestsDelegate As New OrderTestsDelegate
                        For Each orderTestRow As OrderTestsDS.twksOrderTestsRow In pOrderTestsDS.twksOrderTests
                            If (orderTestRow.OrderID <> currentOrderID) Then
                                If (currentOrderID <> String.Empty) Then
                                    'Update values of Order Tests that remains in the Order
                                    resultData = myOrderTestsDelegate.Update(dbConnection, myOrderTestsDS)
                                    If (Not resultData.HasError) Then
                                        'Delete all Open Order Tests that are not included in the list
                                        resultData = myOrderTestsDelegate.DeleteNotInList(dbConnection, pWorkSessionID, currentOrderID, orderTestsList)

                                        If (Not resultData.HasError) Then
                                            'If there are Order Tests to add to the Order...then create them
                                            If (orderTestsToAdd.twksOrderTests.Rows.Count > 0) Then
                                                resultData = myOrderTestsDelegate.Create(dbConnection, orderTestsToAdd)
                                            End If
                                        End If
                                    End If
                                End If

                                'Initialize variables used to control the loop
                                currentOrderID = orderTestRow.OrderID
                                If (Not orderTestRow.IsOrderTestIDNull) Then
                                    orderTestsList = orderTestRow.OrderTestID.ToString

                                    'Import the current OrderTest to the local DataSet containing Order Tests to update
                                    myOrderTestsDS.Clear()
                                    myOrderTestsDS.twksOrderTests.ImportRow(orderTestRow)
                                Else
                                    'Import the current OrderTest to the local DataSet containing Order Tests to add
                                    orderTestsToAdd.Clear()
                                    orderTestsToAdd.twksOrderTests.ImportRow(orderTestRow)
                                End If
                            Else
                                If (Not orderTestRow.IsOrderTestIDNull) Then
                                    'Add the OrderTestID to the list 
                                    orderTestsList += "," + orderTestRow.OrderTestID.ToString

                                    'Import the current OrderTest to the local DataSet
                                    myOrderTestsDS.twksOrderTests.ImportRow(orderTestRow)
                                Else
                                    'Import the current OrderTest to the local DataSet containing Order Tests to add
                                    orderTestsToAdd.twksOrderTests.ImportRow(orderTestRow)
                                End If
                            End If
                        Next

                        'Process for the last row...
                        If (pOrderTestsDS.twksOrderTests.Rows.Count > 0) Then
                            'Update values of Order Tests that remains in the Order
                            resultData = myOrderTestsDelegate.Update(dbConnection, myOrderTestsDS)
                            If (Not resultData.HasError) Then
                                'Delete all Open Order Tests that are not included in the list
                                resultData = myOrderTestsDelegate.DeleteNotInList(dbConnection, pWorkSessionID, currentOrderID, orderTestsList)

                                If (Not resultData.HasError) Then
                                    'If there are Order Tests to add to the Order...then create them
                                    If (orderTestsToAdd.twksOrderTests.Rows.Count > 0) Then
                                        resultData = myOrderTestsDelegate.Create(dbConnection, orderTestsToAdd)

                                        If (Not resultData.HasError) Then
                                            'Get the OrderTestID for each one of the added Order Tests and inform the corresponding field
                                            'in the OrderTestsDS to return
                                            Dim lstNewOrderTests As List(Of OrderTestsDS.twksOrderTestsRow)
                                            For Each row As OrderTestsDS.twksOrderTestsRow In orderTestsToAdd.twksOrderTests
                                                lstNewOrderTests = (From a As OrderTestsDS.twksOrderTestsRow In pOrderTestsDS.twksOrderTests _
                                                                   Where a.TestType = row.TestType _
                                                                 AndAlso a.TestID = row.TestID _
                                                                 AndAlso a.SampleType = row.SampleType _
                                                                  Select a).ToList

                                                If (lstNewOrderTests.Count > 0) Then
                                                    lstNewOrderTests.First.BeginEdit()
                                                    lstNewOrderTests.First.OrderTestID = row.OrderTestID
                                                    lstNewOrderTests.First.EndEdit()
                                                End If
                                            Next
                                            lstNewOrderTests = Nothing
                                        End If
                                    End If
                                End If
                            End If
                        End If

                        If (Not resultData.HasError) Then
                            'When the Database Connection was opened locally, then the Commit is executed
                            If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                        Else
                            'When the Connection was opened locally, then the Rollback is executed
                            If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                        End If
                    End If
                End If
            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)

                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.UpdateOrders_NEW", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function
#End Region

#Region "TO TEST - NEW METHODS TO DIVIDE SAVING OF LIS PATIENT ORDER TESTS IN SEVERAL TRANSACTIONS"
        ''' <summary>
        ''' Update fields PatientID and SampleID for each Order, depending on value of its field PatientIDType:
        ''' ** If MAN, update SampleID = pSampleID and PatientID = NULL
        ''' ** If DB,  update PatientID = pSampleID and SampleID = NULL
        ''' Update fields PatientID and SampleID in the same way also for the required Patient Sample Element
        ''' </summary>
        ''' <param name="pDBConnection">Open DB Connection</param>
        ''' <param name="pOrdersToUpdateDS">Typed DataSet OrderTestsDS with the list of Orders to update and all the needed information</param>
        ''' <returns>GlobalDataTO containing success/error information</returns>
        ''' <remarks>
        ''' Created by:  SA 01/08/2013 
        ''' Modified by: SA 11/03/2014 - BT #1536 ==> Replaced entry parameters for an unique typed DataSet OrderTestsDS containing the list of Orders to 
        '''                                           update and all needed information for each one of them (SampleID, PatientIDType and SampleType) 
        ''' </remarks>
        Public Function UpdatePatientSampleFields_NEW(ByVal pDBConnection As SqlClient.SqlConnection, ByVal pOrdersToUpdateDS As OrderTestsDS) As GlobalDataTO
            Dim resultData As GlobalDataTO = Nothing
            Dim dbConnection As SqlClient.SqlConnection = Nothing

            Try
                resultData = DAOBase.GetOpenDBTransaction(pDBConnection)
                If (Not resultData.HasError AndAlso Not resultData.SetDatos Is Nothing) Then
                    dbConnection = DirectCast(resultData.SetDatos, SqlClient.SqlConnection)
                    If (Not dbConnection Is Nothing) Then
                        Dim myOrders As New TwksOrdersDAO
                        Dim myWSReqElemDelegate As New WSRequiredElementsDelegate

                        For Each row As OrderTestsDS.twksOrderTestsRow In pOrdersToUpdateDS.twksOrderTests
                            'Update fields for the Order
                            resultData = myOrders.UpdatePatientSampleFields(dbConnection, row.OrderID, row.SampleID, row.PatientIDType)
                            If (resultData.HasError) Then Exit For

                            'Update fields for the Required WS Element
                            resultData = myWSReqElemDelegate.UpdatePatientSampleFields(dbConnection, row.OrderID, row.SampleID, row.PatientIDType, row.SampleType)
                            If (resultData.HasError) Then Exit For
                        Next

                        If (Not resultData.HasError) Then
                            'When the Database Connection was opened locally, then the Commit is executed
                            If (pDBConnection Is Nothing) Then DAOBase.CommitTransaction(dbConnection)
                        Else
                            'When the Database Connection was opened locally, then the Rollback is executed
                            If (pDBConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)
                        End If
                    End If
                End If
            Catch ex As Exception
                'When the Database Connection was opened locally, then the Rollback is executed
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then DAOBase.RollbackTransaction(dbConnection)

                resultData = New GlobalDataTO()
                resultData.HasError = True
                resultData.ErrorCode = GlobalEnumerates.Messages.SYSTEM_ERROR.ToString
                resultData.ErrorMessage = ex.Message

                Dim myLogAcciones As New ApplicationLogManager()
                myLogAcciones.CreateLogActivity(ex.Message, "OrdersDelegate.UpdatePatientSampleFields_NEW", EventLogEntryType.Error, False)
            Finally
                If (pDBConnection Is Nothing) AndAlso (Not dbConnection Is Nothing) Then dbConnection.Close()
            End Try
            Return resultData
        End Function
#End Region
    End Class
End Namespace