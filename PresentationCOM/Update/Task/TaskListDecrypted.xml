<?xml version="1.0" standalone="yes"?>
<TaskListDS xmlns="http://tempuri.org/TaskListDS.xsd">
  <CommonTask>
    <StructureScript>
      IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_tfmwMultiLanguageResources_ResourceID]') AND type = 'D')
      BEGIN
      ALTER TABLE [dbo].[tfmwMultiLanguageResources] DROP CONSTRAINT [DF_tfmwMultiLanguageResources_ResourceID]
      END
      GO
      IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_tfmwMultiLanguageResources_OnlyService]') AND type = 'D')
      BEGIN
      ALTER TABLE [dbo].[tfmwMultiLanguageResources] DROP CONSTRAINT [DF_tfmwMultiLanguageResources_OnlyService]
      END
      GO
      IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tfmwMultiLanguageResources]') AND type in (N'U'))
      DROP TABLE [dbo].[tfmwMultiLanguageResources]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      SET ANSI_PADDING ON
      GO
      CREATE TABLE [dbo].[tfmwMultiLanguageResources](
      [ResourceID] [varchar](35) NOT NULL,
      [LanguageID] [varchar](15) NOT NULL,
      [ResourceText] [nvarchar](500) NOT NULL,
      [ApplicationVersion] [varchar](20) NULL,
      [Translated] [bit] NULL,
      [TS_DateTime] [datetime] NULL,
      [OnlyService] [bit] NOT NULL,
      [CreationDate] [datetime] NULL,
      [CreationUser] [varchar](5) NULL,
      [TranslatedDate] [datetime] NULL,
      [TranslatedUser] [varchar](5) NULL,
      [TS_User] [varchar](5) NULL,
      CONSTRAINT [PK_tfmwMultiLanguageResources] PRIMARY KEY CLUSTERED
      (
      [ResourceID] ASC,
      [LanguageID] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]
      GO
      SET ANSI_PADDING OFF
      GO
      ALTER TABLE [dbo].[tfmwMultiLanguageResources] ADD  CONSTRAINT [DF_tfmwMultiLanguageResources_ResourceID]  DEFAULT ((0)) FOR [ResourceID]
      GO
      ALTER TABLE [dbo].[tfmwMultiLanguageResources] ADD  CONSTRAINT [DF_tfmwMultiLanguageResources_OnlyService]  DEFAULT ((0)) FOR [OnlyService]
      GO

      IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tfmwPreloadedMasterData]') AND type in (N'U'))
      DROP TABLE [dbo].[tfmwPreloadedMasterData]

      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      SET ANSI_PADDING ON
      GO
      CREATE TABLE [dbo].[tfmwPreloadedMasterData](
      [SubTableID] [varchar](20) NOT NULL,
      [ItemID] [varchar](15) NOT NULL,
      [ResourceID] [varchar](35) NULL,
      [FixedItemDesc] [nvarchar](255) NOT NULL,
      [MultiLanguageFlag] [bit] NOT NULL,
      [Position] [tinyint] NULL,
      [Status] [bit] NOT NULL,
      CONSTRAINT [PK_tfmwPreloadedMasterData] PRIMARY KEY CLUSTERED
      (
      [SubTableID] ASC,
      [ItemID] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]
      GO
      SET ANSI_PADDING OFF
      GO

      IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tfmwSwParameters]') AND type in (N'U'))
      DROP TABLE [dbo].[tfmwSwParameters]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      SET ANSI_PADDING ON
      GO
      CREATE TABLE [dbo].[tfmwSwParameters](
      [ParameterName] [varchar](50) NOT NULL,
      [DependByModel] [bit] NOT NULL,
      [AnalyzerModel] [varchar](10) NULL,
      [ValueNumeric] [real] NULL,
      [ValueText] [nvarchar](50) NULL,
      [Description] [varchar](255) NULL,
      [ParameterID] [int] IDENTITY(1,1) NOT NULL,
      CONSTRAINT [PK_tfmwSwParameters_1] PRIMARY KEY CLUSTERED
      (
      [ParameterID] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]
      GO
      SET ANSI_PADDING OFF
      GO
      IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tfmwFieldLimits]') AND type in (N'U'))
      DROP TABLE [dbo].[tfmwFieldLimits]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      SET ANSI_PADDING ON
      GO
      CREATE TABLE [dbo].[tfmwFieldLimits](
      [LimitID] [varchar](30) NOT NULL,
      [LimitDescription] [nvarchar](255) NULL,
      [MinValue] [real] NOT NULL,
      [MaxValue] [real] NOT NULL,
      [StepValue] [real] NULL,
      [DefaultValue] [real] NULL,
      [DecimalsAllowed] [tinyint] NOT NULL,
      [AnalyzerModel] [varchar](10) NULL,
      [IndexID] [int] IDENTITY(1,1) NOT NULL,
      CONSTRAINT [PK_tfmwFieldLimits_1] PRIMARY KEY CLUSTERED
      (
      [IndexID] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]
      GO
      SET ANSI_PADDING OFF
      GO
    </StructureScript>
    <UpdateScript>
      INSERT INTO [Ax00].[dbo].[tfmwMultiLanguageResources]
      SELECT * FROM [Ax00TEM].[dbo].[tfmwMultiLanguageResources]
      GO
      INSERT INTO  [Ax00].[dbo].[tfmwPreloadedMasterData]
      SELECT * FROM [Ax00TEM].[dbo].[tfmwPreloadedMasterData]
      GO
      INSERT INTO  [Ax00].[dbo].[tfmwSwParameters] (ParameterName , DependByModel ,AnalyzerModel ,ValueNumeric ,ValueText , Description )
      SELECT ParameterName , DependByModel ,AnalyzerModel ,ValueNumeric ,ValueText , Description  FROM [Ax00TEM].[dbo].[tfmwSwParameters]
      GO
      INSERT INTO  [Ax00].[dbo].[tfmwFieldLimits] (LimitID, LimitDescription ,MinValue , MaxValue ,StepValue ,DefaultValue ,DecimalsAllowed ,AnalyzerModel )
      SELECT LimitID, LimitDescription ,MinValue , MaxValue ,StepValue ,DefaultValue ,DecimalsAllowed ,AnalyzerModel FROM [Ax00TEM].[dbo].[tfmwFieldLimits]
      GO
      DELETE tparContaminations
      WHERE tparContaminations.ReagentContaminatorID IN( SELECT reagentID FROM tparReagents WHERE tparReagents.PreloadedReagent = 1)
      AND tparContaminations.ReagentContaminatedID  IN (SELECT reagentID FROM tparReagents WHERE tparReagents.PreloadedReagent = 1)
      GO
      DELETE tparContaminations
      WHERE tparContaminations.TestContaminaCuvetteID IN( SELECT TestID FROM tparTests WHERE tparTests.PreloadedTest  = 1)
      GO
    </UpdateScript>
  </CommonTask>
  <AppVersion>
    <Version>3.04</Version>
    <StructureScript>
      GO
    </StructureScript>
    <UpdateScript>
      UPDATE dbo.tfmwVersions SET UserSoftware = '3.0.4', ServiceSoftware = '1.2.4', FirmwareScripts = '1.1.0', Firmware = '0.13'
      GO
    </UpdateScript>
  </AppVersion >
  <AppVersion>
    <Version>3.05</Version>
    <StructureScript>
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksWSBLines' AND sc.name = 'Type') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].twksWSBLines ADD Type [nvarchar](15) NOT NULL DEFAULT 'STATIC'
      END

      SET ANSI_PADDING ON
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_twksWSBLines') = 1)
      BEGIN
      ALTER TABLE [Ax00].[dbo].twksWSBLines DROP CONSTRAINT [PK_twksWSBLines]
      END

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_twksWSBLines') = 0)
      BEGIN
      ALTER TABLE [Ax00].[dbo].twksWSBLines ADD  CONSTRAINT [PK_twksWSBLines] PRIMARY KEY CLUSTERED
      (
      [AnalyzerID] ASC,
      [BaseLineID] ASC,
      [Wavelength] ASC,
      [WellUsed] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      END
      SET ANSI_PADDING OFF
      GO


      SET ANSI_PADDING ON
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tfmwSwParameters_1') = 1)
      BEGIN
      ALTER TABLE [Ax00].[dbo].tfmwSwParameters DROP CONSTRAINT PK_tfmwSwParameters_1
      END

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tfmwSwParameters' AND sc.name = 'ParameterID') = 1
      BEGIN
      ALTER TABLE [Ax00].[dbo].tfmwSwParameters DROP COLUMN [ParameterID]
      END

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tfmwSwParameters' AND sc.name = 'ParameterID') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].tfmwSwParameters ADD [ParameterID] [int] IDENTITY(1,1) NOT NULL
      END

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tfmwSwParameters_1') = 0)
      BEGIN
      ALTER TABLE [Ax00].[dbo].tfmwSwParameters ADD  CONSTRAINT [PK_tfmwSwParameters_1] PRIMARY KEY CLUSTERED
      (
      [ParameterID] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      END

      SET ANSI_PADDING OFF
      GO


      SET ANSI_PADDING ON
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tfmwPreloadedRanges') = 1)
      BEGIN
      ALTER TABLE [Ax00].[dbo].tfmwFieldLimits DROP CONSTRAINT PK_tfmwPreloadedRanges
      END

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tfmwFieldLimits' AND sc.name = 'IndexID') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].tfmwFieldLimits ADD [IndexID] [int] IDENTITY(1,1) NOT NULL
      END

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tfmwFieldLimits_1') = 0)
      BEGIN
      ALTER TABLE [Ax00].[dbo].tfmwFieldLimits ADD  CONSTRAINT PK_tfmwFieldLimits_1 PRIMARY KEY CLUSTERED
      (
      [IndexID] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      END

      SET ANSI_PADDING OFF
      GO

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksWSBLinesByWell' AND sc.name = 'Type') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].twksWSBLinesByWell ADD Type [nvarchar](15) NOT NULL DEFAULT 'STATIC'
      END
      SET ANSI_PADDING OFF
      GO
    </StructureScript>
    <UpdateScript>
      UPDATE dbo.tfmwVersions SET UserSoftware = '3.0.5', ServiceSoftware = '1.2.4', FirmwareScripts = '1.1.0', Firmware = '0.20'
      GO

      IF ((SELECT COUNT(*) FROM [dbo].[tcfgAnalyzers] WHERE [AnalyzerID] = 'SN0000099999_Ax200' ) = 0)
      BEGIN
      INSERT INTO [dbo].[tcfgAnalyzers] ([AnalyzerID],[AnalyzerModel],[FirmwareVersion],[Generic],[Active]) VALUES('SN0000099999_Ax200', 'A200', '0.0', 1, 0)

      END
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwAnalyzerModelTubesByRing') = 1)
      BEGIN
      INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'SAMPLES',1,'T13',1)
      INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'SAMPLES',1,'T15',1)
      INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'SAMPLES',1,'PED',0)
      INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'REAGENTS',2,'BOTTLE3',1)
      INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'REAGENTS',2,'BOTTLE2',1)
      INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'REAGENTS',2,'BOTTLE1',1)
      END
      GO


      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwAnalyzerModelRotorsConfig') = 1)
      BEGIN
      UPDATE tfmwAnalyzerModelRotorsConfig SET RotorType = 'SAMPLES', RingPositions = 44, FirstCellNumber = 1, LastCellNumber = 44
      WHERE AnalyzerModel = 'A200' AND RotorType = 'SAMP_REAG' AND RingNumber = 1

      UPDATE tfmwAnalyzerModelRotorsConfig SET RotorType = 'REAGENTS', RingPositions = 44, FirstCellNumber = 45, LastCellNumber = 88
      WHERE AnalyzerModel = 'A200' AND RotorType = 'SAMP_REAG' AND RingNumber = 2

      END
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwSwFlags') = 1)
      BEGIN
      IF ((SELECT COUNT(*) FROM [dbo].[tfmwSwFlags] WHERE [FlagID] = 'DynamicBL_Fill' ) = 0)
      BEGIN
      INSERT INTO [dbo].[tfmwSwFlags] ([FlagID] ,[AllowedValues]) VALUES ('DynamicBL_Fill' ,'INI, END, CANCELED or NULL')
      END

      IF ((SELECT COUNT(*) FROM [dbo].[tfmwSwFlags] WHERE [FlagID] = 'DynamicBL_Read' ) = 0)
      BEGIN
      INSERT INTO [dbo].[tfmwSwFlags] ([FlagID] ,[AllowedValues]) VALUES ('DynamicBL_Read' ,'INI, END, CANCELED or NULL')
      END

      IF ((SELECT COUNT(*) FROM [dbo].[tfmwSwFlags] WHERE [FlagID] = 'DynamicBL_Empty' ) = 0)
      BEGIN
      INSERT INTO [dbo].[tfmwSwFlags] ([FlagID] ,[AllowedValues]) VALUES ('DynamicBL_Empty' ,'INI, END, CANCELED or NULL')
      END

      END
      GO
    </UpdateScript>
  </AppVersion >
  <AppVersion>
    <Version>3.06</Version>
    <StructureScript>
      --|====================|
      --| BA400: v3.10       |
      --|====================|

      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      SET ANSI_PADDING ON
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'u' AND name = 'tcfgGridColsConfiguration') = 0)
      BEGIN
      CREATE TABLE [dbo].[tcfgGridColsConfiguration](
      [ScreenID] [varchar](20) NOT NULL,
      [GridName] [varchar](20) NOT NULL,
      [ColumnName] [varchar](20) NOT NULL,
      [DefaultWidth] [int] NULL,
      [SavedWidth] [int] NULL,
      [TS_User] [nvarchar](16) NOT NULL,
      [TS_DateTime] [datetime] NOT NULL,
      CONSTRAINT [PK_tcfgGridColsConfiguration] PRIMARY KEY CLUSTERED
      (
      [ScreenID] ASC,
      [GridName] ASC,
      [ColumnName] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]

      SET ANSI_PADDING OFF

      ALTER TABLE [dbo].[tcfgGridColsConfiguration]  WITH CHECK ADD  CONSTRAINT [FK_tfmwScreens_tcfgGridColsConfiguration] FOREIGN KEY([ScreenID])
      REFERENCES [dbo].[tfmwScreens] ([ScreenID])

      ALTER TABLE [dbo].[tcfgGridColsConfiguration] CHECK CONSTRAINT [FK_tfmwScreens_tcfgGridColsConfiguration]
      END
      GO


      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksOrderTests' AND sc.name = 'Selected') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].twksOrderTests ADD Selected bit NOT NULL default 0
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'Selected') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].tparSavedWSOrderTests ADD Selected bit NULL
      END
      GO

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparTests' AND sc.name = 'CustomPosition') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].tparTests ADD CustomPosition INT NOT NULL DEFAULT 1
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparTests' AND sc.name = 'Available') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].tparTests ADD Available bit NOT NULL default 1
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparCalculatedTests' AND sc.name = 'CustomPosition') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].tparCalculatedTests ADD CustomPosition INT NOT NULL DEFAULT 1
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparCalculatedTests' AND sc.name = 'Available') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].tparCalculatedTests ADD Available bit NOT NULL default 1
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparISETests' AND sc.name = 'CustomPosition') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].tparISETests ADD CustomPosition INT NOT NULL DEFAULT 1
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparISETests' AND sc.name = 'Available') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].tparISETests ADD Available bit NOT NULL default 1
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparOffSystemTests' AND sc.name = 'CustomPosition') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].tparOffSystemTests ADD CustomPosition INT NOT NULL DEFAULT 1
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparOffSystemTests' AND sc.name = 'Available') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].tparOffSystemTests ADD Available bit NOT NULL default 1
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparTestProfiles' AND sc.name = 'CustomPosition') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].tparTestProfiles ADD CustomPosition INT NOT NULL DEFAULT 1
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparTestProfiles' AND sc.name = 'Available') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].tparTestProfiles ADD Available bit NOT NULL default 1
      END
      GO

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparControls' AND sc.name = 'ControlLevel') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].tparControls ADD ControlLevel tinyint NOT NULL default 1
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparTestControls' AND sc.name = 'ControlNum') = 1
      BEGIN
      ALTER TABLE [Ax00].[dbo].tparTestControls DROP COLUMN ControlNum
      END
      GO

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparISETestSamples' AND sc.name = 'TestLongName') = 0
      BEGIN
      ALTER TABLE [dbo].[tparISETestSamples]
      ADD TestLongName nvarchar(80) NULL
      END
      GO

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisISETestSamples' AND sc.name = 'TestLongName') = 0
      BEGIN
      ALTER TABLE [dbo].[thisISETestSamples]
      ADD TestLongName nvarchar(80) NULL
      END
      GO

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tqcHistoryTestSamples' AND sc.name = 'TestLongName') = 0
      BEGIN
      ALTER TABLE [dbo].[tqcHistoryTestSamples]
      ADD TestLongName nvarchar(80) NULL
      END
      GO

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparISETestSamples' AND sc.name = 'SlopeFactorA2') = 0
      BEGIN
      ALTER TABLE [dbo].[tparISETestSamples]
      ADD SlopeFactorA2 real NULL
      END
      GO

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparISETestSamples' AND sc.name = 'SlopeFactorB2') = 0
      BEGIN
      ALTER TABLE [dbo].[tparISETestSamples]
      ADD SlopeFactorB2 real NULL
      END
      GO

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisISETestSamples' AND sc.name = 'SlopeFactorA2') = 0
      BEGIN
      ALTER TABLE [dbo].[thisISETestSamples]
      ADD SlopeFactorA2 real NULL
      END
      GO

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisISETestSamples' AND sc.name = 'SlopeFactorB2') = 0
      BEGIN
      ALTER TABLE [dbo].[thisISETestSamples]
      ADD SlopeFactorB2 real NULL
      END
      GO

      IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vhisTestSamples]'))
      DROP VIEW [dbo].[vhisTestSamples]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vhisTestSamples]
      AS
      SELECT     'STD' AS TestType, TS .HistTestID, TS .TestID, TS .TestName, TS .TestVersionNumber, TS .DecimalsAllowed, NULL AS FormulaText,
      (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, TS .TestLongName
      FROM         thisTestSamples TS LEFT OUTER JOIN
      vcfgTestSortingForReports T ON TS .TestName = T .TestName AND T .TestType = 'STD'
      UNION
      SELECT     'ISE' AS TestType, TS .HistISETestID AS HistTestID, TS .ISETestID AS TestID, TS .ISETestName AS TestName, 0 AS TestVersionNumber, TS .DecimalsAllowed, NULL
      AS FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, TS.TestLongName
      FROM         thisISETestSamples TS LEFT OUTER JOIN
      vcfgTestSortingForReports T ON TS .ISETestName = T .TestName AND T .TestType = 'ISE'
      UNION
      SELECT     'CALC' AS TestType, TS .HistCalcTestID AS HistTestID, TS .CalcTestID AS TestID, TS .CalcTestLongName AS TestName, 0 AS TestVersionNumber,
      TS .DecimalsAllowed, TS .FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, NULL
      AS TestLongName
      FROM         thisCalculatedTests TS LEFT OUTER JOIN
      vcfgTestSortingForReports T ON TS .CalcTestLongName = T .TestName AND T .TestType = 'CALC'
      UNION
      SELECT     'OFFS' AS TestType, TS .HistOffSystemTestID AS HistTestID, TS .OffSystemTestID AS TestID, TS .OffSystemTestName AS TestName, 0 AS TestVersionNumber,
      TS .DecimalsAllowed, NULL AS FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, NULL
      AS TestLongName
      FROM         thisOffSystemTestSamples TS LEFT OUTER JOIN
      vcfgTestSortingForReports T ON TS .OffSystemTestName = T .TestName AND T .TestType = 'OFFS' ;
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vhisWSResults') = 1)
      DROP VIEW [dbo].vhisWSResults
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vhisWSResults] AS
      SELECT  R.HistOrderTestID, R.AnalyzerID, R.WorkSessionID, R.ResultDateTime,
      (CASE WHEN OT.SampleClass = 'PATIENT' AND OT.SampleID IS NOT NULL THEN OT.SampleID
      WHEN OT.SampleClass = 'PATIENT' AND P.PatientID IS NOT NULL THEN P.PatientID
      ELSE NULL END) AS PatientID, P.FirstName, P.LastName, P.Gender, P.DateOfBirth, P.Comments,
      OT.HistPatientID, OT.SampleClass, OT.StatFlag, OT.SpecimenID, OT.SampleType, OT.TestType,
      TS.TestID, TS.TestName, TS.TestLongName, TS.TestVersionNumber, TS.TestPosition, TS.DecimalsAllowed, R.CONCValue,
      (CASE WHEN NOT R.RemarkAlert IS NULL THEN R.RemarkAlert ELSE '' END) AS RemarkAlert,  MD.FixedItemDesc AS MeasureUnit,
      R.MinRefRange, R.MaxRefRange, R.ExportStatus, R.AlarmList, TS.FormulaText, R.MultiPointNumber, R.ManualResultFlag, R.ManualResult, R.ManualResultText,
      R.LISMessageID, OT.LISRequest, OT.ExternalQC, OT.ESOrderID, OT.LISOrderID, OT.ESPatientID, OT.LISPatientID, OT.LISTestName, OT.LISSampleType, OT.LISUnits
      FROM    dbo.thisWSResults AS R INNER JOIN dbo.thisWSOrderTests AS OT ON R.HistOrderTestID = OT.HistOrderTestID
      INNER JOIN dbo.vhisTestSamples AS TS ON OT.HistTestID = TS.HistTestID AND OT.TestType = TS.TestType AND TS.TestVersionNumber = COALESCE (OT.TestVersionNumber, 0)
      LEFT OUTER JOIN dbo.tcfgMasterData AS MD ON MD.SubTableID = 'TEST_UNITS' AND MD.ItemID = OT.MeasureUnit
      LEFT OUTER JOIN dbo.thisPatients AS P ON P.HistPatientID = OT.HistPatientID
      GO

      IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksResultsCTRL]'))
      DROP VIEW [dbo].[vwksResultsCTRL]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vwksResultsCTRL]
      AS
      SELECT     dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
      dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
      dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
      dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
      dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
      dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
      dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
      dbo.twksResults.TS_DateTime, dbo.twksResults.WorkSessionID, dbo.twksResults.AnalyzerID, dbo.tparTestSamples.BlankAbsorbanceLimit,
      dbo.tparTests.KineticBlankLimit, 'NULL' AS CalibratorLotNumber, dbo.twksOrderTests.SampleType, NULL AS TheoricalConcentration,
      dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, dbo.tparTestSamples.FactorLowerLimit, dbo.tparTestSamples.FactorUpperLimit, dbo.tparTests.DecimalsAllowed,
      dbo.tparControls.ControlName, dbo.tparControls.LotNumber AS ControlLotNumber, dbo.tparTestControls.MinConcentration, dbo.tparTestControls.MaxConcentration,
      dbo.twksOrderTests.TestType, dbo.twksResults.Collapsed, dbo.tparTests.TestName, dbo.twksOrderTests.OrderTestStatus,
      dbo.twksWSRepetitionsToAdd.PostDilutionType, dbo.twksOrderTests.TestID, dbo.tparTestSamples.ActiveRangeType, dbo.twksOrderTests.OrderID,
      dbo.twksResults.ManualResult, dbo.twksResults.ManualResultText, dbo.twksOrders.StatFlag, '' AS CalibratorName, '' AS AnalysisMode, dbo.twksResults.CurveSlope,
      dbo.twksResults.CurveOffset, dbo.twksResults.CurveCorrelation, NULL AS CalibratorID, dbo.twksOrders.SampleClass, NULL AS NumberOfCalibrator,
      dbo.twksOrders.PatientID, dbo.twksOrders.SampleID, dbo.twksOrderTests.TubeType, dbo.tparTestSamples.TestLongName, dbo.tparTests.ShortName
      FROM         dbo.twksResults INNER JOIN
      dbo.twksOrderTests ON dbo.twksResults.OrderTestID = dbo.twksOrderTests.OrderTestID INNER JOIN
      dbo.tparTestSamples ON dbo.twksOrderTests.TestID = dbo.tparTestSamples.TestID AND
      dbo.twksOrderTests.SampleType = dbo.tparTestSamples.SampleType INNER JOIN
      dbo.tparTests ON dbo.tparTestSamples.TestID = dbo.tparTests.TestID INNER JOIN
      dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparTests.MeasureUnit LEFT OUTER JOIN
      dbo.twksWSRepetitionsToAdd ON dbo.twksResults.OrderTestID = dbo.twksWSRepetitionsToAdd.OrderTestID INNER JOIN
      dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID INNER JOIN
      dbo.tparControls ON dbo.twksOrderTests.ControlID = dbo.tparControls.ControlID INNER JOIN
      dbo.tparTestControls ON dbo.twksOrderTests.ControlID = dbo.tparTestControls.ControlID AND dbo.twksOrderTests.TestID = dbo.tparTestControls.TestID AND
      dbo.twksOrderTests.SampleType = dbo.tparTestControls.SampleType
      WHERE     (dbo.twksOrderTests.TestType = 'STD') AND (dbo.twksOrders.SampleClass = 'CTRL') AND (dbo.twksOrderTests.TestType = dbo.tparTestControls.TestType)
      UNION
      SELECT     dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
      dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
      dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
      dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
      dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
      dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
      dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
      dbo.twksResults.TS_DateTime, dbo.twksResults.WorkSessionID, dbo.twksResults.AnalyzerID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL
      AS CalibratorLotNumber, dbo.twksOrderTests.SampleType, NULL AS TheoricalConcentration, dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, NULL
      AS FactorLowerLimit, NULL AS FactorUpperLimit, tparISETestSamples.Decimals AS DecimalsAllowed, dbo.tparControls.ControlName,
      dbo.tparControls.LotNumber AS ControlLotNumber, dbo.tparTestControls.MinConcentration, dbo.tparTestControls.MaxConcentration, dbo.twksOrderTests.TestType,
      dbo.twksResults.Collapsed, dbo.tparISETests.Name, dbo.twksOrderTests.OrderTestStatus, dbo.twksWSRepetitionsToAdd.PostDilutionType,
      dbo.twksOrderTests.TestID, dbo.tparISETestSamples.ActiveRangeType, dbo.twksOrderTests.OrderID, dbo.twksResults.ManualResult,
      dbo.twksResults.ManualResultText, dbo.twksOrders.StatFlag, '' AS CalibratorName, '' AS AnalysisMode, dbo.twksResults.CurveSlope, dbo.twksResults.CurveOffset,
      dbo.twksResults.CurveCorrelation, NULL AS CalibratorID, dbo.twksOrders.SampleClass, NULL AS NumberOfCalibrator, dbo.twksOrders.PatientID,
      dbo.twksOrders.SampleID, dbo.twksOrderTests.TubeType, NULL AS TestLongName, dbo.tparISETests.ShortName
      FROM         dbo.twksResults INNER JOIN
      dbo.twksOrderTests ON dbo.twksResults.OrderTestID = dbo.twksOrderTests.OrderTestID INNER JOIN
      dbo.tparISETestSamples ON dbo.twksOrderTests.TestID = dbo.tparISETestSamples.ISETestID AND
      dbo.twksOrderTests.SampleType = dbo.tparISETestSamples.SampleType INNER JOIN
      dbo.tparISETests ON dbo.tparISETestSamples.ISETestID = dbo.tparISETests.ISETestID INNER JOIN
      dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparISETests.Units LEFT OUTER JOIN
      dbo.twksWSRepetitionsToAdd ON dbo.twksResults.OrderTestID = dbo.twksWSRepetitionsToAdd.OrderTestID INNER JOIN
      dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID INNER JOIN
      dbo.tparControls ON dbo.twksOrderTests.ControlID = dbo.tparControls.ControlID INNER JOIN
      dbo.tparTestControls ON dbo.twksOrderTests.ControlID = dbo.tparTestControls.ControlID AND dbo.twksOrderTests.TestID = dbo.tparTestControls.TestID AND
      dbo.twksOrderTests.SampleType = dbo.tparTestControls.SampleType
      WHERE     (dbo.twksOrderTests.TestType = 'ISE') AND (dbo.twksOrders.SampleClass = 'CTRL') AND (dbo.twksOrderTests.TestType = dbo.tparTestControls.TestType)

      GO


      IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksResultsNotCTRL]'))
      DROP VIEW [dbo].[vwksResultsNotCTRL]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vwksResultsNotCTRL]
      AS
      SELECT     dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
      dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
      dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
      dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
      dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
      dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
      dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
      dbo.twksResults.TS_DateTime, dbo.twksResults.WorkSessionID, dbo.twksResults.AnalyzerID, dbo.tparTestSamples.BlankAbsorbanceLimit,
      dbo.tparTests.KineticBlankLimit, dbo.tparCalibrators.LotNumber AS CalibratorLotNumber, dbo.twksOrderTests.SampleType,
      ISNULL(ISNULL(tparTestCalibratorValues_1.TheoricalConcentration,
      (SELECT     TOP (1) dbo.tparTestCalibratorValues.TheoricalConcentration
      FROM          dbo.tparTestCalibrators INNER JOIN
      dbo.tparTestCalibratorValues ON dbo.tparTestCalibrators.TestCalibratorID = dbo.tparTestCalibratorValues.TestCalibratorID
      WHERE      (dbo.tparTestCalibrators.TestID = dbo.tparTestSamples.TestID) AND
      (dbo.tparTestCalibrators.SampleType = dbo.tparTestSamples.SampleTypeAlternative))), 0) AS TheoricalConcentration,
      dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, dbo.tparTestSamples.FactorLowerLimit, dbo.tparTestSamples.FactorUpperLimit, dbo.tparTests.DecimalsAllowed,
      CONVERT(NVARCHAR(16), NULL) AS ControlName, CONVERT(NVARCHAR(16), NULL) AS ControlLotNumber, NULL AS MinConcentration, NULL AS MaxConcentration,
      dbo.twksOrderTests.TestType, dbo.twksResults.Collapsed, dbo.tparTests.TestName, dbo.twksOrderTests.OrderTestStatus,
      dbo.twksWSRepetitionsToAdd.PostDilutionType, dbo.twksOrderTests.TestID, dbo.tparTestSamples.ActiveRangeType, dbo.twksOrderTests.OrderID,
      dbo.twksResults.ManualResult, dbo.twksResults.ManualResultText, dbo.twksOrders.StatFlag, dbo.tparCalibrators.CalibratorName,
      dbo.tfmwMultiLanguageResources.ResourceText AS AnalysisMode, dbo.twksResults.CurveSlope, dbo.twksResults.CurveOffset, dbo.twksResults.CurveCorrelation,
      dbo.tparCalibrators.CalibratorID, dbo.twksOrders.SampleClass, dbo.tparCalibrators.NumberOfCalibrators, dbo.twksOrders.PatientID, dbo.twksOrders.SampleID,
      dbo.twksOrderTests.TubeType, dbo.tparTestSamples.TestLongName, dbo.tparTests.ShortName
      FROM         dbo.tparTestCalibratorValues AS tparTestCalibratorValues_1 RIGHT OUTER JOIN
      dbo.twksResults INNER JOIN
      dbo.twksOrderTests ON dbo.twksResults.OrderTestID = dbo.twksOrderTests.OrderTestID INNER JOIN
      dbo.tparTestSamples ON dbo.twksOrderTests.TestID = dbo.tparTestSamples.TestID AND
      dbo.twksOrderTests.SampleType = dbo.tparTestSamples.SampleType INNER JOIN
      dbo.twksWSOrderTests ON dbo.twksWSOrderTests.OrderTestID = dbo.twksResults.OrderTestID INNER JOIN
      dbo.tparTests ON dbo.tparTestSamples.TestID = dbo.tparTests.TestID INNER JOIN
      dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparTests.MeasureUnit LEFT OUTER JOIN
      dbo.tparTestCalibrators AS tparTestCalibrators_1 ON dbo.tparTestSamples.TestID = tparTestCalibrators_1.TestID AND
      dbo.tparTestSamples.SampleType = tparTestCalibrators_1.SampleType LEFT OUTER JOIN
      dbo.tparCalibrators ON tparTestCalibrators_1.CalibratorID = dbo.tparCalibrators.CalibratorID ON
      tparTestCalibratorValues_1.TestCalibratorID = tparTestCalibrators_1.TestCalibratorID LEFT OUTER JOIN
      dbo.twksWSRepetitionsToAdd ON dbo.twksResults.OrderTestID = dbo.twksWSRepetitionsToAdd.OrderTestID INNER JOIN
      dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID LEFT OUTER JOIN
      dbo.tfmwPreloadedMasterData ON dbo.tparTests.AnalysisMode = dbo.tfmwPreloadedMasterData.ItemID AND
      dbo.tfmwPreloadedMasterData.SubTableID = 'ANALYSIS_MODES' LEFT OUTER JOIN
      dbo.tcfgUserSettings ON dbo.tcfgUserSettings.SettingID = 'CURRENT_LANGUAGE' LEFT OUTER JOIN
      dbo.tfmwMultiLanguageResources ON dbo.tfmwPreloadedMasterData.ResourceID = dbo.tfmwMultiLanguageResources.ResourceID AND
      dbo.tfmwMultiLanguageResources.LanguageID = dbo.tcfgUserSettings.CurrentValue
      WHERE     (dbo.twksOrderTests.TestType = 'STD') AND (dbo.twksOrders.SampleClass != 'CTRL')

      GO


      IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksCalcResults]'))
      DROP VIEW [dbo].[vwksCalcResults]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vwksCalcResults]
      AS
      SELECT dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
      dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
      dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
      dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
      dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
      dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
      dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
      dbo.twksResults.TS_DateTime, dbo.tparCalculatedTests.CalcTestLongName AS TestName, dbo.twksOrderTests.SampleType,
      dbo.tparCalculatedTests.Decimals AS DecimalsAllowed, dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, dbo.twksOrderTests.AnalyzerID,
      dbo.twksOrderTests.TestType, 0 AS TheoricalConcentration, dbo.twksOrderCalculatedTests.OrderTestID AS STDOrderTestID, dbo.twksOrderTests.TestID,
      dbo.tparCalculatedTests.ActiveRangeType, dbo.twksOrderTests.OrderID, dbo.twksWSOrderTests.WorkSessionID, dbo.twksOrders.StatFlag,
      dbo.twksOrders.SampleClass, dbo.twksResults.Collapsed, ISNULL(dbo.twksOrders.PatientID, dbo.twksOrders.SampleID) AS PatientID, dbo.tparCalculatedTests.CalcTestName AS ShortName
      FROM   dbo.twksResults INNER JOIN dbo.twksOrderCalculatedTests ON dbo.twksResults.OrderTestID = dbo.twksOrderCalculatedTests.CalcOrderTestID
      INNER JOIN dbo.twksOrderTests ON dbo.twksOrderCalculatedTests.CalcOrderTestID = dbo.twksOrderTests.OrderTestID
      INNER JOIN dbo.tparCalculatedTests ON dbo.twksOrderTests.TestID = dbo.tparCalculatedTests.CalcTestID
      INNER JOIN dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparCalculatedTests.MeasureUnit
      INNER JOIN dbo.twksWSOrderTests ON dbo.twksOrderTests.OrderTestID = dbo.twksWSOrderTests.OrderTestID
      INNER JOIN dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID;

      GO


      IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksWSISEOffSystemResults]'))
      DROP VIEW [dbo].[vwksWSISEOffSystemResults]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vwksWSISEOffSystemResults]
      AS
      SELECT     PartialWSEResult.OrderTestID, PartialWSEResult.RerunNumber, PartialWSEResult.MultiPointNumber, PartialWSEResult.ValidationStatus,
      PartialWSEResult.AcceptedResultFlag, PartialWSEResult.TestVersion, PartialWSEResult.ManualResultFlag, PartialWSEResult.UserComment,
      PartialWSEResult.ExportStatus, PartialWSEResult.ExportDateTime, PartialWSEResult.Printed, PartialWSEResult.ABSValue, PartialWSEResult.ABS_Error,
      PartialWSEResult.SubstrateDepletion, PartialWSEResult.ABS_Initial, PartialWSEResult.ABS_MainFilter, PartialWSEResult.ABS_WorkReagent,
      PartialWSEResult.CalibratorFactor, PartialWSEResult.CalibrationError, PartialWSEResult.CalibratorBlankAbsUsed, PartialWSEResult.CurveResultsID,
      PartialWSEResult.CurveGrowthType, PartialWSEResult.CurveType, PartialWSEResult.CurveAxisXType, PartialWSEResult.CurveAxisYType,
      PartialWSEResult.RelativeErrorCurve, PartialWSEResult.CONC_VALUE, PartialWSEResult.ManualResultText, PartialWSEResult.CONC_Error,
      PartialWSEResult.ResultDateTime, PartialWSEResult.TS_User, PartialWSEResult.TS_DateTime, PartialWSEResult.SampleType, PartialWSEResult.AnalyzerID,
      PartialWSEResult.TestType, PartialWSEResult.TestID, PartialWSEResult.OrderID, PartialWSEResult.TheoricalConcentration, PartialWSEResult.ControlNum,
      PartialWSEResult.WorkSessionID, PartialWSEResult.StatFlag, PartialWSEResult.SampleClass, PartialWSEResult.OrderTestStatus,
      (CASE PartialWSEResult.TestType WHEN 'ISE' THEN IT.Name ELSE OST.Name END) AS TestName,
      (CASE PartialWSEResult.TestType WHEN 'ISE' THEN
      (SELECT     cfg.FixedItemDesc
      FROM          tcfgMasterData cfg
      WHERE      cfg.SubTableID = 'TEST_UNITS' AND cfg.ItemID = IT.Units) ELSE
      (SELECT     cfg.FixedItemDesc
      FROM          tcfgMasterData cfg
      WHERE      cfg.SubTableID = 'TEST_UNITS' AND cfg.ItemID = OST.Units) END) AS MeasureUnit,
      (CASE PartialWSEResult.TestType WHEN 'ISE' THEN ITS.Decimals ELSE OST.Decimals END) AS DecimalsAllowed,
      (CASE PartialWSEResult.TestType WHEN 'ISE' THEN ITS.ActiveRangeType ELSE OSTS.ActiveRangeType END) AS ActiveRangeType,
      PartialWSEResult.Collapsed,
      PartialWSEResult.PatientName,
      PartialWSEResult.PatientID,
      (CASE PartialWSEResult.TestType WHEN 'ISE' THEN IT.ShortName ELSE OST.ShortName END) AS ShortName
      FROM         (SELECT     R.OrderTestID, R.RerunNumber, R.MultiPointNumber, R.ValidationStatus, R.AcceptedResultFlag, R.TestVersion, R.ManualResultFlag, R.UserComment,
      R.ExportStatus, R.ExportDateTime, R.Printed, R.ABSValue, R.ABS_Error, R.SubstrateDepletion, R.ABS_Initial, R.ABS_MainFilter, R.ABS_WorkReagent,
      R.CalibratorFactor, R.CalibrationError, R.CalibratorBlankAbsUsed, R.CurveResultsID, R.CurveGrowthType, R.CurveType, R.CurveAxisXType,
      R.CurveAxisYType, R.RelativeErrorCurve, (CASE OT.TestType WHEN 'ISE' THEN R.CONC_Value ELSE R.ManualResult END) AS CONC_VALUE,
      R.ManualResultText, R.CONC_Error, R.ResultDateTime, R.TS_User, R.TS_DateTime, R.Collapsed, OT.SampleType, OT.AnalyzerID, OT.TestType,
      OT.TestID, OT.OrderID, OT.OrderTestStatus, 0 AS TheoricalConcentration, 0 AS ControlNum, WSOT.WorkSessionID, O.StatFlag, O.SampleClass,
      (CASE WHEN O.PatientID IS NOT NULL THEN P.FirstName + ' ' + P.LastName ELSE O.SampleID END) AS PatientName, ISNULL(O.PatientID, O.SampleID)
      AS PatientID
      FROM          dbo.twksResults AS R INNER JOIN
      dbo.twksOrderTests AS OT ON R.OrderTestID = OT.OrderTestID INNER JOIN
      dbo.twksWSOrderTests AS WSOT ON OT.OrderTestID = WSOT.OrderTestID INNER JOIN
      dbo.twksOrders AS O ON OT.OrderID = O.OrderID LEFT OUTER JOIN
      dbo.tparPatients AS P ON O.PatientID = P.PatientID
      WHERE      (O.SampleClass = 'PATIENT') AND (OT.TestType = 'ISE') OR
      (OT.TestType = 'OFFS')) AS PartialWSEResult LEFT OUTER JOIN
      dbo.tparISETests AS IT ON PartialWSEResult.TestID = IT.ISETestID LEFT OUTER JOIN
      dbo.tparISETestSamples AS ITS ON IT.ISETestID = ITS.ISETestID AND PartialWSEResult.SampleType = ITS.SampleType LEFT OUTER JOIN
      dbo.tparOffSystemTests AS OST ON PartialWSEResult.TestID = OST.OffSystemTestID LEFT OUTER JOIN
      dbo.tparOffSystemTestSamples AS OSTS ON OST.OffSystemTestID = OSTS.OffSystemTestID AND PartialWSEResult.SampleType = OSTS.SampleType

      GO


      IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksResults]'))
      DROP VIEW [dbo].[vwksResults]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vwksResults]
      AS
      SELECT     *
      FROM         dbo.vwksResultsNotCTRL
      UNION ALL
      SELECT     *
      FROM         dbo.vwksResultsCTRL

      GO


      IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksCompleteResults]'))
      DROP VIEW [dbo].[vwksCompleteResults]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vwksCompleteResults]
      AS
      SELECT DISTINCT
      OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
      Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
      CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
      TS_DateTime, AnalyzerID, WorkSessionID, BlankAbsorbanceLimit, KineticBlankLimit, CalibratorLotNumber, SampleType, TheoricalConcentration, MeasureUnit,
      FactorLowerLimit, FactorUpperLimit, DecimalsAllowed, ControlName, ControlLotNumber, MinConcentration, MaxConcentration, TestType, Collapsed, TestName,
      OrderTestStatus, PostDilutionType, TestID, ActiveRangeType, OrderID, ManualResult, ManualResultText, StatFlag, CalibratorName, AnalysisMode, CurveSlope,
      CurveOffset, CurveCorrelation, CalibratorID, SampleClass, NumberOfCalibrators, NULL AS STDOrderTestID, NULL AS PatientName, ISNULL(PatientID, SampleID)
      AS PatientID, NULL AS ControlNum, TestLongName, ShortName
      FROM         dbo.vwksResults
      UNION ALL
      SELECT DISTINCT
      OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
      Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
      CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
      TS_DateTime, AnalyzerID, WorkSessionID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL AS CalibratorLotNumber, SampleType,
      TheoricalConcentration, MeasureUnit, NULL AS FactorLowerLimit, NULL AS FactorUpperLimit, DecimalsAllowed, NULL AS ControlName, NULL
      AS ControlLotNumber, NULL AS MinConcentration, NULL AS MaxConcentration, TestType, Collapsed, TestName, NULL AS OrderTestStatus, NULL AS PostDilutionType,
      TestID, ActiveRangeType, OrderID, NULL AS ManualResult, NULL AS ManualResultText, StatFlag, NULL AS CalibratorName, NULL AS AnalysisMode, NULL
      AS CurveSlope, NULL AS CurveOffset, NULL AS CurveCorrelation, NULL AS CalibratorID, SampleClass, NULL AS NumberOfCalibrators, STDOrderTestID, NULL
      AS PatientName, PatientID, NULL AS ControlNum, NULL AS TestLongName, ShortName
      FROM         dbo.vwksCalcResults
      UNION ALL
      SELECT DISTINCT
      OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
      Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
      CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
      TS_DateTime, AnalyzerID, WorkSessionID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL AS CalibratorLotNumber, SampleType,
      TheoricalConcentration, MeasureUnit, NULL AS FactorLowerLimit, NULL AS FactorUpperLimit, DecimalsAllowed, NULL AS ControlName, NULL
      AS ControlLotNumber, NULL AS MinConcentration, NULL AS MaxConcentration, TestType, Collapsed, TestName, OrderTestStatus, NULL AS PostDilutionType, TestID,
      ActiveRangeType, OrderID, NULL AS ManualResult, ManualResultText, StatFlag, NULL AS CalibratorName, NULL AS AnalysisMode, NULL AS CurveSlope, NULL
      AS CurveOffset, NULL AS CurveCorrelation, NULL AS CalibratorID, SampleClass, NULL AS NumberOfCalibrators, NULL AS STDOrderTestID, PatientName, PatientID,
      ControlNum, NULL AS TestLongName, ShortName
      FROM         vwksWSISEOffSystemResults;

      GO

      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSResults' AND sc.name = 'ManualResultText' AND sc.xtype = 231) = 0)
      BEGIN
      ALTER TABLE [Ax00].[dbo].thisWSResults ALTER COLUMN ManualResultText NVARCHAR(15) COLLATE Modern_Spanish_CI_AS NULL
      END

      GO

      IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksWSISEOffSystemResults]'))
      DROP VIEW [dbo].[vwksWSISEOffSystemResults]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vwksWSISEOffSystemResults]
      AS
      SELECT     PartialWSEResult.OrderTestID, PartialWSEResult.RerunNumber, PartialWSEResult.MultiPointNumber, PartialWSEResult.ValidationStatus,
      PartialWSEResult.AcceptedResultFlag, PartialWSEResult.TestVersion, PartialWSEResult.ManualResultFlag, PartialWSEResult.UserComment,
      PartialWSEResult.ExportStatus, PartialWSEResult.ExportDateTime, PartialWSEResult.Printed, PartialWSEResult.ABSValue, PartialWSEResult.ABS_Error,
      PartialWSEResult.SubstrateDepletion, PartialWSEResult.ABS_Initial, PartialWSEResult.ABS_MainFilter, PartialWSEResult.ABS_WorkReagent,
      PartialWSEResult.CalibratorFactor, PartialWSEResult.CalibrationError, PartialWSEResult.CalibratorBlankAbsUsed, PartialWSEResult.CurveResultsID,
      PartialWSEResult.CurveGrowthType, PartialWSEResult.CurveType, PartialWSEResult.CurveAxisXType, PartialWSEResult.CurveAxisYType,
      PartialWSEResult.RelativeErrorCurve, PartialWSEResult.CONC_VALUE, PartialWSEResult.ManualResultText, PartialWSEResult.CONC_Error,
      PartialWSEResult.ResultDateTime, PartialWSEResult.TS_User, PartialWSEResult.TS_DateTime, PartialWSEResult.SampleType, PartialWSEResult.AnalyzerID,
      PartialWSEResult.TestType, PartialWSEResult.TestID, PartialWSEResult.OrderID, PartialWSEResult.TheoricalConcentration, PartialWSEResult.ControlNum,
      PartialWSEResult.WorkSessionID, PartialWSEResult.StatFlag, PartialWSEResult.SampleClass, PartialWSEResult.OrderTestStatus,
      (CASE PartialWSEResult.TestType WHEN 'ISE' THEN IT.Name ELSE OST.Name END) AS TestName, (CASE PartialWSEResult.TestType WHEN 'ISE' THEN
      (SELECT     cfg.FixedItemDesc
      FROM          tcfgMasterData cfg
      WHERE      cfg.SubTableID = 'TEST_UNITS' AND cfg.ItemID = IT.Units) ELSE
      (SELECT     cfg.FixedItemDesc
      FROM          tcfgMasterData cfg
      WHERE      cfg.SubTableID = 'TEST_UNITS' AND cfg.ItemID = OST.Units) END) AS MeasureUnit,
      (CASE PartialWSEResult.TestType WHEN 'ISE' THEN ITS.Decimals ELSE OST.Decimals END) AS DecimalsAllowed,
      (CASE PartialWSEResult.TestType WHEN 'ISE' THEN ITS.ActiveRangeType ELSE OSTS.ActiveRangeType END) AS ActiveRangeType, PartialWSEResult.Collapsed,
      PartialWSEResult.PatientName, PartialWSEResult.PatientID, (CASE PartialWSEResult.TestType WHEN 'ISE' THEN IT.ShortName ELSE OST.ShortName END)
      AS ShortName, (CASE PartialWSEResult.TestType WHEN 'ISE' THEN ITS.TestLongName ELSE OST.Name END) AS TestLongName
      FROM         (SELECT     R.OrderTestID, R.RerunNumber, R.MultiPointNumber, R.ValidationStatus, R.AcceptedResultFlag, R.TestVersion, R.ManualResultFlag, R.UserComment,
      R.ExportStatus, R.ExportDateTime, R.Printed, R.ABSValue, R.ABS_Error, R.SubstrateDepletion, R.ABS_Initial, R.ABS_MainFilter, R.ABS_WorkReagent,
      R.CalibratorFactor, R.CalibrationError, R.CalibratorBlankAbsUsed, R.CurveResultsID, R.CurveGrowthType, R.CurveType, R.CurveAxisXType,
      R.CurveAxisYType, R.RelativeErrorCurve, (CASE OT.TestType WHEN 'ISE' THEN R.CONC_Value ELSE R.ManualResult END) AS CONC_VALUE,
      R.ManualResultText, R.CONC_Error, R.ResultDateTime, R.TS_User, R.TS_DateTime, R.Collapsed, OT.SampleType, OT.AnalyzerID, OT.TestType,
      OT.TestID, OT.OrderID, OT.OrderTestStatus, 0 AS TheoricalConcentration, 0 AS ControlNum, WSOT.WorkSessionID, O.StatFlag, O.SampleClass,
      (CASE WHEN O.PatientID IS NOT NULL THEN P.FirstName + ' ' + P.LastName ELSE O.SampleID END) AS PatientName, ISNULL(O.PatientID, O.SampleID)
      AS PatientID
      FROM          dbo.twksResults AS R INNER JOIN
      dbo.twksOrderTests AS OT ON R.OrderTestID = OT.OrderTestID INNER JOIN
      dbo.twksWSOrderTests AS WSOT ON OT.OrderTestID = WSOT.OrderTestID INNER JOIN
      dbo.twksOrders AS O ON OT.OrderID = O.OrderID LEFT OUTER JOIN
      dbo.tparPatients AS P ON O.PatientID = P.PatientID
      WHERE      (O.SampleClass = 'PATIENT') AND (OT.TestType = 'ISE') OR
      (OT.TestType = 'OFFS')) AS PartialWSEResult LEFT OUTER JOIN
      dbo.tparISETests AS IT ON PartialWSEResult.TestID = IT.ISETestID LEFT OUTER JOIN
      dbo.tparISETestSamples AS ITS ON IT.ISETestID = ITS.ISETestID AND PartialWSEResult.SampleType = ITS.SampleType LEFT OUTER JOIN
      dbo.tparOffSystemTests AS OST ON PartialWSEResult.TestID = OST.OffSystemTestID LEFT OUTER JOIN
      dbo.tparOffSystemTestSamples AS OSTS ON OST.OffSystemTestID = OSTS.OffSystemTestID AND PartialWSEResult.SampleType = OSTS.SampleType

      GO

      IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksCompleteResults]'))
      DROP VIEW [dbo].[vwksCompleteResults]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vwksCompleteResults]
      AS
      SELECT DISTINCT
      OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
      Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
      CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
      TS_DateTime, AnalyzerID, WorkSessionID, BlankAbsorbanceLimit, KineticBlankLimit, CalibratorLotNumber, SampleType, TheoricalConcentration, MeasureUnit,
      FactorLowerLimit, FactorUpperLimit, DecimalsAllowed, ControlName, ControlLotNumber, MinConcentration, MaxConcentration, TestType, Collapsed, TestName,
      OrderTestStatus, PostDilutionType, TestID, ActiveRangeType, OrderID, ManualResult, ManualResultText, StatFlag, CalibratorName, AnalysisMode, CurveSlope,
      CurveOffset, CurveCorrelation, CalibratorID, SampleClass, NumberOfCalibrators, NULL AS STDOrderTestID, NULL AS PatientName, ISNULL(PatientID, SampleID)
      AS PatientID, NULL AS ControlNum, TestLongName, ShortName
      FROM         dbo.vwksResults
      UNION ALL
      SELECT DISTINCT
      OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
      Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
      CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
      TS_DateTime, AnalyzerID, WorkSessionID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL AS CalibratorLotNumber, SampleType,
      TheoricalConcentration, MeasureUnit, NULL AS FactorLowerLimit, NULL AS FactorUpperLimit, DecimalsAllowed, NULL AS ControlName, NULL
      AS ControlLotNumber, NULL AS MinConcentration, NULL AS MaxConcentration, TestType, Collapsed, TestName, NULL AS OrderTestStatus, NULL AS PostDilutionType,
      TestID, ActiveRangeType, OrderID, NULL AS ManualResult, NULL AS ManualResultText, StatFlag, NULL AS CalibratorName, NULL AS AnalysisMode, NULL
      AS CurveSlope, NULL AS CurveOffset, NULL AS CurveCorrelation, NULL AS CalibratorID, SampleClass, NULL AS NumberOfCalibrators, STDOrderTestID, NULL
      AS PatientName, PatientID, NULL AS ControlNum, NULL AS TestLongName, ShortName
      FROM         dbo.vwksCalcResults
      UNION ALL
      SELECT DISTINCT
      OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
      Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
      CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
      TS_DateTime, AnalyzerID, WorkSessionID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL AS CalibratorLotNumber, SampleType,
      TheoricalConcentration, MeasureUnit, NULL AS FactorLowerLimit, NULL AS FactorUpperLimit, DecimalsAllowed, NULL AS ControlName, NULL
      AS ControlLotNumber, NULL AS MinConcentration, NULL AS MaxConcentration, TestType, Collapsed, TestName, OrderTestStatus, NULL AS PostDilutionType, TestID,
      ActiveRangeType, OrderID, NULL AS ManualResult, ManualResultText, StatFlag, NULL AS CalibratorName, NULL AS AnalysisMode, NULL AS CurveSlope, NULL
      AS CurveOffset, NULL AS CurveCorrelation, NULL AS CalibratorID, SampleClass, NULL AS NumberOfCalibrators, NULL AS STDOrderTestID, PatientName, PatientID,
      ControlNum, TestLongName, ShortName
      FROM         vwksWSISEOffSystemResults;
      GO


      IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vhisTestSamples]'))
      DROP VIEW [dbo].[vhisTestSamples]
      GO
      USE [Ax00]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vhisTestSamples]
      AS
      SELECT     'STD' AS TestType, TS .HistTestID, TS .TestID, TS .TestName, TS .TestVersionNumber, TS .DecimalsAllowed, NULL AS FormulaText,
      (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, TS .TestLongName, Ts.CalibPointUsed
      FROM         thisTestSamples TS LEFT OUTER JOIN
      vcfgTestSortingForReports T ON TS .TestName = T .TestName AND T .TestType = 'STD'
      UNION
      SELECT     'ISE' AS TestType, TS .HistISETestID AS HistTestID, TS .ISETestID AS TestID, TS .ISETestName AS TestName, 0 AS TestVersionNumber, TS .DecimalsAllowed, NULL
      AS FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, TS.TestLongName, NULL CalibPointUsed
      FROM         thisISETestSamples TS LEFT OUTER JOIN
      vcfgTestSortingForReports T ON TS .ISETestName = T .TestName AND T .TestType = 'ISE'
      UNION
      SELECT     'CALC' AS TestType, TS .HistCalcTestID AS HistTestID, TS .CalcTestID AS TestID, TS .CalcTestLongName AS TestName, 0 AS TestVersionNumber,
      TS .DecimalsAllowed, TS .FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, NULL
      AS TestLongName, NULL CalibPointUsed
      FROM         thisCalculatedTests TS LEFT OUTER JOIN
      vcfgTestSortingForReports T ON TS .CalcTestLongName = T .TestName AND T .TestType = 'CALC'
      UNION
      SELECT     'OFFS' AS TestType, TS .HistOffSystemTestID AS HistTestID, TS .OffSystemTestID AS TestID, TS .OffSystemTestName AS TestName, 0 AS TestVersionNumber,
      TS .DecimalsAllowed, NULL AS FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, NULL
      AS TestLongName, NULL CalibPointUsed
      FROM         thisOffSystemTestSamples TS LEFT OUTER JOIN
      vcfgTestSortingForReports T ON TS .OffSystemTestName = T .TestName AND T .TestType = 'OFFS'
      GO


      IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vhisWSBlankCalibResults]'))
      DROP VIEW [dbo].[vhisWSBlankCalibResults]
      GO
      USE [Ax00]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vhisWSBlankCalibResults]
      AS
      SELECT DISTINCT
      hres.HistOrderTestID, hres.AnalyzerID, hres.ResultDateTime, hres.ABSValue, hres.ABSWorkReagent, hres.KineticBlankLimit, hres.ABSInitial, hres.ABSMainFilter,
      hres.BlankAbsorbanceLimit, hres.AlarmList, hres.CalibratorFactor, hres.FactorLowerLimit, hres.FactorUpperLimit, hot.SampleClass, hot.SampleType, hts.TestName,
      tcfg.FixedItemDesc AS MeasureUnit, hca.CalibratorName, hca.LotNumber, hca.NumberOfCalibrators, htc.TheoreticalConcentration, hres.MultiPointNumber,
      hres.WorkSessionID, hts.CalibPointUsed, hts.DecimalsAllowed, hres.RemarkAlert, htc.TestVersionNumber, hot.TestType, hts.TestID, hts.TestPosition, hts.TestLongName
      FROM         dbo.thisWSResults AS hres
      INNER JOIN dbo.thisWSOrderTests AS hot ON hres.HistOrderTestID = hot.HistOrderTestID AND hres.AnalyzerID = hot.AnalyzerID AND hres.WorkSessionID = hot.WorkSessionID
      --INNER JOIN dbo.thisTestSamples AS hts ON hot.HistTestID = hts.HistTestID AND hot.TestVersionNumber = hts.TestVersionNumber AND hot.SampleType = hts.SampleType
      INNER JOIN dbo.vhisTestSamples AS hts ON hot.HistTestID = hts.HistTestID AND hot.TestType = hts.TestType AND hts.TestVersionNumber = COALESCE (hot.TestVersionNumber, 0)
      LEFT OUTER JOIN dbo.thisCalibrators AS hca ON hot.HistCalibratorID = hca.HistCalibratorID
      LEFT OUTER JOIN dbo.thisTestCalibratorsValues AS htc ON hot.HistCalibratorID = htc.HistCalibratorID AND hot.SampleType = htc.SampleType AND hot.TestVersionNumber = htc.TestVersionNumber AND hot.HistTestID = htc.HistTestID AND hres.MultiPointNumber = htc.CalibratorNum
      LEFT OUTER JOIN dbo.tcfgMasterData AS tcfg ON tcfg.SubTableID = 'TEST_UNITS' AND tcfg.ItemID = hot.MeasureUnit
      WHERE     (hot.SampleClass &lt;&gt; 'PATIENT')
        GO

        IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE  so.xtype = 'U' AND so.name = 'tqcResults' AND sc.name = 'CtrlsSendingGroup' AND sc.xtype = 48) = 1)
        ALTER TABLE dbo.tqcResults ALTER COLUMN CtrlsSendingGroup INT NULL
        GO
        IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE  so.xtype = 'U' AND so.name = 'twksWSOrderTests' AND sc.name = 'CtrlsSendingGroup' AND sc.xtype = 48) = 1)
        ALTER TABLE dbo.twksWSOrderTests ALTER COLUMN CtrlsSendingGroup INT NULL
        GO
        IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE  so.xtype = 'U' AND so.name = 'tqcResults' AND sc.name = 'SampleClass') = 1)
        ALTER TABLE dbo.tqcResults DROP COLUMN SampleClass
        GO

        --|====================|
        --| BA400: v3.11       |
        --|====================|

        IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparOffSystemTests' AND sc.name = 'PreloadedOffSystemTest') = 0
        BEGIN
        ALTER TABLE [dbo].tparOffSystemTests ADD PreloadedOffSystemTest bit NOT NULL
        CONSTRAINT PreloadedOffSystemTest_Default DEFAULT 0;
        END
        GO

        IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparOffSystemTests' AND sc.name = 'BiosystemsID') = 0
        BEGIN
        ALTER TABLE [dbo].tparOffSystemTests ADD BiosystemsID int NULL
        END
        GO

        IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksOperateCalculatedTest]'))
        DROP VIEW [dbo].[vwksOperateCalculatedTest]
        GO
        USE [Ax00]
        GO
        SET ANSI_NULLS ON
        GO
        SET QUOTED_IDENTIFIER ON
        GO
        CREATE VIEW [dbo].[vwksOperateCalculatedTest]
        AS
        SELECT     dbo.twksOrderTests.OrderTestID, (CASE dbo.twksOrderTests.TestType WHEN 'OFFS' THEN dbo.twksResults.ManualResult ELSE dbo.twksResults.CONC_Value END)
        AS Result, dbo.twksOrderTests.TestID, dbo.twksOrderTests.SampleType, dbo.twksOrderTests.TestType
        FROM         dbo.twksOrderTests INNER JOIN
        dbo.twksResults ON dbo.twksOrderTests.OrderTestID = dbo.twksResults.OrderTestID
        WHERE     (dbo.twksResults.AcceptedResultFlag = 1) AND (dbo.twksResults.CONC_Error IS NULL)
        GO

        USE [Ax00]
        GO
        IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'V' AND name = 'vhisWSBlankCalibResults') = 1)
        DROP VIEW [dbo].[vhisWSBlankCalibResults]
        GO
        SET ANSI_NULLS ON
        GO
        SET QUOTED_IDENTIFIER ON
        GO
        CREATE VIEW [dbo].[vhisWSBlankCalibResults]	AS
        SELECT DISTINCT hres.HistOrderTestID, hres.AnalyzerID, hres.ResultDateTime, hres.ABSValue, hres.ABSWorkReagent, hres.KineticBlankLimit, hres.ABSInitial, hres.ABSMainFilter,
        hres.BlankAbsorbanceLimit, hres.AlarmList, hres.FactorLowerLimit, hres.FactorUpperLimit, hot.SampleClass, hot.SampleType, hts.TestName,
        tcfg.FixedItemDesc AS MeasureUnit, hca.CalibratorName, hca.LotNumber, hca.NumberOfCalibrators, htc.TheoreticalConcentration, hres.MultiPointNumber,
        hres.WorkSessionID, hts.CalibPointUsed, hts.DecimalsAllowed, hres.RemarkAlert, htc.TestVersionNumber, hot.TestType, hts.TestID, hts.TestPosition,
        hts.TestLongName, hres.ManualResultFlag, (CASE WHEN hres.ManualResultFlag = 1 THEN hres.ManualResult ELSE hres.CalibratorFactor END) AS CalibratorFactor
        FROM            dbo.thisWSResults AS hres INNER JOIN dbo.thisWSOrderTests AS hot ON hres.HistOrderTestID = hot.HistOrderTestID AND hres.AnalyzerID = hot.AnalyzerID
        AND hres.WorkSessionID = hot.WorkSessionID
        INNER JOIN dbo.vhisTestSamples AS hts ON hot.HistTestID = hts.HistTestID AND hot.TestType = hts.TestType
        AND hts.TestVersionNumber = COALESCE (hot.TestVersionNumber, 0)
        LEFT OUTER JOIN dbo.thisCalibrators AS hca ON hot.HistCalibratorID = hca.HistCalibratorID
        LEFT OUTER JOIN dbo.thisTestCalibratorsValues AS htc ON hot.HistCalibratorID = htc.HistCalibratorID
        AND hot.SampleType = htc.SampleType
        AND hot.TestVersionNumber = htc.TestVersionNumber
        AND hot.HistTestID = htc.HistTestID
        AND hres.MultiPointNumber = htc.CalibratorNum
        LEFT OUTER JOIN dbo.tcfgMasterData AS tcfg ON tcfg.SubTableID = 'TEST_UNITS' AND tcfg.ItemID = hot.MeasureUnit
        WHERE     		  hot.SampleClass &lt;&gt; 'PATIENT'

    </StructureScript>
    <UpdateScript>
      --|====================|
      --| BA400: v3.10       |
      --|====================|

      UPDATE dbo.tfmwVersions SET UserSoftware = '3.0.6', ServiceSoftware = '1.2.4', FirmwareScripts = '1.1.0', Firmware = '0.20'

      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'u' AND name = 'tfmwScreens') = 1)
      BEGIN
      IF ((SELECT COUNT(*) FROM dbo.tfmwScreens WHERE ScreenID = 'HIS001') = 0)
      INSERT INTO dbo.tfmwScreens (ScreenID, Name, Module, ScreenHelpChapter)
      VALUES ('HIS001', 'Historic Patient Results', 'History', NULL)

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'u' AND name = 'tcfgGridColsConfiguration') = 1)
      BEGIN
      IF ((SELECT COUNT(*) FROM dbo.tcfgGridColsConfiguration WHERE ScreenID = 'HIS001' AND GridName = 'historyGridView' AND ColumnName = 'ResultDateTime') = 0)
      INSERT INTO dbo.tcfgGridColsConfiguration (ScreenID, GridName, ColumnName, DefaultWidth, SavedWidth, TS_User, TS_DateTime)
      VALUES ('HIS001', 'historyGridView', 'ResultDateTime', 100, 100, 'BIOSYSTEMS', GETDATE())

      IF ((SELECT COUNT(*) FROM dbo.tcfgGridColsConfiguration WHERE ScreenID = 'HIS001' AND GridName = 'historyGridView' AND ColumnName = 'SpecimenID') = 0)
      INSERT INTO dbo.tcfgGridColsConfiguration (ScreenID, GridName, ColumnName, DefaultWidth, SavedWidth, TS_User, TS_DateTime)
      VALUES ('HIS001', 'historyGridView', 'SpecimenID', 95, 95, 'BIOSYSTEMS', GETDATE())

      IF ((SELECT COUNT(*) FROM dbo.tcfgGridColsConfiguration WHERE ScreenID = 'HIS001' AND GridName = 'historyGridView' AND ColumnName = 'PatientID') = 0)
      INSERT INTO dbo.tcfgGridColsConfiguration (ScreenID, GridName, ColumnName, DefaultWidth, SavedWidth, TS_User, TS_DateTime)
      VALUES ('HIS001', 'historyGridView', 'PatientID', 95, 95, 'BIOSYSTEMS', GETDATE())

      IF ((SELECT COUNT(*) FROM dbo.tcfgGridColsConfiguration WHERE ScreenID = 'HIS001' AND GridName = 'historyGridView' AND ColumnName = 'LastName') = 0)
      INSERT INTO dbo.tcfgGridColsConfiguration (ScreenID, GridName, ColumnName, DefaultWidth, SavedWidth, TS_User, TS_DateTime)
      VALUES ('HIS001', 'historyGridView', 'LastName', 95, 95, 'BIOSYSTEMS', GETDATE())

      IF ((SELECT COUNT(*) FROM dbo.tcfgGridColsConfiguration WHERE ScreenID = 'HIS001' AND GridName = 'historyGridView' AND ColumnName = 'FirstName') = 0)
      INSERT INTO dbo.tcfgGridColsConfiguration (ScreenID, GridName, ColumnName, DefaultWidth, SavedWidth, TS_User, TS_DateTime)
      VALUES ('HIS001', 'historyGridView', 'FirstName', 95, 95, 'BIOSYSTEMS', GETDATE())

      IF ((SELECT COUNT(*) FROM dbo.tcfgGridColsConfiguration WHERE ScreenID = 'HIS001' AND GridName = 'historyGridView' AND ColumnName = 'StatFlagImage') = 0)
      INSERT INTO dbo.tcfgGridColsConfiguration (ScreenID, GridName, ColumnName, DefaultWidth, SavedWidth, TS_User, TS_DateTime)
      VALUES ('HIS001', 'historyGridView', 'StatFlagImage', 16, 16, 'BIOSYSTEMS', GETDATE())

      IF ((SELECT COUNT(*) FROM dbo.tcfgGridColsConfiguration WHERE ScreenID = 'HIS001' AND GridName = 'historyGridView' AND ColumnName = 'SampleType') = 0)
      INSERT INTO dbo.tcfgGridColsConfiguration (ScreenID, GridName, ColumnName, DefaultWidth, SavedWidth, TS_User, TS_DateTime)
      VALUES ('HIS001', 'historyGridView', 'SampleType', 35, 35, 'BIOSYSTEMS', GETDATE())

      IF ((SELECT COUNT(*) FROM dbo.tcfgGridColsConfiguration WHERE ScreenID = 'HIS001' AND GridName = 'historyGridView' AND ColumnName = 'TestName') = 0)
      INSERT INTO dbo.tcfgGridColsConfiguration (ScreenID, GridName, ColumnName, DefaultWidth, SavedWidth, TS_User, TS_DateTime)
      VALUES ('HIS001', 'historyGridView', 'TestName', 100, 100, 'BIOSYSTEMS', GETDATE())

      IF ((SELECT COUNT(*) FROM dbo.tcfgGridColsConfiguration WHERE ScreenID = 'HIS001' AND GridName = 'historyGridView' AND ColumnName = 'RemarkAlert') = 0)
      INSERT INTO dbo.tcfgGridColsConfiguration (ScreenID, GridName, ColumnName, DefaultWidth, SavedWidth, TS_User, TS_DateTime)
      VALUES ('HIS001', 'historyGridView', 'RemarkAlert', 10, 10, 'BIOSYSTEMS', GETDATE())

      IF ((SELECT COUNT(*) FROM dbo.tcfgGridColsConfiguration WHERE ScreenID = 'HIS001' AND GridName = 'historyGridView' AND ColumnName = 'CONCValueString') = 0)
      INSERT INTO dbo.tcfgGridColsConfiguration (ScreenID, GridName, ColumnName, DefaultWidth, SavedWidth, TS_User, TS_DateTime)
      VALUES ('HIS001', 'historyGridView', 'CONCValueString', 42, 42, 'BIOSYSTEMS', GETDATE())

      IF ((SELECT COUNT(*) FROM dbo.tcfgGridColsConfiguration WHERE ScreenID = 'HIS001' AND GridName = 'historyGridView' AND ColumnName = 'MeasureUnit') = 0)
      INSERT INTO dbo.tcfgGridColsConfiguration (ScreenID, GridName, ColumnName, DefaultWidth, SavedWidth, TS_User, TS_DateTime)
      VALUES ('HIS001', 'historyGridView', 'MeasureUnit', 42, 42, 'BIOSYSTEMS', GETDATE())

      IF ((SELECT COUNT(*) FROM dbo.tcfgGridColsConfiguration WHERE ScreenID = 'HIS001' AND GridName = 'historyGridView' AND ColumnName = 'RefRange') = 0)
      INSERT INTO dbo.tcfgGridColsConfiguration (ScreenID, GridName, ColumnName, DefaultWidth, SavedWidth, TS_User, TS_DateTime)
      VALUES ('HIS001', 'historyGridView', 'RefRange', 75, 75, 'BIOSYSTEMS', GETDATE())

      IF ((SELECT COUNT(*) FROM dbo.tcfgGridColsConfiguration WHERE ScreenID = 'HIS001' AND GridName = 'historyGridView' AND ColumnName = 'ExportImage') = 0)
      INSERT INTO dbo.tcfgGridColsConfiguration (ScreenID, GridName, ColumnName, DefaultWidth, SavedWidth, TS_User, TS_DateTime)
      VALUES ('HIS001', 'historyGridView', 'ExportImage', 16, 16, 'BIOSYSTEMS', GETDATE())

      IF ((SELECT COUNT(*) FROM dbo.tcfgGridColsConfiguration WHERE ScreenID = 'HIS001' AND GridName = 'historyGridView' AND ColumnName = 'Remarks') = 0)
      INSERT INTO dbo.tcfgGridColsConfiguration (ScreenID, GridName, ColumnName, DefaultWidth, SavedWidth, TS_User, TS_DateTime)
      VALUES ('HIS001', 'historyGridView', 'Remarks', 250, 250, 'BIOSYSTEMS', GETDATE())

      IF ((SELECT COUNT(*) FROM dbo.tcfgGridColsConfiguration WHERE ScreenID = 'HIS001' AND GridName = 'historyGridView' AND ColumnName = 'AdditionalInfo') = 0)
      INSERT INTO dbo.tcfgGridColsConfiguration (ScreenID, GridName, ColumnName, DefaultWidth, SavedWidth, TS_User, TS_DateTime)
      VALUES ('HIS001', 'historyGridView', 'AdditionalInfo', 150, 150, 'BIOSYSTEMS', GETDATE())

      IF ((SELECT COUNT(*) FROM dbo.tcfgGridColsConfiguration WHERE ScreenID = 'HIS001' AND GridName = 'historyGridView' AND ColumnName = 'AnalyzerID') = 0)
      INSERT INTO dbo.tcfgGridColsConfiguration (ScreenID, GridName, ColumnName, DefaultWidth, SavedWidth, TS_User, TS_DateTime)
      VALUES ('HIS001', 'historyGridView', 'AnalyzerID', 120, 120, 'BIOSYSTEMS', GETDATE())
      END
      END
      GO

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparTests' AND sc.name = 'CustomPosition') = 1
      BEGIN
      UPDATE [Ax00].[dbo].tparTests SET CustomPosition = TestPosition
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparCalculatedTests' AND sc.name = 'CustomPosition') = 1
      BEGIN
      UPDATE [Ax00].[dbo].tparCalculatedTests SET CustomPosition = CalcTestID
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparISETests' AND sc.name = 'CustomPosition') = 1
      BEGIN
      UPDATE [Ax00].[dbo].tparISETests SET CustomPosition = ISETestID
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparOffSystemTests' AND sc.name = 'CustomPosition') = 1
      BEGIN
      UPDATE [Ax00].[dbo].tparOffSystemTests SET CustomPosition = OffSystemTestID
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparTestProfiles' AND sc.name = 'CustomPosition') = 1
      BEGIN
      UPDATE [Ax00].[dbo].tparTestProfiles SET CustomPosition = TestProfilePosition
      END
      GO

      IF ((SELECT COUNT(*) FROM tfmwMessages WHERE MessageID = 'MAX_RESULTS_FOR_LISEXPORT') = 0)
      BEGIN
      INSERT INTO tfmwMessages (MessageID, MessageType, ResourceID)
      VALUES ('MAX_RESULTS_FOR_LISEXPORT', 'Information', 'MSG_MAX_RESULTS_FOR_LISEXPORT')
      END
      GO
      IF ((SELECT COUNT(*) FROM tfmwMessages WHERE MessageID = 'RESULTS_CANNOT_BE_SENT') = 0)
      BEGIN
      INSERT INTO tfmwMessages (MessageID, MessageType, ResourceID)
      VALUES ('RESULTS_CANNOT_BE_SENT', 'Information', 'MSG_RESULTS_CANNOT_BE_SENT')
      END
      GO

      IF ((SELECT COUNT(*) FROM srv_tadjPreliminaryHomes WHERE AdjustmentGroupID = 'PHOTOMETRY' AND RequiredHomeID = 'REACTIONS_ROTOR_HOME_WELL1') > 0)
      BEGIN
      UPDATE srv_tadjPreliminaryHomes SET RequiredHomeID = 'REACTIONS_HOME_ROTOR' WHERE AdjustmentGroupID = 'PHOTOMETRY' AND RequiredHomeID = 'REACTIONS_ROTOR_HOME_WELL1'
      END
      GO

      IF ((SELECT COUNT(*) FROM tfmwSWParameters WHERE ParameterName = 'MAX_QCRESULTS_TO_ACCUMULATE') = 0)
      BEGIN

      SET IDENTITY_INSERT tfmwSWParameters ON
      DECLARE @maxParamID INT = (SELECT MAX(ParameterID)+1 FROM tfmwSwParameters)

      INSERT INTO tfmwSWParameters (ParameterID, ParameterName, DependByModel, ValueNumeric, Description)
      VALUES (@maxParamID, 'MAX_QCRESULTS_TO_ACCUMULATE', 0, 300, 'Maximum number of non-cumulated QC Results allowed')
      SET IDENTITY_INSERT tfmwSWParameters OFF

      DELETE FROM tfmwGeneralSettings WHERE SettingID = 'MAX_QCRESULTS_TO_ACCUMULATE'
      END
      GO

      UPDATE [Ax00].[dbo].tparTests SET TestVersionNumber = 0 WHERE TestVersionNumber > 0
      GO

      --|====================|
      --| BA400: v3.11       |
      --|====================|

      UPDATE dbo.tfmwVersions SET UserSoftware = '3.0.6', ServiceSoftware = '1.2.4', FirmwareScripts = '1.3.0', Firmware = '0.20', DBSoftware = '3.06'

      GO
      IF ((SELECT COUNT(*) FROM dbo.tfmwFieldLimits WHERE LimitID = 'REAGENT2_VOLUME' AND AnalyzerModel = 'A400' AND MinValue = 10) = 0)
      UPDATE dbo.tfmwFieldLimits SET MinValue = 10 WHERE LimitID = 'REAGENT2_VOLUME' AND AnalyzerModel = 'A400'
      GO
      IF ((SELECT COUNT(*) FROM dbo.tfmwFieldLimits WHERE LimitID = 'PREPARATION_VOLUME' AND AnalyzerModel = 'A400' AND MinValue = 180) = 0)
      UPDATE dbo.tfmwFieldLimits SET MinValue = 180 WHERE LimitID = 'PREPARATION_VOLUME' AND AnalyzerModel = 'A400'
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwAlarms') = 1)
      BEGIN
      INSERT INTO tfmwAlarms (AlarmID, AlarmSource, AlarmType, Name, NameResourceID, Description, DescResourceID, Solution, SolResourceID, Sound, OnRunningSound, Freeze, OKType, LISValue)
      VALUES('COMMS_TIMEOUT_ERR', 'INS', 'ERROR', 'Timeout communications with Analyzer', 'COMMS_TIMEOUT_ERR', 'Analyzer doesn''t respond', 'ALM_COMMS_TIMEOUT_ERR', 'Try to perform the same action again', 'SOL_COMMS_TIMEOUT_ERR', 0, 0, NULL, 1, NULL)
      END
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwAlarms') = 1)
      BEGIN
      INSERT INTO tfmwAlarms (AlarmID, AlarmSource, AlarmType, Name, NameResourceID, Description, DescResourceID, Solution, SolResourceID, Sound, OnRunningSound, Freeze, OKType, LISValue)
      VALUES('ISE_CALB_PDT_WARN', 'CAL', 'WARNING', 'Electrodes calibration not performed/expired', 'ISE_CALB_PDT_WARN', 'Electrodes calibration recommended', 'ALM_ISE_CALB_PDT_WARN', 'Enter ISE utilities screen and perform required ISE actions', 'SOL_ISE_CONNECT_PDT', 0, 0, NULL, 1, NULL)
      INSERT INTO tfmwAlarms (AlarmID, AlarmSource, AlarmType, Name, NameResourceID, Description, DescResourceID, Solution, SolResourceID, Sound, OnRunningSound, Freeze, OKType, LISValue)
      VALUES('ISE_PUMP_PDT_WARN', 'CAL', 'WARNING', 'Pumps calibration not performed/expired', 'ISE_PUMP_PDT_WARN', 'Pumps calibration recommended', 'ALM_ISE_PUMP_PDT_WARN', 'Enter ISE utilities screen and perform required ISE actions', 'SOL_ISE_CONNECT_PDT', 0, 0, NULL, 1, NULL)
      INSERT INTO tfmwAlarms (AlarmID, AlarmSource, AlarmType, Name, NameResourceID, Description, DescResourceID, Solution, SolResourceID, Sound, OnRunningSound, Freeze, OKType, LISValue)
      VALUES('ISE_CLEAN_PDT_WARN', 'CAL', 'WARNING', 'Clean not performed/expired', 'ISE_CLEAN_PDT_WARN', 'Clean recommended', 'ALM_ISE_CLEAN_PDT_WARN', 'Enter ISE utilities screen and perform required ISE actions', 'SOL_ISE_CONNECT_PDT', 0, 0, NULL, 1, NULL)
      END
      GO
    </UpdateScript>
  </AppVersion>
  <AppVersion>
    <Version>3.07</Version>
    <StructureScript>
      ALTER TABLE [tcfgAnalyzers] ALTER COLUMN [FirmwareVersion] varchar(10)
    </StructureScript>

    <UpdateScript>
      --|====================|
      --| BA200: v3.07     	 |
      --|====================|

      -- BA-2396 ERR560
      IF((SELECT COUNT(*) FROM dbo.tfmwAlarms WHERE AlarmID LIKE 'GLF_BOARD_FBLD_ERR') = 0)
      BEGIN
      INSERT INTO dbo.tfmwAlarms ([AlarmID],[AlarmSource],[AlarmType],[Name],[NameResourceID],[Description],[DescResourceID],[Solution],[SolResourceID],[Sound],[OnRunningSound],[Freeze],[OKType],[LISValue])
      VALUES ('GLF_BOARD_FBLD_ERR','INS','ERROR','Photometric board error during FBLD','GLF_BOARD_ERR','Photometric board does not respond','ALM_GLF_BOARD_ERR','Switch off the analyzer and the application, wait 30 seconds and then switch them on both again. Then press the Connect button','SOL_RECOVER_ERR',0,0,'RESET',1,0)
      END
      GO
      IF((SELECT COUNT(*) FROM dbo.tfmwAlarmErrorCodes WHERE AlarmID LIKE 'GLF_BOARD_FBLD_ERR') = 0)
      BEGIN
      INSERT INTO dbo.tfmwAlarmErrorCodes (AlarmID, ErrorCode, ManagementID)
      VALUES ('GLF_BOARD_FBLD_ERR',560,'3_RECOVER_ERROR')
      END
      GO

      -- BA-2358 ERR551

      IF((SELECT COUNT(*) FROM dbo.tfmwAlarms WHERE AlarmID LIKE 'FBLD_ROTOR_FULL') = 0)
      BEGIN
      INSERT INTO dbo.tfmwAlarms ([AlarmID],[AlarmSource],[AlarmType],[Name],[NameResourceID],[Description],[DescResourceID],[Solution],[SolResourceID],[Sound],[OnRunningSound],[Freeze],[OKType],[LISValue])
      VALUES ('FBLD_ROTOR_FULL','INS','REMARK','Photometric Rotor full','FBLD_ROTOR_FULL','Photometric Rotor is full','ALM_FBLD_ROTOR_FULL',NULL,NULL,0,0,NULL,0,0)
      END
      GO
      IF((SELECT COUNT(*) FROM dbo.tfmwAlarmErrorCodes WHERE AlarmID LIKE 'FBLD_ROTOR_FULL') = 0)
      BEGIN
      INSERT INTO dbo.tfmwAlarmErrorCodes (AlarmID, ErrorCode, ManagementID)
      VALUES ('FBLD_ROTOR_FULL',551,'6_OMMIT_ERROR')
      END
      GO

      -- BA-2358 ERR552

      IF((SELECT COUNT(*) FROM dbo.tfmwAlarms WHERE AlarmID LIKE 'UNKNOW_ROTOR_FULL') = 0)
      BEGIN
      INSERT INTO dbo.tfmwAlarms ([AlarmID],[AlarmSource],[AlarmType],[Name],[NameResourceID],[Description],[DescResourceID],[Solution],[SolResourceID],[Sound],[OnRunningSound],[Freeze],[OKType],[LISValue])
      VALUES ('UNKNOW_ROTOR_FULL','INS','REMARK','Unknow Photometric rotor state','UNKNOW_ROTOR_FULL','Photometric Rotor has some wells full','ALM_UNKNOW_ROTOR_FULL',NULL,NULL,0,0,NULL,0,0)
      END
      GO
      IF((SELECT COUNT(*) FROM dbo.tfmwAlarmErrorCodes WHERE AlarmID LIKE 'UNKNOW_ROTOR_FULL') = 0)
      BEGIN
      INSERT INTO dbo.tfmwAlarmErrorCodes (AlarmID, ErrorCode, ManagementID)
      VALUES ('UNKNOW_ROTOR_FULL',552,'2_FATAL_ERROR')
      END
      GO

      -- BA-2358
      IF((SELECT COUNT(*) FROM dbo.tfmwGeneralSettings WHERE SettingID LIKE 'FLIGHT_FULL_ROTOR_CADUCITY') = 0)
      BEGIN
      INSERT INTO dbo.tfmwGeneralSettings (SettingID, FixedItemDesc, CurrentValue, Status)
      VALUES ('FLIGHT_FULL_ROTOR_CADUCITY','Minutes that a full clean rotor is considered good to be read in a FLIGHT operation','30', 1)
      END
      GO

      -- BA-2406
      IF((SELECT COUNT(*) FROM dbo.tfmwSwFlags WHERE FlagID LIKE 'Barcode') = 0)
      BEGIN
      INSERT INTO [Ax00].[dbo].[tfmwSwFlags] VALUES ('Barcode', 'INI, END, CANCELED or NULL')
      END
      GO

    </UpdateScript>
  </AppVersion>
</TaskListDS>