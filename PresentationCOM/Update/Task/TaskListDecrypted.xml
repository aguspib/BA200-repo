<?xml version="1.0"?>
<DatabaseUpdatesManager xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Releases>
    <Release Version="02.00.00">
      <CommonRevisions>
        <CommonRevision SequenceNumber="0" JiraID="BA-2469">
          <PrerequisiteScript />
          <IntegrityScript />
          <StructureScript>
            IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Ax00].[dbo].[ApplicationSetting]') AND type in (N'U'))
            DROP TABLE [Ax00].[dbo].[ApplicationSetting]
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparCalculatedTests' AND sc.name = 'BiosystemsID') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].[tparCalculatedTests] ADD [BiosystemsID] int NULL
            END
            GO
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'twksXMLMessages') = 0)
            BEGIN
            SET ANSI_NULLS ON
            SET QUOTED_IDENTIFIER ON

            SET ANSI_PADDING ON
            CREATE TABLE [Ax00].[dbo].[twksXMLMessages]([MessageID] [varchar] (40) NOT NULL,
            [XMLMessage] [xml] NOT NULL,
            [Status] [varchar](15) NOT NULL,

            CONSTRAINT [PK_twksXMLMessages] PRIMARY KEY CLUSTERED([MessageID] ASC)
            WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            ) ON [PRIMARY]
            SET ANSI_PADDING OFF
            END
            GO
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksOrderTests' AND sc.name = 'LISRequest') = 0)
            ALTER TABLE Ax00.dbo.twksOrderTests ADD LISRequest BIT DEFAULT ((0))
            GO
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksWSExecutions' AND sc.name = 'LockedByLIS') = 0)
            ALTER TABLE Ax00.dbo.twksWSExecutions ADD LockedByLIS BIT DEFAULT ((0))
            GO
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksOrderTests' AND sc.name = 'ExternalQC') = 0)
            ALTER TABLE dbo.twksOrderTests ADD ExternalQC BIT DEFAULT ((0))
            GO

            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparTests' AND sc.name = 'LISValue') = 0
            BEGIN
            ALTER TABLE [dbo].[tparTests] ADD [LISValue] nvarchar(50) NULL
            END
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparISETests' AND sc.name = 'LISValue') = 0
            BEGIN
            ALTER TABLE [dbo].[tparISETests] ADD [LISValue] nvarchar(50) NULL
            END
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparCalculatedTests' AND sc.name = 'LISValue') = 0
            BEGIN
            ALTER TABLE [dbo].[tparCalculatedTests] ADD [LISValue] nvarchar(50) NULL
            END
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparOffSystemTests' AND sc.name = 'LISValue') = 0
            BEGIN
            ALTER TABLE [dbo].[tparOffSystemTests] ADD [LISValue] nvarchar(50) NULL
            END
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tcfgMasterData' AND sc.name = 'LISValue') = 0
            BEGIN
            ALTER TABLE [dbo].[tcfgMasterData] ADD [LISValue] nvarchar(50) NULL
            END
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tparSavedWSOrderTests') = 1)
            BEGIN
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'PatientIDType') = 0)
            ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [PatientIDType] [varchar] (15) NULL
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'AwosID') = 0)
            ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [AwosID] [varchar] (40) NULL
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'SpecimenID') = 0)
            ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [SpecimenID] [nvarchar] (30) NULL
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'ESOrderID') = 0)
            ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [ESOrderID] [nvarchar] (40) NULL
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'LISOrderID') = 0)
            ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [LISOrderID] [nvarchar] (50) NULL
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'ESPatientID') = 0)
            ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [ESPatientID] [nvarchar] (40) NULL
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'LISPatientID') = 0)
            ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [LISPatientID]  [nvarchar] (50) NULL
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'CalcTestIDs') = 0)
            ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [CalcTestIDs]  [varchar] (25) NULL
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'CalcTestNames') = 0)
            ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [CalcTestNames]  [nvarchar] (50) NULL
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'ExternalQC') = 0)
            ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [ExternalQC] [bit] NULL
            END

            GO
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'twksWSBarcodePositionsWithNoRequests') = 1)
            BEGIN
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
            WHERE so.xtype = 'U' AND so.name = 'twksWSBarcodePositionsWithNoRequests' AND sc.name = 'LISStatus') = 0)
            BEGIN
            ALTER TABLE [Ax00].[dbo].twksWSBarcodePositionsWithNoRequests ADD LISStatus  [varchar] (15) NULL
            END

            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
            WHERE so.xtype = 'U' AND so.name = 'twksWSBarcodePositionsWithNoRequests' AND sc.name = 'BarcodeInfo') = 0)
            BEGIN
            ALTER TABLE [Ax00].[dbo].twksWSBarcodePositionsWithNoRequests ADD BarcodeInfo  [nvarchar](30) NULL
            END

            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
            WHERE so.xtype = 'U' AND so.name = 'twksWSBarcodePositionsWithNoRequests' AND sc.name = 'MessageID') = 0)
            BEGIN
            ALTER TABLE [Ax00].[dbo].twksWSBarcodePositionsWithNoRequests ADD MessageID [varchar](40) NULL
            END

            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
            WHERE so.xtype = 'U' AND so.name = 'twksWSBarcodePositionsWithNoRequests' AND sc.name = 'ExternalPID') = 1)
            BEGIN
            ALTER TABLE [Ax00].[dbo].twksWSBarcodePositionsWithNoRequests ALTER COLUMN ExternalPID [nvarchar] (30) NULL
            END
            END
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tparSavedWS') = 1)
            BEGIN
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
            WHERE so.xtype = 'U' AND so.name = 'tparSavedWS' AND sc.name = 'SavedWSName') = 1)
            ALTER TABLE [Ax00].[dbo].tparSavedWS ALTER COLUMN [SavedWSName] [nvarchar] (40) NULL
            END
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tparSavedWSOrderTests') = 1)
            BEGIN
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
            WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'CreationOrder') = 1)
            BEGIN
            ALTER TABLE [Ax00].[dbo].[tparSavedWSOrderTests] ALTER COLUMN CreationOrder int NULL
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'D' AND name = 'DF_tparSavedWSOrderTests_CreationOrder') = 0)
            ALTER TABLE [Ax00].[dbo].[tparSavedWSOrderTests] ADD  CONSTRAINT [DF_tparSavedWSOrderTests_CreationOrder]  DEFAULT ((1)) FOR [CreationOrder]
            END
            END
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'twksOrderTestsLISInfo') = 0)
            BEGIN
            SET ANSI_NULLS ON
            SET QUOTED_IDENTIFIER ON

            SET ANSI_PADDING ON
            CREATE TABLE [dbo].[twksOrderTestsLISInfo](
            [OrderTestID]    [int]           NOT NULL,
            [RerunNumber]	  [tinyint]		     NOT NULL,
            [AwosID]         [varchar]  (40) NOT NULL,
            [SpecimenID]     [nvarchar] (30) NOT NULL,
            [ESOrderID]      [nvarchar] (40) NOT NULL,
            [LISOrderID]     [nvarchar] (50) NULL,
            [ESPatientID]    [nvarchar] (40) NOT NULL,
            [LISPatientID]   [nvarchar] (30) NULL,

            CONSTRAINT [PK_twksOrderTestsLISInfo] PRIMARY KEY CLUSTERED([OrderTestID], [RerunNumber] ASC)
            WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            ) ON [PRIMARY]
            SET ANSI_PADDING OFF

            ALTER TABLE [dbo].[twksOrderTestsLISInfo]  WITH CHECK ADD  CONSTRAINT [OrderTestsID_FK] FOREIGN KEY([OrderTestID])
            REFERENCES  [dbo].[twksOrderTests] ([OrderTestID])
            END

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'twksXMLMessages') = 1)
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksXMLMessages' AND sc.name = 'TS_DateTime') = 0)
            ALTER TABLE [dbo].[twksXMLMessages] ADD [TS_DateTime] [datetime] NOT NULL
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'twksResults') = 1)
            BEGIN
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksResults' AND sc.name = 'LISMessageID') = 0)
            ALTER TABLE [dbo].[twksResults] ADD [LISMessageID] [varchar] (40) NULL
            END
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vparAllTestsByType') = 1)
            DROP VIEW [dbo].[vparAllTestsByType]
            GO

            SET ANSI_NULLS ON
            GO

            SET QUOTED_IDENTIFIER ON
            GO

            CREATE VIEW [dbo].[vparAllTestsByType] AS
            SELECT     'STD' AS TestType, TestID AS TestID, ShortName AS TestShortName, TestName AS TestName, LISValue, InUse, 1 As UniqueSampleType
            FROM         [dbo].tparTests
            UNION
            SELECT     'ISE' AS TestType, ISETestID AS TestID, ShortName AS TestShortName, [Name] AS TestName, LISValue, InUse, 1 As UniqueSampleType
            FROM         [dbo].tparISETests
            UNION
            SELECT     'CALC' AS TestType, CalcTestID AS TestID, CalcTestName AS TestShortName, CalcTestLongName AS TestName, LISValue, InUse, UniqueSampleType
            FROM         [dbo].tparCalculatedTests
            UNION
            SELECT     'OFFS' AS TestType, OffSystemTestID AS TestID, ShortName AS TestShortName, [Name] AS TestName, LISValue, InUse, 1 As UniqueSampleType
            FROM         [dbo].tparOffSystemTests
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vcfgLISMappings') = 1)
            DROP VIEW [dbo].[vcfgLISMappings]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vcfgLISMappings') = 1)
            DROP VIEW [dbo].[vcfgLISMappings]
            GO

            SET ANSI_NULLS ON
            GO

            SET QUOTED_IDENTIFIER ON
            GO

            CREATE VIEW [dbo].[vcfgLISMappings] AS
            SELECT MD.SubtableId AS ValueType, MD.ItemID AS ValueID, NULL AS LanguageID, MD.fixedItemDesc AS LongName, MD.LISValue
            FROM         [dbo].[tcfgMasterData] AS MD
            WHERE     MD.SubTableID = 'TEST_UNITS' AND MD.ItemID != 'BLANK'
            UNION
            SELECT     MD.SubtableId AS ValueType, MD.ItemID AS ValueID, MR.LanguageID AS LanguageID, MR.ResourceText AS LongName, MD.LISValue
            FROM         [dbo].[tcfgMasterData] AS MD INNER JOIN
            [dbo].tfmwMultiLanguageResources MR ON MD.ResourceID = MR.ResourceID
            WHERE     MD.SubTableID = 'SAMPLE_TYPES' AND MD.fixedItemDesc != 'Empty'
            UNION
            SELECT     MD.SubtableId AS ValueType, MD.ItemID AS ValueID,
            (SELECT     CurrentValue
            FROM          tcfgUserSettings
            WHERE      SettingID = 'CURRENT_LANGUAGE') AS LanguageID, MD.FixedItemDesc AS LongName, MD.LISValue
            FROM         [dbo].[tcfgMasterData] AS MD
            WHERE     MD.SubTableID = 'SAMPLE_TYPES' AND MD.fixedItemDesc != 'Empty' AND MD.MultiLanguageFlag = 0
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'twksWSRequiredElements') = 1)
            BEGIN
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksWSRequiredElements' AND sc.name = 'SpecimenIDList') = 0)
            ALTER TABLE [dbo].[twksWSRequiredElements] ADD [SpecimenIDList] [nvarchar] (100) NULL
            END
            GO
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'thisWSResults') = 1)
            BEGIN
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSResults' AND sc.name = 'LISMessageID') = 0)
            ALTER TABLE [dbo].[thisWSResults] ADD [LISMessageID] [varchar] (40) NULL
            END
            GO
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'thisWSOrderTests') = 1)
            BEGIN
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'LISRequest') = 0)
            ALTER TABLE [dbo].[thisWSOrderTests] ADD [LISRequest] [bit] NULL

            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'ExternalQC') = 0)
            ALTER TABLE [dbo].[thisWSOrderTests] ADD [ExternalQC] [bit] NULL

            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'SpecimenID') = 0)
            ALTER TABLE [dbo].[thisWSOrderTests] ADD [SpecimenID] [nvarchar] (30) NULL

            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'AwosID') = 0)
            ALTER TABLE [dbo].[thisWSOrderTests] ADD [AwosID] [varchar] (40) NULL

            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'ESOrderID') = 0)
            ALTER TABLE [dbo].[thisWSOrderTests] ADD [ESOrderID] [nvarchar] (40) NULL

            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'ESPatientID') = 0)
            ALTER TABLE [dbo].[thisWSOrderTests] ADD [ESPatientID] [nvarchar] (40) NULL

            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'LISOrderID') = 0)
            ALTER TABLE [dbo].[thisWSOrderTests] ADD [LISOrderID] [nvarchar] (50) NULL

            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'LISPatientID') = 0)
            ALTER TABLE [dbo].[thisWSOrderTests] ADD [LISPatientID] [nvarchar] (50) NULL

            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'LISTestName') = 0)
            ALTER TABLE [dbo].[thisWSOrderTests] ADD [LISTestName] [nvarchar] (50) NULL

            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'LISSampleType') = 0)
            ALTER TABLE [dbo].[thisWSOrderTests] ADD [LISSampleType] [nvarchar] (50) NULL

            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'LISUnits') = 0)
            ALTER TABLE [dbo].[thisWSOrderTests] ADD [LISUnits] [nvarchar] (50) NULL
            END
            GO
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vhisWSResults') = 1)
            DROP VIEW [dbo].[vhisWSResults]
            GO

            SET ANSI_NULLS ON
            GO

            SET QUOTED_IDENTIFIER ON
            GO

            CREATE VIEW [dbo].[vhisWSResults] AS
            SELECT R.HistOrderTestID, R.AnalyzerID, R.WorkSessionID, R.ResultDateTime,
            (CASE WHEN OT.SampleClass = 'PATIENT' AND OT.SampleID IS NOT NULL THEN OT.SampleID
            WHEN OT.SampleClass = 'PATIENT' AND P.PatientID IS NOT NULL THEN P.PatientID
            ELSE NULL END) AS PatientID,
            OT.HistPatientID,
            OT.SampleClass,
            OT.StatFlag,
            OT.TestType,
            OT.SampleType,
            TS.TestID,
            TS.TestName,
            TS.TestVersionNumber,
            (CASE WHEN NOT r.RemarkAlert IS NULL THEN r.RemarkAlert
            ELSE CASE WHEN r.AlarmList IS NULL OR r.AlarmList='' THEN ''
            ELSE '*' END
            END) AS RemarkAlert,
            R.CONCValue,
            TS.DecimalsAllowed,
            MD.FixedItemDesc AS MeasureUnit,
            R.MinRefRange,
            R.MaxRefRange,
            R.ExportStatus,
            R.AlarmList,
            TS.FormulaText,
            R.MultiPointNumber,
            R.ManualResultFlag,
            R.ManualResult,
            R.ManualResultText,
            R.LISMessageID,
            OT.LISRequest,
            OT.ExternalQC,
            OT.ESOrderID,
            OT.LISOrderID,
            OT.ESPatientID,
            OT.LISPatientID,
            OT.LISTestName,
            OT.LISSampleType,
            OT.LISUnits
            FROM thisWSResults R INNER JOIN thisWSOrderTests OT ON R.HistOrderTestID = OT.HistOrderTestID
            INNER JOIN vhisTestSamples  TS ON OT.HistTestID = TS.HistTestID AND OT.TestType = TS.TestType AND TS.TestVersionNumber = COALESCE(OT.TestVersionNumber, 0)
            LEFT  JOIN tcfgMasterData   MD ON MD.SubTableID = 'TEST_UNITS' AND MD.ItemID = OT.MeasureUnit
            LEFT  JOIN thisPatients     P  ON P.HistPatientID = OT.HistPatientID
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tparSavedWSOrderTests') = 1)
            BEGIN
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'DeletedTestFlag') = 0)
            ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [DeletedTestFlag] [bit] NULL
            END
            GO
          </StructureScript>
          <DataScript />
        </CommonRevision>
      </CommonRevisions>
      <DataRevisions />
    </Release>
    <Release Version="02.01.00">
      <CommonRevisions>
        <CommonRevision SequenceNumber="0" JiraID="BA-2469">
          <PrerequisiteScript />
          <IntegrityScript />
          <StructureScript>
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'P' AND name = 'DeleteHistPatientData') = 1)
            DROP PROCEDURE DeleteHistPatientData
            GO

            CREATE PROCEDURE DeleteHistPatientData AS
            BEGIN
            DECLARE @myAnalyzerID NVARCHAR(25), @myWorkSessionID VARCHAR(10), @myHistOTID INT

            BEGIN TRANSACTION DeleteHis

            -- Search all Historic Order Tests which results have been deleted that are
            -- included in the Formula of not deleted Calculated Tests
            DECLARE calcToDEL CURSOR FOR
            SELECT AnalyzerID, WorkSessionID, HistOrderTestIDCALC FROM thisWSCalcTestsRelations
            WHERE  HistOrderTestID NOT IN (SELECT HistOrderTestID FROM thisWSResults)

            OPEN calcToDEL
            FETCH NEXT FROM calcToDEL INTO @myAnalyzerID, @myWorkSessionID, @myHistOTID
            WHILE @@FETCH_STATUS = 0
            BEGIN
            -- Delete Results for the Historic Order Test
            DELETE FROM thisWSResults
            WHERE  AnalyzerID      = @myAnalyzerID
            AND    WorkSessionID   = @myWorkSessionID
            AND    HistOrderTestID = @myHistOTID

            FETCH NEXT FROM calcToDEL INTO @myAnalyzerID, @myWorkSessionID, @myHistOTID
            END
            CLOSE calcToDEL
            DEALLOCATE calcToDEL

            -- Delete all Readings for the Historic Order Tests that have been deleted
            --DELETE FROM thisWSReadings
            --WHERE  HistOrderTestID NOT IN (SELECT HistOrderTestID FROM thisWSResults)

            -- Delete all Executions for the Historic Order Tests that have been deleted
            --DELETE FROM thisWSExecutions
            --WHERE  HistOrderTestID NOT IN (SELECT HistOrderTestID FROM thisWSResults)

            -- Delete all Adjust Base Lines for the Executions that have been deleted
            --DELETE FROM thisAdjustBaseLines
            --WHERE HistAdjustBaseLineID NOT IN (SELECT HistAdjustBaseLineID FROM thisWSExecutions)

            -- Delete all Curve Results (for Multipoint Calibrators; it works only when
            -- the stored procedure is called for automatic deletion of Calibrator results)
            DELETE FROM thisWSCurveResults
            WHERE  HistOrderTestID NOT IN (SELECT HistOrderTestID FROM thisWSResults)

            -- Delete all links with Historic Order Tests included in the Formula of
            -- Calculated Tests which results have been deleted
            DELETE FROM thisWSCalcTestsRelations
            WHERE  HistOrderTestIDCALC NOT IN (SELECT HistOrderTestID FROM thisWSResults)

            -- Delete all Historic Order Tests without results
            DELETE FROM thisWSOrderTests
            WHERE  HistOrderTestID NOT IN (SELECT HistOrderTestID FROM thisWSResults)

            -- Search all Analyzer Work Sessions without Historic Order Tests
            DECLARE emptyWS CURSOR FOR
            SELECT AnalyzerID, WorkSessionID FROM thisAnalyzerWorkSessions AW
            WHERE  (SELECT COUNT(*) FROM thisWSOrderTests OT
            WHERE  AW.AnalyzerID = OT.AnalyzerID
            AND    AW.WorkSessionID = OT.WorkSessionID) = 0

            OPEN emptyWS
            FETCH NEXT FROM emptyWS INTO @myAnalyzerID, @myWorkSessionID
            WHILE @@FETCH_STATUS = 0
            BEGIN
            -- Delete all Alarms for the Analyzer Work Session
            DELETE FROM thisWSAnalyzerAlarms
            WHERE  AnalyzerID = @myAnalyzerID
            AND    WorkSessionID = @myWorkSessionID

            -- Delete the Analyzer Work Session
            DELETE FROM thisAnalyzerWorkSessions
            WHERE  AnalyzerID = @myAnalyzerID
            AND    WorkSessionID = @myWorkSessionID

            FETCH NEXT FROM emptyWS INTO @myAnalyzerID, @myWorkSessionID
            END
            CLOSE emptyWS
            DEALLOCATE emptyWS

            COMMIT TRANSACTION DeleteHis

            -- Change the initial value for the autonumeric field HistOrderTestID in table
            -- thisWSOrderTests
            DECLARE @MaxHistOTID INT
            SELECT @MaxHistOTID = MAX(HistOrderTestID) + 1 FROM thisWSOrderTests
            DBCC CHECKIDENT ('thisWSOrderTests', RESEED, @MaxHistOTID)
            END
            GO

            IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksResultsCTRL]'))
            DROP VIEW [dbo].[vwksResultsCTRL]
            GO
            CREATE VIEW [dbo].[vwksResultsCTRL]
            AS
            SELECT     dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
            dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
            dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
            dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
            dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
            dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
            dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
            dbo.twksResults.TS_DateTime, dbo.twksResults.WorkSessionID, dbo.twksResults.AnalyzerID, dbo.tparTestSamples.BlankAbsorbanceLimit,
            dbo.tparTests.KineticBlankLimit, 'NULL' AS CalibratorLotNumber, dbo.twksOrderTests.SampleType, NULL AS TheoricalConcentration,
            dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, dbo.tparTestSamples.FactorLowerLimit, dbo.tparTestSamples.FactorUpperLimit, dbo.tparTests.DecimalsAllowed,
            dbo.tparControls.ControlName, dbo.tparControls.LotNumber AS ControlLotNumber, dbo.tparTestControls.MinConcentration, dbo.tparTestControls.MaxConcentration,
            dbo.twksOrderTests.TestType, dbo.twksResults.Collapsed, dbo.tparTests.TestName, dbo.twksOrderTests.OrderTestStatus,
            dbo.twksWSRepetitionsToAdd.PostDilutionType, dbo.twksOrderTests.TestID, dbo.tparTestSamples.ActiveRangeType, dbo.twksOrderTests.OrderID,
            dbo.twksResults.ManualResult, dbo.twksResults.ManualResultText, dbo.twksOrders.StatFlag, '' AS CalibratorName, '' AS AnalysisMode, dbo.twksResults.CurveSlope,
            dbo.twksResults.CurveOffset, dbo.twksResults.CurveCorrelation, NULL AS CalibratorID, dbo.twksOrders.SampleClass, NULL AS NumberOfCalibrator,
            dbo.twksOrders.PatientID, dbo.twksOrders.SampleID, dbo.twksOrderTests.TubeType
            FROM         dbo.twksResults INNER JOIN
            dbo.twksOrderTests ON dbo.twksResults.OrderTestID = dbo.twksOrderTests.OrderTestID INNER JOIN
            dbo.tparTestSamples ON dbo.twksOrderTests.TestID = dbo.tparTestSamples.TestID AND
            dbo.twksOrderTests.SampleType = dbo.tparTestSamples.SampleType INNER JOIN
            dbo.tparTests ON dbo.tparTestSamples.TestID = dbo.tparTests.TestID INNER JOIN
            dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparTests.MeasureUnit LEFT OUTER JOIN
            dbo.twksWSRepetitionsToAdd ON dbo.twksResults.OrderTestID = dbo.twksWSRepetitionsToAdd.OrderTestID INNER JOIN
            dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID INNER JOIN
            dbo.tparControls ON dbo.twksOrderTests.ControlID = dbo.tparControls.ControlID INNER JOIN
            dbo.tparTestControls ON dbo.twksOrderTests.ControlID = dbo.tparTestControls.ControlID AND dbo.twksOrderTests.TestID = dbo.tparTestControls.TestID AND
            dbo.twksOrderTests.SampleType = dbo.tparTestControls.SampleType
            WHERE     (dbo.twksOrderTests.TestType = 'STD') AND (dbo.twksOrders.SampleClass = 'CTRL')
            AND       (dbo.twksOrderTests.TestType = dbo.tparTestControls.TestType)
            UNION
            SELECT     dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
            dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
            dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
            dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
            dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
            dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
            dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
            dbo.twksResults.TS_DateTime, dbo.twksResults.WorkSessionID, dbo.twksResults.AnalyzerID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL
            AS CalibratorLotNumber, dbo.twksOrderTests.SampleType, NULL AS TheoricalConcentration, dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, NULL
            AS FactorLowerLimit, NULL AS FactorUpperLimit, tparISETestSamples.Decimals AS DecimalsAllowed, dbo.tparControls.ControlName,
            dbo.tparControls.LotNumber AS ControlLotNumber, dbo.tparTestControls.MinConcentration, dbo.tparTestControls.MaxConcentration, dbo.twksOrderTests.TestType,
            dbo.twksResults.Collapsed, dbo.tparISETests.Name, dbo.twksOrderTests.OrderTestStatus, dbo.twksWSRepetitionsToAdd.PostDilutionType,
            dbo.twksOrderTests.TestID, dbo.tparISETestSamples.ActiveRangeType, dbo.twksOrderTests.OrderID, dbo.twksResults.ManualResult,
            dbo.twksResults.ManualResultText, dbo.twksOrders.StatFlag, '' AS CalibratorName, '' AS AnalysisMode, dbo.twksResults.CurveSlope, dbo.twksResults.CurveOffset,
            dbo.twksResults.CurveCorrelation, NULL AS CalibratorID, dbo.twksOrders.SampleClass, NULL AS NumberOfCalibrator, dbo.twksOrders.PatientID,
            dbo.twksOrders.SampleID, dbo.twksOrderTests.TubeType
            FROM         dbo.twksResults INNER JOIN
            dbo.twksOrderTests ON dbo.twksResults.OrderTestID = dbo.twksOrderTests.OrderTestID INNER JOIN
            dbo.tparISETestSamples ON dbo.twksOrderTests.TestID = dbo.tparISETestSamples.ISETestID AND
            dbo.twksOrderTests.SampleType = dbo.tparISETestSamples.SampleType INNER JOIN
            dbo.tparISETests ON dbo.tparISETestSamples.ISETestID = dbo.tparISETests.ISETestID INNER JOIN
            dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparISETests.Units LEFT OUTER JOIN
            dbo.twksWSRepetitionsToAdd ON dbo.twksResults.OrderTestID = dbo.twksWSRepetitionsToAdd.OrderTestID INNER JOIN
            dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID INNER JOIN
            dbo.tparControls ON dbo.twksOrderTests.ControlID = dbo.tparControls.ControlID INNER JOIN
            dbo.tparTestControls ON dbo.twksOrderTests.ControlID = dbo.tparTestControls.ControlID AND dbo.twksOrderTests.TestID = dbo.tparTestControls.TestID AND
            dbo.twksOrderTests.SampleType = dbo.tparTestControls.SampleType
            WHERE     (dbo.twksOrderTests.TestType = 'ISE') AND (dbo.twksOrders.SampleClass = 'CTRL')
            AND       (dbo.twksOrderTests.TestType = dbo.tparTestControls.TestType)

            GO
          </StructureScript>
          <DataScript />
        </CommonRevision>
      </CommonRevisions>
      <DataRevisions />
    </Release>
    <Release Version="02.01.01">
      <CommonRevisions>
        <CommonRevision SequenceNumber="0" JiraID="BA-2469">
          <PrerequisiteScript />
          <IntegrityScript />
          <StructureScript>
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
            WHERE so.xtype = 'U' AND so.name = 'tparCalibrators' AND sc.name = 'ExpirationDate') &gt; 0)
            ALTER TABLE Ax00.dbo.tparCalibrators ALTER COLUMN ExpirationDate DATETIME NULL


            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vcfgTestSortingForReports') = 1)
            DROP VIEW [dbo].[vcfgTestSortingForReports]
            GO

            SET ANSI_NULLS ON
            GO

            SET QUOTED_IDENTIFIER ON
            GO

            CREATE VIEW vcfgTestSortingForReports AS
            SELECT RTS.TestType, T.TestID, T.TestName, RTS.TestPosition
            FROM   tparTests T INNER JOIN tcfgReportsTestsSorting RTS ON RTS.TestID = T.TestID AND RTS.TestType = 'STD'
            UNION
            SELECT RTS.TestType, T.ISETestID AS TestID, T.Name AS TestName, RTS.TestPosition
            FROM   tparISETests T INNER JOIN tcfgReportsTestsSorting RTS ON RTS.TestID = T.ISETestID AND RTS.TestType = 'ISE'
            UNION
            SELECT RTS.TestType, T.CalcTestID AS TestID, T.CalcTestLongName AS TestName, RTS.TestPosition
            FROM   tparCalculatedTests T INNER JOIN tcfgReportsTestsSorting RTS ON RTS.TestID = T.CalcTestID AND RTS.TestType = 'CALC'
            UNION
            SELECT RTS.TestType, T.OffSystemTestID AS TestID, T.Name AS TestName, RTS.TestPosition
            FROM   tparOffSystemTests T INNER JOIN tcfgReportsTestsSorting RTS ON RTS.TestID = T.OffSystemTestID AND RTS.TestType = 'OFFS'
            GO


            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vhisTestSamples') = 1)
            DROP VIEW [dbo].[vhisTestSamples]
            GO

            SET ANSI_NULLS ON
            GO

            SET QUOTED_IDENTIFIER ON
            GO

            CREATE VIEW vhisTestSamples AS
            SELECT 'STD' AS TestType, TS.HistTestID, TS.TestID, TS.TestName, TS.TestVersionNumber, TS.DecimalsAllowed,
            NULL AS FormulaText, (CASE WHEN T.TestPosition IS NOT NULL THEN T.TestPosition ELSE 999999999 END) AS TestPosition
            FROM   thisTestSamples TS LEFT OUTER JOIN vcfgTestSortingForReports T ON TS.TestName = T.TestName AND T.TestType = 'STD'
            UNION
            SELECT 'ISE' AS TestType, TS.HistISETestID AS HistTestID, TS.ISETestID AS TestID, TS.ISETestName AS TestName,
            0 AS TestVersionNumber, TS.DecimalsAllowed, NULL AS FormulaText,
            (CASE WHEN T.TestPosition IS NOT NULL THEN T.TestPosition ELSE 999999999 END) AS TestPosition
            FROM   thisISETestSamples TS LEFT OUTER JOIN vcfgTestSortingForReports T ON TS.ISETestName = T.TestName AND T.TestType = 'ISE'
            UNION
            SELECT 'CALC' AS TestType, TS.HistCalcTestID AS HistTestID, TS.CalcTestID AS TestID,
            TS.CalcTestLongName AS TestName, 0 AS TestVersionNumber, TS.DecimalsAllowed, TS.FormulaText,
            (CASE WHEN T.TestPosition IS NOT NULL THEN T.TestPosition ELSE 999999999 END) AS TestPosition
            FROM   thisCalculatedTests TS LEFT OUTER JOIN vcfgTestSortingForReports T ON TS.CalcTestLongName = T.TestName AND T.TestType = 'CALC'
            UNION
            SELECT 'OFFS' AS TestType, TS.HistOffSystemTestID AS HistTestID, TS.OffSystemTestID AS TestID,
            TS.OffSystemTestName AS TestName, 0 AS TestVersionNumber, TS.DecimalsAllowed, NULL AS FormulaText,
            (CASE WHEN T.TestPosition IS NOT NULL THEN T.TestPosition ELSE 999999999 END) AS TestPosition
            FROM   thisOffSystemTestSamples TS LEFT OUTER JOIN vcfgTestSortingForReports T ON TS.OffSystemTestName = T.TestName AND T.TestType = 'OFFS'
            GO


            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vhisWSResults') = 1)
            DROP VIEW [dbo].[vhisWSResults]
            GO

            SET ANSI_NULLS ON
            GO

            SET QUOTED_IDENTIFIER ON
            GO

            CREATE VIEW [dbo].[vhisWSResults] AS
            SELECT R.HistOrderTestID, R.AnalyzerID, R.WorkSessionID, R.ResultDateTime,
            (CASE WHEN OT.SampleClass = 'PATIENT' AND OT.SampleID IS NOT NULL THEN OT.SampleID
            WHEN OT.SampleClass = 'PATIENT' AND P.PatientID IS NOT NULL THEN P.PatientID
            ELSE NULL
            END) AS PatientID, OT.HistPatientID, OT.SampleClass, OT.StatFlag, OT.TestType, OT.SampleType,
            TS.TestID, TS.TestName, TS.TestVersionNumber,TS.TestPosition, R.CONCValue,
            (CASE WHEN NOT r.RemarkAlert IS NULL THEN r.RemarkAlert ELSE '' END) AS RemarkAlert,
            TS.DecimalsAllowed, MD.FixedItemDesc AS MeasureUnit,
            R.MinRefRange, R.MaxRefRange, R.ExportStatus, R.AlarmList, TS.FormulaText, R.MultiPointNumber,
            R.ManualResultFlag, R.ManualResult, R.ManualResultText, R.LISMessageID, OT.LISRequest, OT.ExternalQC,
            OT.ESOrderID, OT.LISOrderID, OT.ESPatientID, OT.LISPatientID, OT.LISTestName, OT.LISSampleType, OT.LISUnits
            FROM   dbo.thisWSResults AS R INNER JOIN dbo.thisWSOrderTests AS OT ON R.HistOrderTestID = OT.HistOrderTestID
            INNER JOIN dbo.vhisTestSamples AS TS ON OT.HistTestID = TS.histTestID
            AND OT.TestType = TS.TestType
            AND TS.TestVersionNumber = COALESCE (OT.TestVersionNumber, 0)
            LEFT OUTER JOIN dbo.tcfgMasterData AS MD ON MD.SubTableID = 'TEST_UNITS'
            AND MD.ItemID = OT.MeasureUnit
            LEFT OUTER JOIN dbo.thisPatients AS P ON P.HistPatientID = OT.HistPatientID
            GO
          </StructureScript>
          <DataScript />
        </CommonRevision>
      </CommonRevisions>
      <DataRevisions />
    </Release>
    <Release Version="03.00.00">
      <CommonRevisions>
        <CommonRevision SequenceNumber="0" JiraID="BA-2469">
          <PrerequisiteScript />
          <IntegrityScript />
          <StructureScript>
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksWSReadings' AND sc.name = 'Pause') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].[twksWSReadings] ADD [Pause] bit NOT NULL default 0
            END
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'V' AND name = 'vwksAlarmsMonitor') = 1)
            DROP VIEW [dbo].[vwksAlarmsMonitor]
            GO
            CREATE VIEW [dbo].[vwksAlarmsMonitor] AS
            SELECT AA.AlarmID, AA.AnalyzerID, AA.AlarmDateTime, AA.AlarmItem, AA.WorkSessionID, AA.AdditionalInfo, AA.AlarmStatus, A.AlarmSource,
            A.AlarmType, A.Name, A.Description, A.Solution, AA.OKDateTime,
            (CASE WHEN AA.OKDateTime IS NULL THEN NULL ELSE DateDiff(second, AA.AlarmDateTime, AA.OKDateTime) END) AS AlarmPeriodSEC
            FROM   tfmwAlarms A INNER JOIN twksWSAnalyzerAlarms AA ON A.AlarmID = AA.AlarmID
            GO
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE  so.xtype = 'U'
            AND ((so.name = 'tqcResults' AND sc.name = 'RunNumber' AND sc.xtype = 48) OR (so.name = 'tqcResultAlarms' AND sc.name = 'RunNumber' AND sc.xtype = 48))) &gt; 0)
            BEGIN
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'F' AND name = 'FK_tqcResultAlarms_tqcResults') = 1)
            ALTER TABLE dbo.tqcResultAlarms DROP CONSTRAINT [FK_tqcResultAlarms_tqcResults]
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tqcResultAlarms' AND sc.name = 'RunNumber') = 1)
            IF ((SELECT sc.xtype FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE  so.xtype = 'U'
            AND so.name = 'tqcResultAlarms' AND sc.name = 'RunNumber') &lt;&gt; 56)
            BEGIN
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tqcResultAlarms') = 1)
            ALTER TABLE dbo.tqcResultAlarms DROP CONSTRAINT [PK_tqcResultAlarms]
            ALTER TABLE dbo.tqcResultAlarms ALTER COLUMN RunNumber INT NOT NULL
            END
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tqcResults' AND sc.name = 'RunNumber') = 1)
            IF ((SELECT sc.xtype FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE  so.xtype = 'U' AND so.name = 'tqcResults' AND sc.name = 'RunNumber') &lt;&gt; 56)
            BEGIN
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tqcResults') = 1)
            ALTER TABLE dbo.tqcResults DROP CONSTRAINT [PK_tqcResults]
            ALTER TABLE dbo.tqcResults ALTER COLUMN RunNumber INT NOT NULL
            END
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tqcResultAlarms') = 0)
            ALTER TABLE dbo.tqcResultAlarms ADD CONSTRAINT [PK_tqcResultAlarms] PRIMARY KEY CLUSTERED (QCTestSampleID ASC, QCControlLotID ASC, AnalyzerID ASC, RunsGroupNumber ASC, RunNumber ASC, AlarmID ASC)
            WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tqcResults') = 0)
            ALTER TABLE dbo.tqcResults ADD CONSTRAINT [PK_tqcResults] PRIMARY KEY CLUSTERED (QCTestSampleID ASC, QCControlLotID ASC, AnalyzerID ASC, RunsGroupNumber ASC, RunNumber ASC)
            WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'F' AND name = 'FK_tqcResultAlarms_tqcResults') = 0)
            BEGIN
            ALTER TABLE dbo.tqcResultAlarms WITH CHECK ADD CONSTRAINT [FK_tqcResultAlarms_tqcResults]
            FOREIGN KEY(QCTestSampleID, QCControlLotID, AnalyzerID, RunsGroupNumber, RunNumber)
            REFERENCES dbo.tqcResults (QCTestSampleID, QCControlLotID, AnalyzerID, RunsGroupNumber, RunNumber)
            ALTER TABLE dbo.tqcResultAlarms CHECK CONSTRAINT [FK_tqcResultAlarms_tqcResults]
            END
            END
            GO
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U'
            AND  (so.name = 'twksWSReadings' AND sc.name = 'ReadingNumber' AND sc.xtype = 48)) &gt; 0)
            BEGIN
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksWSReadings' AND sc.name = 'ReadingNumber') = 1)
            IF ((SELECT sc.xtype FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE  so.xtype = 'U' AND so.name = 'twksWSReadings' AND sc.name = 'ReadingNumber') &lt;&gt; 56)
            BEGIN
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_twksWSReadings_1') = 1)
            ALTER TABLE dbo.twksWSReadings DROP CONSTRAINT [PK_twksWSReadings_1]
            ALTER TABLE dbo.twksWSReadings ALTER COLUMN ReadingNumber INT NOT NULL
            END
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_twksWSReadings_1') = 0)
            ALTER TABLE dbo.twksWSReadings ADD CONSTRAINT [PK_twksWSReadings_1]
            PRIMARY KEY CLUSTERED (AnalyzerID ASC, WorkSessionID ASC, ExecutionID ASC, ReactionComplete ASC, ReadingNumber ASC)
            WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
            ON [PRIMARY]
            END
            GO
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'twksWSRotorPositionsInProcess') = 0)
            BEGIN
            SET ANSI_NULLS ON
            SET QUOTED_IDENTIFIER ON
            SET ANSI_PADDING ON

            CREATE TABLE [dbo].[twksWSRotorPositionsInProcess]([AnalyzerID] [varchar](25) NOT NULL,
            [RotorType] [varchar](15) NOT NULL,
            [CellNumber] [tinyint] NOT NULL,
            [InProcessTestsNumber] [tinyint] NOT NULL,
            CONSTRAINT [PK_twksWSRotorPositionsInProcess] PRIMARY KEY CLUSTERED ([AnalyzerID] ASC, [RotorType] ASC, [CellNumber] ASC)
            WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            ) ON [PRIMARY]

            SET ANSI_PADDING OFF

            ALTER TABLE [dbo].[twksWSRotorPositionsInProcess]  WITH CHECK ADD  CONSTRAINT [FK_tcfgAnalyzers_twksWSRotorPositionsInProcess] FOREIGN KEY([AnalyzerID])
            REFERENCES [dbo].[tcfgAnalyzers] ([AnalyzerID])

            ALTER TABLE [dbo].[twksWSRotorPositionsInProcess] CHECK CONSTRAINT [FK_tcfgAnalyzers_twksWSRotorPositionsInProcess]
            END
            GO

            IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksWSOrderTests]'))
            DROP VIEW [dbo].[vwksWSOrderTests]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vwksWSOrderTests]
            AS
            SELECT     WSOT.WorkSessionID, O.OrderID, O.SampleClass, O.StatFlag, O.PatientID, O.SampleID, OT.OrderTestID, OT.TestType, OT.SampleType, OT.TestID, T .TestName,
            OT.TubeType, OT.ReplicatesNumber, OT.AlternativeOrderTestID, OT.PreviousOrderTestID, OT.TestProfileID, OT.OrderTestStatus, OT.ControlID, WSOT.ToSendFlag,
            WSOT.OpenOTFlag, OT.AnalyzerID, OT.CreationOrder, T .MeasureUnit, O.OrderStatus, TS .PredilutionUseFlag, TS .PredilutionMode, TS .PredilutionFactor,
            T .SpecialTest, C.ControlName, C.LotNumber, O.OrderToExport
            FROM         dbo.twksWSOrderTests AS WSOT INNER JOIN
            dbo.twksOrderTests AS OT ON WSOT.OrderTestID = OT.OrderTestID INNER JOIN
            dbo.twksOrders AS O ON OT.OrderID = O.OrderID INNER JOIN
            dbo.tparTests AS T ON OT.TestID = T .TestID INNER JOIN
            dbo.tparTestSamples AS TS ON OT.TestID = TS .TestID AND OT.SampleType = TS .SampleType LEFT JOIN
            dbo.tparControls AS C ON OT.ControlID = C.ControlID
            WHERE     OT.TestType = 'STD'
            UNION
            SELECT     WSOT.WorkSessionID, O.OrderID, O.SampleClass, O.StatFlag, O.PatientID, O.SampleID, OT.OrderTestID, OT.TestType, OT.SampleType, OT.TestID,
            IT.Name AS TestName, OT.TubeType, OT.ReplicatesNumber, OT.AlternativeOrderTestID, OT.PreviousOrderTestID, OT.TestProfileID, OT.OrderTestStatus, OT.ControlID,
            WSOT.ToSendFlag, WSOT.OpenOTFlag, OT.AnalyzerID, OT.CreationOrder, IT.ISE_Units AS MeasureUnit, O.OrderStatus, (CASE WHEN ITS.ISE_DilutionFactor IS NULL
            THEN 0 ELSE 1 END) AS PredilutionUseFlag, (CASE WHEN ITS.ISE_DilutionFactor IS NULL THEN NULL ELSE 'USER' END) AS PredilutionMode,
            ITS.ISE_DilutionFactor AS PredilutionFactor, 0 AS SpecialTest, C.ControlName, C.LotNumber, O.OrderToExport
            FROM         dbo.twksWSOrderTests AS WSOT INNER JOIN
            dbo.twksOrderTests AS OT ON WSOT.OrderTestID = OT.OrderTestID INNER JOIN
            dbo.twksOrders AS O ON OT.OrderID = O.OrderID INNER JOIN
            dbo.tparISETests AS IT ON OT.TestID = IT.ISETestID INNER JOIN
            dbo.tparISETestSamples AS ITS ON OT.TestID = ITS.ISETestID AND OT.SampleType = ITS.SampleType LEFT JOIN
            dbo.tparControls AS C ON OT.ControlID = C.ControlID
            WHERE     OT.TestType = 'ISE'
            UNION
            SELECT     WSOT.WorkSessionID, O.OrderID, O.SampleClass, O.StatFlag, O.PatientID, O.SampleID, OT.OrderTestID, OT.TestType, OT.SampleType, OT.TestID,
            CT.CalcTestLongName AS TestName, OT.TubeType, OT.ReplicatesNumber, OT.AlternativeOrderTestID, OT.PreviousOrderTestID, OT.TestProfileID, OT.OrderTestStatus,
            OT.ControlID, WSOT.ToSendFlag, WSOT.OpenOTFlag, OT.AnalyzerID, OT.CreationOrder, CT.MeasureUnit, O.OrderStatus, NULL AS PredilutionUseFlag, NULL
            AS PredilutionMode, NULL AS PredilutionFactor, 0 AS SpecialTest, NULL AS ControlName, NULL AS LotNumber, O.OrderToExport
            FROM         dbo.twksWSOrderTests AS WSOT INNER JOIN
            dbo.twksOrderTests AS OT ON WSOT.OrderTestID = OT.OrderTestID INNER JOIN
            dbo.twksOrders AS O ON OT.OrderID = O.OrderID INNER JOIN
            dbo.tparCalculatedTests AS CT ON OT.TestID = CT.CalcTestID
            WHERE     OT.TestType = 'CALC'
            UNION
            SELECT     WSOT.WorkSessionID, O.OrderID, O.SampleClass, O.StatFlag, O.PatientID, O.SampleID, OT.OrderTestID, OT.TestType, OT.SampleType, OT.TestID,
            OS.Name AS TestName, OT.TubeType, OT.ReplicatesNumber, OT.AlternativeOrderTestID, OT.PreviousOrderTestID, OT.TestProfileID, OT.OrderTestStatus,
            OT.ControlID, WSOT.ToSendFlag, WSOT.OpenOTFlag, OT.AnalyzerID, OT.CreationOrder, OS.Units AS MeasureUnit, O.OrderStatus, NULL AS PredilutionUseFlag, NULL
            AS PredilutionMode, NULL AS PredilutionFactor, 0 AS SpecialTest, NULL AS ControlName, NULL AS LotNumber, O.OrderToExport
            FROM         dbo.twksWSOrderTests AS WSOT INNER JOIN
            dbo.twksOrderTests AS OT ON WSOT.OrderTestID = OT.OrderTestID INNER JOIN
            dbo.twksOrders AS O ON OT.OrderID = O.OrderID INNER JOIN
            dbo.tparOffSystemTests AS OS ON OT.TestID = OS.OffSystemTestID
            WHERE     OT.TestType = 'OFFS'
            GO
            IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tparContaminationWashings_tparContaminations]') AND parent_object_id = OBJECT_ID(N'[dbo].[tparContaminationWashings]'))
            ALTER TABLE [dbo].[tparContaminationWashings] DROP CONSTRAINT [FK_tparContaminationWashings_tparContaminations]
            GO
            IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tparContaminationWashings]') AND type in (N'U'))
            DROP TABLE [dbo].[tparContaminationWashings]
            GO
            IF OBJECT_ID('FK_twksImportErrorsLog_tfmwMessages', 'F') IS NOT NULL ALTER TABLE twksImportErrorsLog DROP CONSTRAINT [FK_twksImportErrorsLog_tfmwMessages]
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisReagentsBottles' AND sc.name = 'Status') = 0
            ALTER TABLE [dbo].[thisReagentsBottles] ADD [Status] nvarchar(15) NULL
            GO
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksCalcResults') = 1)
            DROP VIEW [dbo].[vwksCalcResults]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vwksCalcResults] AS
            SELECT dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
            dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
            dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
            dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
            dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
            dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
            dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
            dbo.twksResults.TS_DateTime, dbo.tparCalculatedTests.CalcTestLongName AS TestName, dbo.twksOrderTests.SampleType,
            dbo.tparCalculatedTests.Decimals AS DecimalsAllowed, dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, dbo.twksOrderTests.AnalyzerID,
            dbo.twksOrderTests.TestType, 0 AS TheoricalConcentration, dbo.twksOrderCalculatedTests.OrderTestID AS STDOrderTestID, dbo.twksOrderTests.TestID,
            dbo.tparCalculatedTests.ActiveRangeType, dbo.twksOrderTests.OrderID, dbo.twksWSOrderTests.WorkSessionID, dbo.twksOrders.StatFlag,
            dbo.twksOrders.SampleClass, dbo.twksResults.Collapsed, ISNULL(dbo.twksOrders.PatientID, dbo.twksOrders.SampleID) AS PatientID
            FROM   dbo.twksResults INNER JOIN dbo.twksOrderCalculatedTests ON dbo.twksResults.OrderTestID = dbo.twksOrderCalculatedTests.CalcOrderTestID
            INNER JOIN dbo.twksOrderTests ON dbo.twksOrderCalculatedTests.CalcOrderTestID = dbo.twksOrderTests.OrderTestID
            INNER JOIN dbo.tparCalculatedTests ON dbo.twksOrderTests.TestID = dbo.tparCalculatedTests.CalcTestID
            INNER JOIN dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparCalculatedTests.MeasureUnit
            INNER JOIN dbo.twksWSOrderTests ON dbo.twksOrderTests.OrderTestID = dbo.twksWSOrderTests.OrderTestID
            INNER JOIN dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID;
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksCompleteResults') = 1)
            DROP VIEW [dbo].[vwksCompleteResults]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vwksCompleteResults] AS
            SELECT DISTINCT OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
            Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
            CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
            TS_DateTime, AnalyzerID, WorkSessionID, BlankAbsorbanceLimit, KineticBlankLimit, CalibratorLotNumber, SampleType, TheoricalConcentration, MeasureUnit,
            FactorLowerLimit, FactorUpperLimit, DecimalsAllowed, ControlName, ControlLotNumber, MinConcentration, MaxConcentration, TestType, Collapsed, TestName,
            OrderTestStatus, PostDilutionType, TestID, ActiveRangeType, OrderID, ManualResult, ManualResultText, StatFlag, CalibratorName, AnalysisMode, CurveSlope,
            CurveOffset, CurveCorrelation, CalibratorID, SampleClass, NumberOfCalibrators, NULL AS STDOrderTestID, NULL AS PatientName,
            ISNULL(PatientID, SampleID) AS PatientID, NULL AS ControlNum
            FROM dbo.vwksResults
            UNION ALL
            SELECT DISTINCT OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
            Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
            CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
            TS_DateTime, AnalyzerID, WorkSessionID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL AS CalibratorLotNumber, SampleType,
            TheoricalConcentration, MeasureUnit, NULL AS FactorLowerLimit, NULL AS FactorUpperLimit, DecimalsAllowed, NULL AS ControlName, NULL AS ControlLotNumber,
            NULL AS MinConcentration, NULL AS MaxConcentration, TestType, Collapsed, TestName, NULL AS OrderTestStatus, NULL AS PostDilutionType, TestID,
            ActiveRangeType, OrderID, NULL AS ManualResult, NULL AS ManualResultText, StatFlag, NULL AS CalibratorName, NULL AS AnalysisMode, NULL AS CurveSlope,
            NULL AS CurveOffset, NULL AS CurveCorrelation, NULL AS CalibratorID, SampleClass, NULL AS NumberOfCalibrators, STDOrderTestID,
            NULL AS PatientName, PatientID, NULL AS ControlNum
            FROM dbo.vwksCalcResults
            UNION ALL
            SELECT DISTINCT OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
            Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
            CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
            TS_DateTime, AnalyzerID, WorkSessionID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL AS CalibratorLotNumber, SampleType,
            TheoricalConcentration, MeasureUnit, NULL AS FactorLowerLimit, NULL AS FactorUpperLimit, DecimalsAllowed, NULL AS ControlName, NULL AS ControlLotNumber,
            NULL AS MinConcentration, NULL AS MaxConcentration, TestType, Collapsed, TestName, OrderTestStatus, NULL AS PostDilutionType, TestID, ActiveRangeType,
            OrderID, NULL AS ManualResult, ManualResultText, StatFlag, NULL AS CalibratorName, NULL AS AnalysisMode, NULL AS CurveSlope, NULL AS CurveOffset,
            NULL AS CurveCorrelation, NULL AS CalibratorID, SampleClass, NULL AS NumberOfCalibrators, NULL AS STDOrderTestID, PatientName, PatientID, ControlNum
            FROM vwksWSISEOffSystemResults;
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksWSExecutionsAlarms') = 1)
            DROP VIEW [dbo].[vwksWSExecutionsAlarms]
            GO

            SET ANSI_NULLS ON
            GO

            SET QUOTED_IDENTIFIER ON
            GO

            CREATE VIEW [dbo].[vwksWSExecutionsAlarms]
            AS
            SELECT     dbo.twksWSExecutions.ExecutionID, dbo.tfmwAlarms.Description, dbo.twksWSExecutionAlarms.AlarmID, dbo.twksWSExecutions.OrderTestID,
            dbo.twksWSExecutions.RerunNumber
            FROM         dbo.twksWSExecutionAlarms INNER JOIN
            dbo.twksWSExecutions ON dbo.twksWSExecutionAlarms.ExecutionID = dbo.twksWSExecutions.ExecutionID INNER JOIN
            dbo.tfmwAlarms ON dbo.twksWSExecutionAlarms.AlarmID = dbo.tfmwAlarms.AlarmID
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksMonitorWSTabSTDISE') = 1)
            DROP VIEW [dbo].vwksMonitorWSTabSTDISE
            GO

            SET ANSI_NULLS ON
            GO

            SET QUOTED_IDENTIFIER ON
            GO

            CREATE VIEW [dbo].[vwksMonitorWSTabSTDISE]
            AS
            SELECT     ex.ExecutionStatus, ex.ExecutionID, ex.RerunNumber, ex.WorkSessionID, ex.AnalyzerID, ex.Paused, ex.StatFlag, ot.OrderTestID, ot.TestType, ot.TestID,
            (CASE ot.TestType WHEN 'ISE' THEN ise.Name WHEN 'STD' THEN std.TestName ELSE NULL END) AS TestName, ot.SampleType, ot.OrderTestStatus, O.OrderID,
            O.SampleClass, O.OrderStatus,
            (CASE o.SampleClass WHEN 'CALIB' THEN calibs.CalibratorName WHEN 'CTRL' THEN ctrls.ControlName WHEN 'PATIENT' THEN ISNULL(o.PatientID, o.SampleID)
            ELSE 'BLANK' END) AS ElementName, REPLACE(re.SpecimenIDList, CHAR(13), ', ') AS SpecimenIDList, re.ElementFinished, CASE WHEN o.PatientID IS NOT NULL
            THEN pat.FirstName + ' ' + pat.LastName ELSE o.SampleID END AS PatientName, r.ExportStatus, r.Printed
            FROM         dbo.twksWSExecutions AS ex INNER JOIN
            dbo.twksOrderTests AS ot ON ex.OrderTestID = ot.OrderTestID INNER JOIN
            dbo.twksOrders AS O ON ot.OrderID = O.OrderID LEFT OUTER JOIN
            dbo.tparTests AS std ON ot.TestType = 'STD' AND ot.TestID = std.TestID LEFT OUTER JOIN
            dbo.tparISETests AS ise ON ot.TestType = 'ISE' AND ot.TestID = ise.ISETestID LEFT OUTER JOIN
            dbo.tparTestCalibrators AS testcalib ON ot.TestType = 'STD' AND ot.TestID = testcalib.TestID AND ot.SampleType = testcalib.SampleType LEFT OUTER JOIN
            dbo.tparCalibrators AS calibs ON testcalib.CalibratorID = calibs.CalibratorID LEFT OUTER JOIN
            dbo.tparControls AS ctrls ON ot.ControlID = ctrls.ControlID LEFT OUTER JOIN
            dbo.twksWSRequiredElements AS re ON O.PatientID = re.PatientID AND ot.SampleType = re.SampleType AND re.PredilutionFactor IS NULL LEFT OUTER JOIN
            dbo.tparPatients AS pat ON O.SampleClass = 'PATIENT' AND O.PatientID = pat.PatientID LEFT OUTER JOIN
            dbo.twksResults AS r ON ex.OrderTestID = r.OrderTestID AND ex.RerunNumber = r.RerunNumber AND ex.MultiItemNumber = r.MultiPointNumber
            WHERE     (ex.ReplicateNumber = 1) AND (ex.MultiItemNumber = 1)
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksMonitorWSTabOFFSCALC') = 1)
            DROP VIEW [dbo].vwksMonitorWSTabOFFSCALC
            GO

            SET ANSI_NULLS ON
            GO

            SET QUOTED_IDENTIFIER ON
            GO

            CREATE VIEW [dbo].[vwksMonitorWSTabOFFSCALC]
            AS
            SELECT     NULL AS ExecutionStatus, NULL AS ExecutionID, NULL AS RerunNumber, NULL AS Paused, ot.AnalyzerID, re.WorkSessionID, ot.OrderTestID, ot.TestType, ot.TestID,
            (CASE ot.TestType WHEN 'CALC' THEN calc.CalcTestName WHEN 'OFFS' THEN offs.Name ELSE 'BLANK' END) AS TestName, ot.SampleType, ot.OrderTestStatus,
            o.OrderID, o.SampleClass, o.StatFlag, o.OrderStatus, ISNULL(o.PatientID, o.SampleID) AS ElementName, REPLACE(re.SpecimenIDList, CHAR(13), ', ') AS SpecimenIDList, re.ElementFinished,
            CASE WHEN o.PatientID IS NOT NULL THEN pat.FirstName + ' ' + pat.LastName ELSE o.SampleID END AS PatientName, r.ExportStatus, r.Printed
            FROM         dbo.twksOrderTests AS ot INNER JOIN
            dbo.twksOrders AS o ON o.OrderID = ot.OrderID LEFT OUTER JOIN
            dbo.tparCalculatedTests AS calc ON calc.CalcTestID = ot.TestID LEFT OUTER JOIN
            dbo.tparOffSystemTests AS offs ON offs.OffSystemTestID = ot.TestID LEFT OUTER JOIN
            dbo.twksWSRequiredElements AS re ON o.PatientID = re.PatientID AND ot.SampleType = re.SampleType LEFT OUTER JOIN
            dbo.tparPatients AS pat ON o.SampleClass = 'PATIENT' AND o.PatientID = pat.PatientID LEFT OUTER JOIN
            dbo.twksResults AS r ON ot.OrderTestID = r.OrderTestID
            WHERE     (o.SampleClass = 'PATIENT') AND (ot.TestType = 'CALC') AND (ot.OrderTestStatus &lt;&gt; 'OPEN') OR
            (ot.TestType = 'OFFS')
            GO
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksResultsCTRL') = 1)
            DROP VIEW [dbo].vwksResultsCTRL
            GO

            SET ANSI_NULLS ON
            GO

            SET QUOTED_IDENTIFIER ON
            GO

            CREATE VIEW [dbo].[vwksResultsCTRL]
            AS
            SELECT     dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
            dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
            dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
            dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
            dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
            dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
            dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
            dbo.twksResults.TS_DateTime, dbo.twksResults.WorkSessionID, dbo.twksResults.AnalyzerID, dbo.tparTestSamples.BlankAbsorbanceLimit,
            dbo.tparTests.KineticBlankLimit, 'NULL' AS CalibratorLotNumber, dbo.twksOrderTests.SampleType, NULL AS TheoricalConcentration,
            dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, dbo.tparTestSamples.FactorLowerLimit, dbo.tparTestSamples.FactorUpperLimit, dbo.tparTests.DecimalsAllowed,
            dbo.tparControls.ControlName, dbo.tparControls.LotNumber AS ControlLotNumber, dbo.tparTestControls.MinConcentration, dbo.tparTestControls.MaxConcentration,
            dbo.twksOrderTests.TestType, dbo.twksResults.Collapsed, dbo.tparTests.TestName, dbo.twksOrderTests.OrderTestStatus,
            dbo.twksWSRepetitionsToAdd.PostDilutionType, dbo.twksOrderTests.TestID, dbo.tparTestSamples.ActiveRangeType, dbo.twksOrderTests.OrderID,
            dbo.twksResults.ManualResult, dbo.twksResults.ManualResultText, dbo.twksOrders.StatFlag, '' AS CalibratorName, '' AS AnalysisMode, dbo.twksResults.CurveSlope,
            dbo.twksResults.CurveOffset, dbo.twksResults.CurveCorrelation, NULL AS CalibratorID, dbo.twksOrders.SampleClass, NULL AS NumberOfCalibrator,
            dbo.twksOrders.PatientID, dbo.twksOrders.SampleID, dbo.twksOrderTests.TubeType, dbo.tparTestSamples.TestLongName
            FROM         dbo.twksResults INNER JOIN
            dbo.twksOrderTests ON dbo.twksResults.OrderTestID = dbo.twksOrderTests.OrderTestID INNER JOIN
            dbo.tparTestSamples ON dbo.twksOrderTests.TestID = dbo.tparTestSamples.TestID AND
            dbo.twksOrderTests.SampleType = dbo.tparTestSamples.SampleType INNER JOIN
            dbo.tparTests ON dbo.tparTestSamples.TestID = dbo.tparTests.TestID INNER JOIN
            dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparTests.MeasureUnit LEFT OUTER JOIN
            dbo.twksWSRepetitionsToAdd ON dbo.twksResults.OrderTestID = dbo.twksWSRepetitionsToAdd.OrderTestID INNER JOIN
            dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID INNER JOIN
            dbo.tparControls ON dbo.twksOrderTests.ControlID = dbo.tparControls.ControlID INNER JOIN
            dbo.tparTestControls ON dbo.twksOrderTests.ControlID = dbo.tparTestControls.ControlID AND dbo.twksOrderTests.TestID = dbo.tparTestControls.TestID AND
            dbo.twksOrderTests.SampleType = dbo.tparTestControls.SampleType
            WHERE     (dbo.twksOrderTests.TestType = 'STD') AND (dbo.twksOrders.SampleClass = 'CTRL') AND (dbo.twksOrderTests.TestType = dbo.tparTestControls.TestType)
            UNION
            SELECT     dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
            dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
            dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
            dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
            dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
            dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
            dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
            dbo.twksResults.TS_DateTime, dbo.twksResults.WorkSessionID, dbo.twksResults.AnalyzerID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL
            AS CalibratorLotNumber, dbo.twksOrderTests.SampleType, NULL AS TheoricalConcentration, dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, NULL
            AS FactorLowerLimit, NULL AS FactorUpperLimit, tparISETestSamples.Decimals AS DecimalsAllowed, dbo.tparControls.ControlName,
            dbo.tparControls.LotNumber AS ControlLotNumber, dbo.tparTestControls.MinConcentration, dbo.tparTestControls.MaxConcentration, dbo.twksOrderTests.TestType,
            dbo.twksResults.Collapsed, dbo.tparISETests.Name, dbo.twksOrderTests.OrderTestStatus, dbo.twksWSRepetitionsToAdd.PostDilutionType,
            dbo.twksOrderTests.TestID, dbo.tparISETestSamples.ActiveRangeType, dbo.twksOrderTests.OrderID, dbo.twksResults.ManualResult,
            dbo.twksResults.ManualResultText, dbo.twksOrders.StatFlag, '' AS CalibratorName, '' AS AnalysisMode, dbo.twksResults.CurveSlope, dbo.twksResults.CurveOffset,
            dbo.twksResults.CurveCorrelation, NULL AS CalibratorID, dbo.twksOrders.SampleClass, NULL AS NumberOfCalibrator, dbo.twksOrders.PatientID,
            dbo.twksOrders.SampleID, dbo.twksOrderTests.TubeType, NULL AS TestLongName
            FROM         dbo.twksResults INNER JOIN
            dbo.twksOrderTests ON dbo.twksResults.OrderTestID = dbo.twksOrderTests.OrderTestID INNER JOIN
            dbo.tparISETestSamples ON dbo.twksOrderTests.TestID = dbo.tparISETestSamples.ISETestID AND
            dbo.twksOrderTests.SampleType = dbo.tparISETestSamples.SampleType INNER JOIN
            dbo.tparISETests ON dbo.tparISETestSamples.ISETestID = dbo.tparISETests.ISETestID INNER JOIN
            dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparISETests.Units LEFT OUTER JOIN
            dbo.twksWSRepetitionsToAdd ON dbo.twksResults.OrderTestID = dbo.twksWSRepetitionsToAdd.OrderTestID INNER JOIN
            dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID INNER JOIN
            dbo.tparControls ON dbo.twksOrderTests.ControlID = dbo.tparControls.ControlID INNER JOIN
            dbo.tparTestControls ON dbo.twksOrderTests.ControlID = dbo.tparTestControls.ControlID AND dbo.twksOrderTests.TestID = dbo.tparTestControls.TestID AND
            dbo.twksOrderTests.SampleType = dbo.tparTestControls.SampleType
            WHERE     (dbo.twksOrderTests.TestType = 'ISE') AND (dbo.twksOrders.SampleClass = 'CTRL') AND (dbo.twksOrderTests.TestType = dbo.tparTestControls.TestType)

            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksResultsNotCTRL') = 1)
            DROP VIEW [dbo].vwksResultsNotCTRL
            GO

            SET ANSI_NULLS ON
            GO

            SET QUOTED_IDENTIFIER ON
            GO

            CREATE VIEW [dbo].[vwksResultsNotCTRL]
            AS
            SELECT     dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
            dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
            dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
            dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
            dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
            dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
            dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
            dbo.twksResults.TS_DateTime, dbo.twksResults.WorkSessionID, dbo.twksResults.AnalyzerID, dbo.tparTestSamples.BlankAbsorbanceLimit,
            dbo.tparTests.KineticBlankLimit, dbo.tparCalibrators.LotNumber AS CalibratorLotNumber, dbo.twksOrderTests.SampleType,
            ISNULL(ISNULL(tparTestCalibratorValues_1.TheoricalConcentration,
            (SELECT     TOP (1) dbo.tparTestCalibratorValues.TheoricalConcentration
            FROM          dbo.tparTestCalibrators INNER JOIN
            dbo.tparTestCalibratorValues ON dbo.tparTestCalibrators.TestCalibratorID = dbo.tparTestCalibratorValues.TestCalibratorID
            WHERE      (dbo.tparTestCalibrators.TestID = dbo.tparTestSamples.TestID) AND
            (dbo.tparTestCalibrators.SampleType = dbo.tparTestSamples.SampleTypeAlternative))), 0) AS TheoricalConcentration,
            dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, dbo.tparTestSamples.FactorLowerLimit, dbo.tparTestSamples.FactorUpperLimit, dbo.tparTests.DecimalsAllowed,
            CONVERT(NVARCHAR(16), NULL) AS ControlName, CONVERT(NVARCHAR(16), NULL) AS ControlLotNumber, NULL AS MinConcentration, NULL AS MaxConcentration,
            dbo.twksOrderTests.TestType, dbo.twksResults.Collapsed, dbo.tparTests.TestName, dbo.twksOrderTests.OrderTestStatus,
            dbo.twksWSRepetitionsToAdd.PostDilutionType, dbo.twksOrderTests.TestID, dbo.tparTestSamples.ActiveRangeType, dbo.twksOrderTests.OrderID,
            dbo.twksResults.ManualResult, dbo.twksResults.ManualResultText, dbo.twksOrders.StatFlag, dbo.tparCalibrators.CalibratorName,
            dbo.tfmwMultiLanguageResources.ResourceText AS AnalysisMode, dbo.twksResults.CurveSlope, dbo.twksResults.CurveOffset, dbo.twksResults.CurveCorrelation,
            dbo.tparCalibrators.CalibratorID, dbo.twksOrders.SampleClass, dbo.tparCalibrators.NumberOfCalibrators, dbo.twksOrders.PatientID, dbo.twksOrders.SampleID,
            dbo.twksOrderTests.TubeType, dbo.tparTestSamples.TestLongName
            FROM         dbo.tparTestCalibratorValues AS tparTestCalibratorValues_1 RIGHT OUTER JOIN
            dbo.twksResults INNER JOIN
            dbo.twksOrderTests ON dbo.twksResults.OrderTestID = dbo.twksOrderTests.OrderTestID INNER JOIN
            dbo.tparTestSamples ON dbo.twksOrderTests.TestID = dbo.tparTestSamples.TestID AND
            dbo.twksOrderTests.SampleType = dbo.tparTestSamples.SampleType INNER JOIN
            dbo.twksWSOrderTests ON dbo.twksWSOrderTests.OrderTestID = dbo.twksResults.OrderTestID INNER JOIN
            dbo.tparTests ON dbo.tparTestSamples.TestID = dbo.tparTests.TestID INNER JOIN
            dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparTests.MeasureUnit LEFT OUTER JOIN
            dbo.tparTestCalibrators AS tparTestCalibrators_1 ON dbo.tparTestSamples.TestID = tparTestCalibrators_1.TestID AND
            dbo.tparTestSamples.SampleType = tparTestCalibrators_1.SampleType LEFT OUTER JOIN
            dbo.tparCalibrators ON tparTestCalibrators_1.CalibratorID = dbo.tparCalibrators.CalibratorID ON
            tparTestCalibratorValues_1.TestCalibratorID = tparTestCalibrators_1.TestCalibratorID LEFT OUTER JOIN
            dbo.twksWSRepetitionsToAdd ON dbo.twksResults.OrderTestID = dbo.twksWSRepetitionsToAdd.OrderTestID INNER JOIN
            dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID LEFT OUTER JOIN
            dbo.tfmwPreloadedMasterData ON dbo.tparTests.AnalysisMode = dbo.tfmwPreloadedMasterData.ItemID AND
            dbo.tfmwPreloadedMasterData.SubTableID = 'ANALYSIS_MODES' LEFT OUTER JOIN
            dbo.tcfgUserSettings ON dbo.tcfgUserSettings.SettingID = 'CURRENT_LANGUAGE' LEFT OUTER JOIN
            dbo.tfmwMultiLanguageResources ON dbo.tfmwPreloadedMasterData.ResourceID = dbo.tfmwMultiLanguageResources.ResourceID AND
            dbo.tfmwMultiLanguageResources.LanguageID = dbo.tcfgUserSettings.CurrentValue
            WHERE     (dbo.twksOrderTests.TestType = 'STD') AND (dbo.twksOrders.SampleClass &lt;&gt; 'CTRL')
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vhisTestSamples') = 1)
            DROP VIEW [dbo].vhisTestSamples
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vhisTestSamples] AS
            SELECT  'STD' AS TestType, TS .HistTestID, TS .TestID, TS .TestName, TS .TestVersionNumber, TS .DecimalsAllowed, NULL AS FormulaText,
            (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, TS.TestLongName
            FROM    thisTestSamples TS LEFT OUTER JOIN vcfgTestSortingForReports T ON TS .TestName = T .TestName AND T .TestType = 'STD'
            UNION
            SELECT  'ISE' AS TestType, TS .HistISETestID AS HistTestID, TS .ISETestID AS TestID, TS .ISETestName AS TestName, 0 AS TestVersionNumber,
            TS .DecimalsAllowed, NULL  AS FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition,
            NULL AS TestLongName
            FROM    thisISETestSamples TS LEFT OUTER JOIN vcfgTestSortingForReports T ON TS .ISETestName = T .TestName AND T .TestType = 'ISE'
            UNION
            SELECT  'CALC' AS TestType, TS .HistCalcTestID AS HistTestID, TS .CalcTestID AS TestID, TS .CalcTestLongName AS TestName, 0 AS TestVersionNumber,
            TS .DecimalsAllowed, TS .FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition,
            NULL AS TestLongName
            FROM    thisCalculatedTests TS LEFT OUTER JOIN vcfgTestSortingForReports T ON TS .CalcTestLongName = T .TestName AND T .TestType = 'CALC'
            UNION
            SELECT  'OFFS' AS TestType, TS .HistOffSystemTestID AS HistTestID, TS .OffSystemTestID AS TestID, TS .OffSystemTestName AS TestName, 0 AS TestVersionNumber,
            TS .DecimalsAllowed, NULL AS FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition,
            NULL AS TestLongName
            FROM    thisOffSystemTestSamples TS LEFT OUTER JOIN vcfgTestSortingForReports T ON TS .OffSystemTestName = T .TestName AND T .TestType = 'OFFS'
            GO
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vhisWSResults') = 1)
            DROP VIEW [dbo].vhisWSResults
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vhisWSResults] AS
            SELECT  R.HistOrderTestID, R.AnalyzerID, R.WorkSessionID, R.ResultDateTime,
            (CASE WHEN OT.SampleClass = 'PATIENT' AND OT.SampleID IS NOT NULL THEN OT.SampleID
            WHEN OT.SampleClass = 'PATIENT' AND P.PatientID IS NOT NULL THEN P.PatientID
            ELSE NULL END) AS PatientID,
            OT.HistPatientID, OT.SampleClass, OT.StatFlag, OT.TestType, OT.SampleType, TS.TestID, TS.TestName, TS.TestVersionNumber, TS.TestPosition, R.CONCValue,
            (CASE WHEN NOT r.RemarkAlert IS NULL THEN r.RemarkAlert ELSE '' END) AS RemarkAlert, TS.DecimalsAllowed, MD.FixedItemDesc AS MeasureUnit,
            R.MinRefRange, R.MaxRefRange, R.ExportStatus, R.AlarmList, TS.FormulaText, R.MultiPointNumber, R.ManualResultFlag, R.ManualResult, R.ManualResultText,
            R.LISMessageID, OT.LISRequest, OT.ExternalQC, OT.ESOrderID, OT.LISOrderID, OT.ESPatientID, OT.LISPatientID, OT.LISTestName, OT.LISSampleType, OT.LISUnits,
            TS.TestLongName
            FROM    dbo.thisWSResults AS R INNER JOIN dbo.thisWSOrderTests AS OT ON R.HistOrderTestID = OT.HistOrderTestID
            INNER JOIN dbo.vhisTestSamples AS TS ON OT.HistTestID = TS.HistTestID AND OT.TestType = TS.TestType AND TS.TestVersionNumber = COALESCE (OT.TestVersionNumber, 0)
            LEFT OUTER JOIN dbo.tcfgMasterData AS MD ON MD.SubTableID = 'TEST_UNITS' AND MD.ItemID = OT.MeasureUnit
            LEFT OUTER JOIN dbo.thisPatients AS P ON P.HistPatientID = OT.HistPatientID
            GO
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksResults') = 1)
            DROP VIEW [dbo].vwksResults
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vwksResults]
            AS
            SELECT     *
            FROM         dbo.vwksResultsNotCTRL
            UNION ALL
            SELECT     *
            FROM         dbo.vwksResultsCTRL
            GO
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksCompleteResults') = 1)
            DROP VIEW [dbo].vwksCompleteResults
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vwksCompleteResults]
            AS
            SELECT DISTINCT
            OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
            Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
            CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
            TS_DateTime, AnalyzerID, WorkSessionID, BlankAbsorbanceLimit, KineticBlankLimit, CalibratorLotNumber, SampleType, TheoricalConcentration, MeasureUnit,
            FactorLowerLimit, FactorUpperLimit, DecimalsAllowed, ControlName, ControlLotNumber, MinConcentration, MaxConcentration, TestType, Collapsed, TestName,
            OrderTestStatus, PostDilutionType, TestID, ActiveRangeType, OrderID, ManualResult, ManualResultText, StatFlag, CalibratorName, AnalysisMode, CurveSlope,
            CurveOffset, CurveCorrelation, CalibratorID, SampleClass, NumberOfCalibrators, NULL AS STDOrderTestID, NULL AS PatientName, ISNULL(PatientID, SampleID)
            AS PatientID, NULL AS ControlNum, TestLongName
            FROM         dbo.vwksResults
            UNION ALL
            SELECT DISTINCT
            OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
            Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
            CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
            TS_DateTime, AnalyzerID, WorkSessionID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL AS CalibratorLotNumber, SampleType,
            TheoricalConcentration, MeasureUnit, NULL AS FactorLowerLimit, NULL AS FactorUpperLimit, DecimalsAllowed, NULL AS ControlName, NULL
            AS ControlLotNumber, NULL AS MinConcentration, NULL AS MaxConcentration, TestType, Collapsed, TestName, NULL AS OrderTestStatus, NULL AS PostDilutionType,
            TestID, ActiveRangeType, OrderID, NULL AS ManualResult, NULL AS ManualResultText, StatFlag, NULL AS CalibratorName, NULL AS AnalysisMode, NULL
            AS CurveSlope, NULL AS CurveOffset, NULL AS CurveCorrelation, NULL AS CalibratorID, SampleClass, NULL AS NumberOfCalibrators, STDOrderTestID, NULL
            AS PatientName, PatientID, NULL AS ControlNum, NULL AS TestLongName
            FROM         dbo.vwksCalcResults
            UNION ALL
            SELECT DISTINCT
            OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
            Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
            CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
            TS_DateTime, AnalyzerID, WorkSessionID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL AS CalibratorLotNumber, SampleType,
            TheoricalConcentration, MeasureUnit, NULL AS FactorLowerLimit, NULL AS FactorUpperLimit, DecimalsAllowed, NULL AS ControlName, NULL
            AS ControlLotNumber, NULL AS MinConcentration, NULL AS MaxConcentration, TestType, Collapsed, TestName, OrderTestStatus, NULL AS PostDilutionType, TestID,
            ActiveRangeType, OrderID, NULL AS ManualResult, ManualResultText, StatFlag, NULL AS CalibratorName, NULL AS AnalysisMode, NULL AS CurveSlope, NULL
            AS CurveOffset, NULL AS CurveCorrelation, NULL AS CalibratorID, SampleClass, NULL AS NumberOfCalibrators, NULL AS STDOrderTestID, PatientName, PatientID,
            ControlNum, NULL AS TestLongName
            FROM         vwksWSISEOffSystemResults;
            GO
          </StructureScript>
          <DataScript />
        </CommonRevision>
      </CommonRevisions>
      <DataRevisions />
    </Release>
    <Release Version="03.00.04">
      <CommonRevisions />
      <DataRevisions>
        <DataRevision SequenceNumber="0" JiraID="BA-2469">
          <PrerequisiteScript />
          <IntegrityScript />
          <DataScript>
			        UPDATE dbo.tfmwVersions SET UserSoftware = '3.0.4', ServiceSoftware = '1.2.4', FirmwareScripts = '1.1.0', Firmware = '0.13'
			        GO
            </DataScript>
        </DataRevision>
      </DataRevisions>
    </Release>
    <Release Version="03.00.05">
      <CommonRevisions>
        <CommonRevision SequenceNumber="0" JiraID="BA-2469">
          <PrerequisiteScript />
          <IntegrityScript />
          <StructureScript>
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksWSBLines' AND sc.name = 'Type') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].twksWSBLines ADD Type [nvarchar](15) NOT NULL DEFAULT 'STATIC'
            END

            SET ANSI_PADDING ON
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_twksWSBLines') = 1)
            BEGIN
            ALTER TABLE [Ax00].[dbo].twksWSBLines DROP CONSTRAINT [PK_twksWSBLines]
            END

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_twksWSBLines') = 0)
            BEGIN
            ALTER TABLE [Ax00].[dbo].twksWSBLines ADD  CONSTRAINT [PK_twksWSBLines] PRIMARY KEY CLUSTERED
            (
            [AnalyzerID] ASC,
            [BaseLineID] ASC,
            [Wavelength] ASC,
            [WellUsed] ASC
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            END
            SET ANSI_PADDING OFF
            GO


            SET ANSI_PADDING ON
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tfmwSwParameters_1') = 1)
            BEGIN
            ALTER TABLE [Ax00].[dbo].tfmwSwParameters DROP CONSTRAINT PK_tfmwSwParameters_1
            END

            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tfmwSwParameters' AND sc.name = 'ParameterID') = 1
            BEGIN
            ALTER TABLE [Ax00].[dbo].tfmwSwParameters DROP COLUMN [ParameterID]
            END

            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tfmwSwParameters' AND sc.name = 'ParameterID') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].tfmwSwParameters ADD [ParameterID] [int] IDENTITY(1,1) NOT NULL
            END

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tfmwSwParameters_1') = 0)
            BEGIN
            ALTER TABLE [Ax00].[dbo].tfmwSwParameters ADD  CONSTRAINT [PK_tfmwSwParameters_1] PRIMARY KEY CLUSTERED
            (
            [ParameterID] ASC
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            END

            SET ANSI_PADDING OFF
            GO


            SET ANSI_PADDING ON
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tfmwPreloadedRanges') = 1)
            BEGIN
            ALTER TABLE [Ax00].[dbo].tfmwFieldLimits DROP CONSTRAINT PK_tfmwPreloadedRanges
            END

            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tfmwFieldLimits' AND sc.name = 'IndexID') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].tfmwFieldLimits ADD [IndexID] [int] IDENTITY(1,1) NOT NULL
            END

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tfmwFieldLimits_1') = 0)
            BEGIN
            ALTER TABLE [Ax00].[dbo].tfmwFieldLimits ADD  CONSTRAINT PK_tfmwFieldLimits_1 PRIMARY KEY CLUSTERED
            (
            [IndexID] ASC
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            END

            SET ANSI_PADDING OFF
            GO

            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksWSBLinesByWell' AND sc.name = 'Type') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].twksWSBLinesByWell ADD Type [nvarchar](15) NOT NULL DEFAULT 'STATIC'
            END
            SET ANSI_PADDING OFF
            GO
          </StructureScript>
          <DataScript />
        </CommonRevision>
      </CommonRevisions>
      <DataRevisions>
        <DataRevision SequenceNumber="0" JiraID="BA-2469">
          <PrerequisiteScript />
          <DataScript>
            UPDATE dbo.tfmwVersions SET UserSoftware = '3.0.5', ServiceSoftware = '1.2.4', FirmwareScripts = '1.1.0', Firmware = '0.20'
            GO

            IF ((SELECT COUNT(*) FROM [dbo].[tcfgAnalyzers] WHERE [AnalyzerID] = 'SN0000099999_Ax200' ) = 0)
            BEGIN
            INSERT INTO [dbo].[tcfgAnalyzers] ([AnalyzerID],[AnalyzerModel],[FirmwareVersion],[Generic],[Active]) VALUES('SN0000099999_Ax200', 'A200', '0.0', 1, 0)

            END
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwAnalyzerModelTubesByRing') = 1)
            BEGIN
            INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'SAMPLES',1,'T13',1)
            INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'SAMPLES',1,'T15',1)
            INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'SAMPLES',1,'PED',0)
            INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'REAGENTS',2,'BOTTLE3',1)
            INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'REAGENTS',2,'BOTTLE2',1)
            INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'REAGENTS',2,'BOTTLE1',1)
            END
            GO


            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwAnalyzerModelRotorsConfig') = 1)
            BEGIN
            UPDATE tfmwAnalyzerModelRotorsConfig SET RotorType = 'SAMPLES', RingPositions = 44, FirstCellNumber = 1, LastCellNumber = 44
            WHERE AnalyzerModel = 'A200' AND RotorType = 'SAMP_REAG' AND RingNumber = 1

            UPDATE tfmwAnalyzerModelRotorsConfig SET RotorType = 'REAGENTS', RingPositions = 44, FirstCellNumber = 45, LastCellNumber = 88
            WHERE AnalyzerModel = 'A200' AND RotorType = 'SAMP_REAG' AND RingNumber = 2

            END
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwSwFlags') = 1)
            BEGIN
            IF ((SELECT COUNT(*) FROM [dbo].[tfmwSwFlags] WHERE [FlagID] = 'DynamicBL_Fill' ) = 0)
            BEGIN
            INSERT INTO [dbo].[tfmwSwFlags] ([FlagID] ,[AllowedValues]) VALUES ('DynamicBL_Fill' ,'INI, END, CANCELED or NULL')
            END

            IF ((SELECT COUNT(*) FROM [dbo].[tfmwSwFlags] WHERE [FlagID] = 'DynamicBL_Read' ) = 0)
            BEGIN
            INSERT INTO [dbo].[tfmwSwFlags] ([FlagID] ,[AllowedValues]) VALUES ('DynamicBL_Read' ,'INI, END, CANCELED or NULL')
            END

            IF ((SELECT COUNT(*) FROM [dbo].[tfmwSwFlags] WHERE [FlagID] = 'DynamicBL_Empty' ) = 0)
            BEGIN
            INSERT INTO [dbo].[tfmwSwFlags] ([FlagID] ,[AllowedValues]) VALUES ('DynamicBL_Empty' ,'INI, END, CANCELED or NULL')
            END

            END
            GO
          </DataScript>
        </DataRevision>
      </DataRevisions>
    </Release>
    <Release Version="03.00.07">
      <CommonRevisions>
        <CommonRevision SequenceNumber="0" JiraID="BA-2469">
          <PrerequisiteScript />
          <IntegrityScript />
          <StructureScript>
            ALTER TABLE [tcfgAnalyzers] ALTER COLUMN [FirmwareVersion] varchar(10)
          </StructureScript>
          <DataScript />
        </CommonRevision>
      </CommonRevisions>
      <DataRevisions>
        <DataRevision SequenceNumber="0" JiraID="BA-2469">
          <PrerequisiteScript />
          <IntegrityScript />
          <DataScript>
            UPDATE dbo.tfmwVersions SET UserSoftware = '3.0.7', ServiceSoftware = '1.2.4', FirmwareScripts = '1.3.0', Firmware = '0.44.2'
            GO

            -- BA-2396 ERR560
            IF((SELECT COUNT(*) FROM dbo.tfmwAlarms WHERE AlarmID LIKE 'GLF_BOARD_FBLD_ERR') = 0)
            BEGIN
            INSERT INTO dbo.tfmwAlarms ([AlarmID],[AlarmSource],[AlarmType],[Name],[NameResourceID],[Description],[DescResourceID],[Solution],[SolResourceID],[Sound],[OnRunningSound],[Freeze],[OKType],[LISValue])
            VALUES ('GLF_BOARD_FBLD_ERR','INS','ERROR','Photometric board error during FBLD','GLF_BOARD_ERR','Photometric board does not respond','ALM_GLF_BOARD_ERR','Switch off the analyzer and the application, wait 30 seconds and then switch them on both again. Then press the Connect button','SOL_RECOVER_ERR',0,0,'RESET',1,0)
            END
            GO
            IF((SELECT COUNT(*) FROM dbo.tfmwAlarmErrorCodes WHERE AlarmID LIKE 'GLF_BOARD_FBLD_ERR') = 0)
            BEGIN
            INSERT INTO dbo.tfmwAlarmErrorCodes (AlarmID, ErrorCode, ManagementID)
            VALUES ('GLF_BOARD_FBLD_ERR',560,'3_RECOVER_ERROR')
            END
            GO

            -- BA-2358 ERR551

            IF((SELECT COUNT(*) FROM dbo.tfmwAlarms WHERE AlarmID LIKE 'FBLD_ROTOR_FULL') = 0)
            BEGIN
            INSERT INTO dbo.tfmwAlarms ([AlarmID],[AlarmSource],[AlarmType],[Name],[NameResourceID],[Description],[DescResourceID],[Solution],[SolResourceID],[Sound],[OnRunningSound],[Freeze],[OKType],[LISValue])
            VALUES ('FBLD_ROTOR_FULL','INS','REMARK','Photometric Rotor full','FBLD_ROTOR_FULL','Photometric Rotor is full','ALM_FBLD_ROTOR_FULL',NULL,NULL,0,0,NULL,0,0)
            END
            GO
            IF((SELECT COUNT(*) FROM dbo.tfmwAlarmErrorCodes WHERE AlarmID LIKE 'FBLD_ROTOR_FULL') = 0)
            BEGIN
            INSERT INTO dbo.tfmwAlarmErrorCodes (AlarmID, ErrorCode, ManagementID)
            VALUES ('FBLD_ROTOR_FULL',551,'6_OMMIT_ERROR')
            END
            GO

            -- BA-2358 ERR552

            IF((SELECT COUNT(*) FROM dbo.tfmwAlarms WHERE AlarmID LIKE 'UNKNOW_ROTOR_FULL') = 0)
            BEGIN
            INSERT INTO dbo.tfmwAlarms ([AlarmID],[AlarmSource],[AlarmType],[Name],[NameResourceID],[Description],[DescResourceID],[Solution],[SolResourceID],[Sound],[OnRunningSound],[Freeze],[OKType],[LISValue])
            VALUES ('UNKNOW_ROTOR_FULL','INS','REMARK','Unknow Photometric rotor state','UNKNOW_ROTOR_FULL','Photometric Rotor has some wells full','ALM_UNKNOW_ROTOR_FULL',NULL,NULL,0,0,NULL,0,0)
            END
            GO
            IF((SELECT COUNT(*) FROM dbo.tfmwAlarmErrorCodes WHERE AlarmID LIKE 'UNKNOW_ROTOR_FULL') = 0)
            BEGIN
            INSERT INTO dbo.tfmwAlarmErrorCodes (AlarmID, ErrorCode, ManagementID)
            VALUES ('UNKNOW_ROTOR_FULL',552,'2_FATAL_ERROR')
            END
            GO

            -- BA-2358
            IF((SELECT COUNT(*) FROM dbo.tfmwGeneralSettings WHERE SettingID LIKE 'FLIGHT_FULL_ROTOR_CADUCITY') = 0)
            BEGIN
            INSERT INTO dbo.tfmwGeneralSettings (SettingID, FixedItemDesc, CurrentValue, Status)
            VALUES ('FLIGHT_FULL_ROTOR_CADUCITY','Minutes that a full clean rotor is considered good to be read in a FLIGHT operation','30', 1)
            END
            GO

            -- BA-2406
            IF((SELECT COUNT(*) FROM dbo.tfmwSwFlags WHERE FlagID LIKE 'Barcode') = 0)
            BEGIN
            INSERT INTO [Ax00].[dbo].[tfmwSwFlags] VALUES ('Barcode', 'INI, END, CANCELED or NULL')
            END
            GO
          </DataScript>
        </DataRevision>
      </DataRevisions>
    </Release>
    <Release Version="03.00.08">
      <CommonRevisions>
        <CommonRevision SequenceNumber="1" JiraID="BA-2471">
          <PrerequisiteScript>
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tfmwVersions' AND sc.name = 'DBCommonRevisionNumber') = 0
            AND (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tfmwVersions' AND sc.name = 'DBDataRevisionNumber') = 0
             Select 'True'
            ELSE
             Select 'False'
          </PrerequisiteScript>
          <IntegrityScript>
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tfmwVersions' AND sc.name = 'DBCommonRevisionNumber') = 1
            AND (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tfmwVersions' AND sc.name = 'DBDataRevisionNumber') = 1
             Select 'True'
            ELSE
             Select 'False'
          </IntegrityScript>
          <StructureScript>
            ALTER TABLE [dbo].[tfmwVersions]
            ADD [DBCommonRevisionNumber] VARCHAR(10) default(0) NOT NULL
            GO
            ALTER TABLE [dbo].[tfmwVersions]
            ADD [DBDataRevisionNumber] VARCHAR(10) default(0) NOT NULL
          </StructureScript>
          <DataScript />
        </CommonRevision>
        <CommonRevision SequenceNumber="2" JiraID="BA-2345">
          <PrerequisiteScript />
          <IntegrityScript />
          <StructureScript>
            IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[vWSExecutionsSELECT]') AND type in (N'P', N'PC'))
            DROP PROCEDURE [dbo].[vWSExecutionsSELECT]
            GO

            CREATE PROCEDURE [dbo].[vWSExecutionsSELECT]
            AS
            SET NOCOUNT ON;
            SELECT a.ExecutionID, a.AnalyzerID, a.WorkSessionID, a.SampleClass, a.OrderTestID, a.ReplicateNumber, a.ExecutionStatus, a.ExecutionType,
            a.PreparationID, b.OrderID, b.TestType, b.SampleType, d.TestID, e.ReagentID, f.PredilutionMode
            FROM twksWSExecutions a, twksOrderTests b, twksOrders c, tparTests d, tparTestReagents e, tparTestSamples f
            where A.OrderTestID = B.OrderTestID
            AND B.OrderID = C.OrderID
            AND B.TestID = D.TestID
            AND D.TestID = E.TestID
            AND D.TestID = F.TestID
            AND a.ExecutionID &gt; 0
            AND E.ReagentNumber = 1
            AND B.SampleType = F.SampleType

            GO

            IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[vWSExecutionsSELECT_BY_EXECUTION_ID]') AND type in (N'P', N'PC'))
            DROP PROCEDURE [dbo].[vWSExecutionsSELECT_BY_EXECUTION_ID]
            GO

            CREATE PROCEDURE [dbo].[vWSExecutionsSELECT_BY_EXECUTION_ID]
            (
            @pEXECUTIONID int
            )
            AS
            SET NOCOUNT ON;
            SELECT a.ExecutionID, a.AnalyzerID, a.WorkSessionID, a.SampleClass, a.OrderTestID, a.ReplicateNumber, a.ExecutionStatus, a.ExecutionType,
            a.PreparationID, b.OrderID, b.TestType, b.SampleType, d.TestID, e.ReagentID, f.PredilutionMode
            FROM twksWSExecutions a, twksOrderTests b, twksOrders c, tparTests d, tparTestReagents e, tparTestSamples f
            where A.OrderTestID = B.OrderTestID
            AND B.OrderID = C.OrderID
            AND B.TestID = D.TestID
            AND D.TestID = E.TestID
            AND D.TestID = F.TestID
            AND A.PreparationID = @pEXECUTIONID
            AND E.ReagentNumber = 1
            AND B.SampleType = F.SampleType

            GO

            IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GET_WASHINGSOLUTION]') AND type in (N'P', N'PC'))
            DROP PROCEDURE [dbo].[GET_WASHINGSOLUTION]
            GO

            CREATE PROCEDURE [dbo].[GET_WASHINGSOLUTION]
            (
            @EXECUTIONID varchar(4),
            @ANALYZERID varchar(25),
            @WORKSESSIONID varchar(10)
            )
            AS
            SET NOCOUNT ON;
            SELECT B.ELEMENTID, B.TUBECONTENT, B.SOLUTIONCODE
            FROM TWKSWSROTORCONTENTBYPOSITION A, TWKSWSREQUIREDELEMENTS B, TWKSWSPREPARATIONS C
            WHERE A.ELEMENTID = B.ELEMENTID AND A.ROTORTYPE = 'REAGENTS' AND CHARINDEX(';WRUN;M:1;S:1;',C.LAX00DATA) = 0
            AND A.CELLNUMBER = SUBSTRING(C.LAX00DATA,CHARINDEX('BP1:',C.LAX00DATA)+4,CHARINDEX('BT1:',C.LAX00DATA)-5-CHARINDEX('BP1:',C.LAX00DATA))
            AND C.PREPARATIONID &gt; 0 AND C.ANALYZERID = @ANALYZERID AND C.WORKSESSIONID = @WORKSESSIONID
            AND C.LAX00DATA LIKE '%;WRUN;%' AND CHARINDEX(';ID:'+@EXECUTIONID,C.LAX00DATA) &gt; 0
            UNION
            SELECT 0 AS ELEMENTID, NULL AS TUBECONTENT, 'DISTW' AS SOLUTIONCODE
            FROM twksWSPreparations C
            WHERE CHARINDEX(';WRUN;M:1;S:1;ID:'+@EXECUTIONID+';BP1:0',C.LAX00Data) &gt; 0
            AND C.PREPARATIONID &gt; 0 AND C.ANALYZERID = @ANALYZERID AND C.WORKSESSIONID = @WORKSESSIONID
            AND C.LAX00DATA LIKE '%;WRUN;%' AND CHARINDEX(';ID:'+@EXECUTIONID,C.LAX00DATA) &gt; 0
            GO
          </StructureScript>
          <DataScript />
        </CommonRevision>
      </CommonRevisions>
      <DataRevisions>
        <DataRevision SequenceNumber="1" JiraID="BA-2345">
          <PrerequisiteScript />
          <IntegrityScript />
          <DataScript>
            UPDATE dbo.tfmwVersions SET UserSoftware = '3.0.8', ServiceSoftware = '1.2.4', FirmwareScripts = '1.3.0', Firmware = '1.00.1'
            GO
          </DataScript>
        </DataRevision>
      </DataRevisions>
    </Release>
    <Release Version="03.01.00">
      <CommonRevisions>
        <CommonRevision SequenceNumber="0" JiraID="BA-2469">
          <PrerequisiteScript />
          <IntegrityScript />
          <StructureScript>
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            SET ANSI_PADDING ON
            GO
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'u' AND name = 'tcfgGridColsConfiguration') = 0)
            BEGIN
            CREATE TABLE [dbo].[tcfgGridColsConfiguration](
            [ScreenID] [varchar](20) NOT NULL,
            [GridName] [varchar](20) NOT NULL,
            [ColumnName] [varchar](20) NOT NULL,
            [DefaultWidth] [int] NULL,
            [SavedWidth] [int] NULL,
            [TS_User] [nvarchar](16) NOT NULL,
            [TS_DateTime] [datetime] NOT NULL,
            CONSTRAINT [PK_tcfgGridColsConfiguration] PRIMARY KEY CLUSTERED
            (
            [ScreenID] ASC,
            [GridName] ASC,
            [ColumnName] ASC
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            ) ON [PRIMARY]

            SET ANSI_PADDING OFF

            ALTER TABLE [dbo].[tcfgGridColsConfiguration]  WITH CHECK ADD  CONSTRAINT [FK_tfmwScreens_tcfgGridColsConfiguration] FOREIGN KEY([ScreenID])
            REFERENCES [dbo].[tfmwScreens] ([ScreenID])

            ALTER TABLE [dbo].[tcfgGridColsConfiguration] CHECK CONSTRAINT [FK_tfmwScreens_tcfgGridColsConfiguration]
            END
            GO


            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksOrderTests' AND sc.name = 'Selected') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].twksOrderTests ADD Selected bit NOT NULL default 0
            END
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'Selected') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].tparSavedWSOrderTests ADD Selected bit NULL
            END
            GO

            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparTests' AND sc.name = 'CustomPosition') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].tparTests ADD CustomPosition INT NOT NULL DEFAULT 1
            END
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparTests' AND sc.name = 'Available') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].tparTests ADD Available bit NOT NULL default 1
            END
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparCalculatedTests' AND sc.name = 'CustomPosition') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].tparCalculatedTests ADD CustomPosition INT NOT NULL DEFAULT 1
            END
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparCalculatedTests' AND sc.name = 'Available') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].tparCalculatedTests ADD Available bit NOT NULL default 1
            END
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparISETests' AND sc.name = 'CustomPosition') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].tparISETests ADD CustomPosition INT NOT NULL DEFAULT 1
            END
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparISETests' AND sc.name = 'Available') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].tparISETests ADD Available bit NOT NULL default 1
            END
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparOffSystemTests' AND sc.name = 'CustomPosition') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].tparOffSystemTests ADD CustomPosition INT NOT NULL DEFAULT 1
            END
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparOffSystemTests' AND sc.name = 'Available') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].tparOffSystemTests ADD Available bit NOT NULL default 1
            END
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparTestProfiles' AND sc.name = 'CustomPosition') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].tparTestProfiles ADD CustomPosition INT NOT NULL DEFAULT 1
            END
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparTestProfiles' AND sc.name = 'Available') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].tparTestProfiles ADD Available bit NOT NULL default 1
            END
            GO

            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparControls' AND sc.name = 'ControlLevel') = 0
            BEGIN
            ALTER TABLE [Ax00].[dbo].tparControls ADD ControlLevel tinyint NOT NULL default 1
            END
            GO
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparTestControls' AND sc.name = 'ControlNum') = 1
            BEGIN
            ALTER TABLE [Ax00].[dbo].tparTestControls DROP COLUMN ControlNum
            END
            GO

            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparISETestSamples' AND sc.name = 'TestLongName') = 0
            BEGIN
            ALTER TABLE [dbo].[tparISETestSamples]
            ADD TestLongName nvarchar(80) NULL
            END
            GO

            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisISETestSamples' AND sc.name = 'TestLongName') = 0
            BEGIN
            ALTER TABLE [dbo].[thisISETestSamples]
            ADD TestLongName nvarchar(80) NULL
            END
            GO

            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tqcHistoryTestSamples' AND sc.name = 'TestLongName') = 0
            BEGIN
            ALTER TABLE [dbo].[tqcHistoryTestSamples]
            ADD TestLongName nvarchar(80) NULL
            END
            GO

            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparISETestSamples' AND sc.name = 'SlopeFactorA2') = 0
            BEGIN
            ALTER TABLE [dbo].[tparISETestSamples]
            ADD SlopeFactorA2 real NULL
            END
            GO

            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparISETestSamples' AND sc.name = 'SlopeFactorB2') = 0
            BEGIN
            ALTER TABLE [dbo].[tparISETestSamples]
            ADD SlopeFactorB2 real NULL
            END
            GO

            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisISETestSamples' AND sc.name = 'SlopeFactorA2') = 0
            BEGIN
            ALTER TABLE [dbo].[thisISETestSamples]
            ADD SlopeFactorA2 real NULL
            END
            GO

            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisISETestSamples' AND sc.name = 'SlopeFactorB2') = 0
            BEGIN
            ALTER TABLE [dbo].[thisISETestSamples]
            ADD SlopeFactorB2 real NULL
            END
            GO

            IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vhisTestSamples]'))
            DROP VIEW [dbo].[vhisTestSamples]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vhisTestSamples]
            AS
            SELECT     'STD' AS TestType, TS .HistTestID, TS .TestID, TS .TestName, TS .TestVersionNumber, TS .DecimalsAllowed, NULL AS FormulaText,
            (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, TS .TestLongName
            FROM         thisTestSamples TS LEFT OUTER JOIN
            vcfgTestSortingForReports T ON TS .TestName = T .TestName AND T .TestType = 'STD'
            UNION
            SELECT     'ISE' AS TestType, TS .HistISETestID AS HistTestID, TS .ISETestID AS TestID, TS .ISETestName AS TestName, 0 AS TestVersionNumber, TS .DecimalsAllowed, NULL
            AS FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, TS.TestLongName
            FROM         thisISETestSamples TS LEFT OUTER JOIN
            vcfgTestSortingForReports T ON TS .ISETestName = T .TestName AND T .TestType = 'ISE'
            UNION
            SELECT     'CALC' AS TestType, TS .HistCalcTestID AS HistTestID, TS .CalcTestID AS TestID, TS .CalcTestLongName AS TestName, 0 AS TestVersionNumber,
            TS .DecimalsAllowed, TS .FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, NULL
            AS TestLongName
            FROM         thisCalculatedTests TS LEFT OUTER JOIN
            vcfgTestSortingForReports T ON TS .CalcTestLongName = T .TestName AND T .TestType = 'CALC'
            UNION
            SELECT     'OFFS' AS TestType, TS .HistOffSystemTestID AS HistTestID, TS .OffSystemTestID AS TestID, TS .OffSystemTestName AS TestName, 0 AS TestVersionNumber,
            TS .DecimalsAllowed, NULL AS FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, NULL
            AS TestLongName
            FROM         thisOffSystemTestSamples TS LEFT OUTER JOIN
            vcfgTestSortingForReports T ON TS .OffSystemTestName = T .TestName AND T .TestType = 'OFFS' ;
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vhisWSResults') = 1)
            DROP VIEW [dbo].vhisWSResults
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vhisWSResults] AS
            SELECT  R.HistOrderTestID, R.AnalyzerID, R.WorkSessionID, R.ResultDateTime,
            (CASE WHEN OT.SampleClass = 'PATIENT' AND OT.SampleID IS NOT NULL THEN OT.SampleID
            WHEN OT.SampleClass = 'PATIENT' AND P.PatientID IS NOT NULL THEN P.PatientID
            ELSE NULL END) AS PatientID, P.FirstName, P.LastName, P.Gender, P.DateOfBirth, P.Comments,
            OT.HistPatientID, OT.SampleClass, OT.StatFlag, OT.SpecimenID, OT.SampleType, OT.TestType,
            TS.TestID, TS.TestName, TS.TestLongName, TS.TestVersionNumber, TS.TestPosition, TS.DecimalsAllowed, R.CONCValue,
            (CASE WHEN NOT R.RemarkAlert IS NULL THEN R.RemarkAlert ELSE '' END) AS RemarkAlert,  MD.FixedItemDesc AS MeasureUnit,
            R.MinRefRange, R.MaxRefRange, R.ExportStatus, R.AlarmList, TS.FormulaText, R.MultiPointNumber, R.ManualResultFlag, R.ManualResult, R.ManualResultText,
            R.LISMessageID, OT.LISRequest, OT.ExternalQC, OT.ESOrderID, OT.LISOrderID, OT.ESPatientID, OT.LISPatientID, OT.LISTestName, OT.LISSampleType, OT.LISUnits
            FROM    dbo.thisWSResults AS R INNER JOIN dbo.thisWSOrderTests AS OT ON R.HistOrderTestID = OT.HistOrderTestID
            INNER JOIN dbo.vhisTestSamples AS TS ON OT.HistTestID = TS.HistTestID AND OT.TestType = TS.TestType AND TS.TestVersionNumber = COALESCE (OT.TestVersionNumber, 0)
            LEFT OUTER JOIN dbo.tcfgMasterData AS MD ON MD.SubTableID = 'TEST_UNITS' AND MD.ItemID = OT.MeasureUnit
            LEFT OUTER JOIN dbo.thisPatients AS P ON P.HistPatientID = OT.HistPatientID
            GO

            IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksResultsCTRL]'))
            DROP VIEW [dbo].[vwksResultsCTRL]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vwksResultsCTRL]
            AS
            SELECT     dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
            dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
            dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
            dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
            dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
            dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
            dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
            dbo.twksResults.TS_DateTime, dbo.twksResults.WorkSessionID, dbo.twksResults.AnalyzerID, dbo.tparTestSamples.BlankAbsorbanceLimit,
            dbo.tparTests.KineticBlankLimit, 'NULL' AS CalibratorLotNumber, dbo.twksOrderTests.SampleType, NULL AS TheoricalConcentration,
            dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, dbo.tparTestSamples.FactorLowerLimit, dbo.tparTestSamples.FactorUpperLimit, dbo.tparTests.DecimalsAllowed,
            dbo.tparControls.ControlName, dbo.tparControls.LotNumber AS ControlLotNumber, dbo.tparTestControls.MinConcentration, dbo.tparTestControls.MaxConcentration,
            dbo.twksOrderTests.TestType, dbo.twksResults.Collapsed, dbo.tparTests.TestName, dbo.twksOrderTests.OrderTestStatus,
            dbo.twksWSRepetitionsToAdd.PostDilutionType, dbo.twksOrderTests.TestID, dbo.tparTestSamples.ActiveRangeType, dbo.twksOrderTests.OrderID,
            dbo.twksResults.ManualResult, dbo.twksResults.ManualResultText, dbo.twksOrders.StatFlag, '' AS CalibratorName, '' AS AnalysisMode, dbo.twksResults.CurveSlope,
            dbo.twksResults.CurveOffset, dbo.twksResults.CurveCorrelation, NULL AS CalibratorID, dbo.twksOrders.SampleClass, NULL AS NumberOfCalibrator,
            dbo.twksOrders.PatientID, dbo.twksOrders.SampleID, dbo.twksOrderTests.TubeType, dbo.tparTestSamples.TestLongName, dbo.tparTests.ShortName
            FROM         dbo.twksResults INNER JOIN
            dbo.twksOrderTests ON dbo.twksResults.OrderTestID = dbo.twksOrderTests.OrderTestID INNER JOIN
            dbo.tparTestSamples ON dbo.twksOrderTests.TestID = dbo.tparTestSamples.TestID AND
            dbo.twksOrderTests.SampleType = dbo.tparTestSamples.SampleType INNER JOIN
            dbo.tparTests ON dbo.tparTestSamples.TestID = dbo.tparTests.TestID INNER JOIN
            dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparTests.MeasureUnit LEFT OUTER JOIN
            dbo.twksWSRepetitionsToAdd ON dbo.twksResults.OrderTestID = dbo.twksWSRepetitionsToAdd.OrderTestID INNER JOIN
            dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID INNER JOIN
            dbo.tparControls ON dbo.twksOrderTests.ControlID = dbo.tparControls.ControlID INNER JOIN
            dbo.tparTestControls ON dbo.twksOrderTests.ControlID = dbo.tparTestControls.ControlID AND dbo.twksOrderTests.TestID = dbo.tparTestControls.TestID AND
            dbo.twksOrderTests.SampleType = dbo.tparTestControls.SampleType
            WHERE     (dbo.twksOrderTests.TestType = 'STD') AND (dbo.twksOrders.SampleClass = 'CTRL') AND (dbo.twksOrderTests.TestType = dbo.tparTestControls.TestType)
            UNION
            SELECT     dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
            dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
            dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
            dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
            dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
            dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
            dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
            dbo.twksResults.TS_DateTime, dbo.twksResults.WorkSessionID, dbo.twksResults.AnalyzerID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL
            AS CalibratorLotNumber, dbo.twksOrderTests.SampleType, NULL AS TheoricalConcentration, dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, NULL
            AS FactorLowerLimit, NULL AS FactorUpperLimit, tparISETestSamples.Decimals AS DecimalsAllowed, dbo.tparControls.ControlName,
            dbo.tparControls.LotNumber AS ControlLotNumber, dbo.tparTestControls.MinConcentration, dbo.tparTestControls.MaxConcentration, dbo.twksOrderTests.TestType,
            dbo.twksResults.Collapsed, dbo.tparISETests.Name, dbo.twksOrderTests.OrderTestStatus, dbo.twksWSRepetitionsToAdd.PostDilutionType,
            dbo.twksOrderTests.TestID, dbo.tparISETestSamples.ActiveRangeType, dbo.twksOrderTests.OrderID, dbo.twksResults.ManualResult,
            dbo.twksResults.ManualResultText, dbo.twksOrders.StatFlag, '' AS CalibratorName, '' AS AnalysisMode, dbo.twksResults.CurveSlope, dbo.twksResults.CurveOffset,
            dbo.twksResults.CurveCorrelation, NULL AS CalibratorID, dbo.twksOrders.SampleClass, NULL AS NumberOfCalibrator, dbo.twksOrders.PatientID,
            dbo.twksOrders.SampleID, dbo.twksOrderTests.TubeType, NULL AS TestLongName, dbo.tparISETests.ShortName
            FROM         dbo.twksResults INNER JOIN
            dbo.twksOrderTests ON dbo.twksResults.OrderTestID = dbo.twksOrderTests.OrderTestID INNER JOIN
            dbo.tparISETestSamples ON dbo.twksOrderTests.TestID = dbo.tparISETestSamples.ISETestID AND
            dbo.twksOrderTests.SampleType = dbo.tparISETestSamples.SampleType INNER JOIN
            dbo.tparISETests ON dbo.tparISETestSamples.ISETestID = dbo.tparISETests.ISETestID INNER JOIN
            dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparISETests.Units LEFT OUTER JOIN
            dbo.twksWSRepetitionsToAdd ON dbo.twksResults.OrderTestID = dbo.twksWSRepetitionsToAdd.OrderTestID INNER JOIN
            dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID INNER JOIN
            dbo.tparControls ON dbo.twksOrderTests.ControlID = dbo.tparControls.ControlID INNER JOIN
            dbo.tparTestControls ON dbo.twksOrderTests.ControlID = dbo.tparTestControls.ControlID AND dbo.twksOrderTests.TestID = dbo.tparTestControls.TestID AND
            dbo.twksOrderTests.SampleType = dbo.tparTestControls.SampleType
            WHERE     (dbo.twksOrderTests.TestType = 'ISE') AND (dbo.twksOrders.SampleClass = 'CTRL') AND (dbo.twksOrderTests.TestType = dbo.tparTestControls.TestType)

            GO


            IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksResultsNotCTRL]'))
            DROP VIEW [dbo].[vwksResultsNotCTRL]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vwksResultsNotCTRL]
            AS
            SELECT     dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
            dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
            dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
            dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
            dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
            dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
            dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
            dbo.twksResults.TS_DateTime, dbo.twksResults.WorkSessionID, dbo.twksResults.AnalyzerID, dbo.tparTestSamples.BlankAbsorbanceLimit,
            dbo.tparTests.KineticBlankLimit, dbo.tparCalibrators.LotNumber AS CalibratorLotNumber, dbo.twksOrderTests.SampleType,
            ISNULL(ISNULL(tparTestCalibratorValues_1.TheoricalConcentration,
            (SELECT     TOP (1) dbo.tparTestCalibratorValues.TheoricalConcentration
            FROM          dbo.tparTestCalibrators INNER JOIN
            dbo.tparTestCalibratorValues ON dbo.tparTestCalibrators.TestCalibratorID = dbo.tparTestCalibratorValues.TestCalibratorID
            WHERE      (dbo.tparTestCalibrators.TestID = dbo.tparTestSamples.TestID) AND
            (dbo.tparTestCalibrators.SampleType = dbo.tparTestSamples.SampleTypeAlternative))), 0) AS TheoricalConcentration,
            dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, dbo.tparTestSamples.FactorLowerLimit, dbo.tparTestSamples.FactorUpperLimit, dbo.tparTests.DecimalsAllowed,
            CONVERT(NVARCHAR(16), NULL) AS ControlName, CONVERT(NVARCHAR(16), NULL) AS ControlLotNumber, NULL AS MinConcentration, NULL AS MaxConcentration,
            dbo.twksOrderTests.TestType, dbo.twksResults.Collapsed, dbo.tparTests.TestName, dbo.twksOrderTests.OrderTestStatus,
            dbo.twksWSRepetitionsToAdd.PostDilutionType, dbo.twksOrderTests.TestID, dbo.tparTestSamples.ActiveRangeType, dbo.twksOrderTests.OrderID,
            dbo.twksResults.ManualResult, dbo.twksResults.ManualResultText, dbo.twksOrders.StatFlag, dbo.tparCalibrators.CalibratorName,
            dbo.tfmwMultiLanguageResources.ResourceText AS AnalysisMode, dbo.twksResults.CurveSlope, dbo.twksResults.CurveOffset, dbo.twksResults.CurveCorrelation,
            dbo.tparCalibrators.CalibratorID, dbo.twksOrders.SampleClass, dbo.tparCalibrators.NumberOfCalibrators, dbo.twksOrders.PatientID, dbo.twksOrders.SampleID,
            dbo.twksOrderTests.TubeType, dbo.tparTestSamples.TestLongName, dbo.tparTests.ShortName
            FROM         dbo.tparTestCalibratorValues AS tparTestCalibratorValues_1 RIGHT OUTER JOIN
            dbo.twksResults INNER JOIN
            dbo.twksOrderTests ON dbo.twksResults.OrderTestID = dbo.twksOrderTests.OrderTestID INNER JOIN
            dbo.tparTestSamples ON dbo.twksOrderTests.TestID = dbo.tparTestSamples.TestID AND
            dbo.twksOrderTests.SampleType = dbo.tparTestSamples.SampleType INNER JOIN
            dbo.twksWSOrderTests ON dbo.twksWSOrderTests.OrderTestID = dbo.twksResults.OrderTestID INNER JOIN
            dbo.tparTests ON dbo.tparTestSamples.TestID = dbo.tparTests.TestID INNER JOIN
            dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparTests.MeasureUnit LEFT OUTER JOIN
            dbo.tparTestCalibrators AS tparTestCalibrators_1 ON dbo.tparTestSamples.TestID = tparTestCalibrators_1.TestID AND
            dbo.tparTestSamples.SampleType = tparTestCalibrators_1.SampleType LEFT OUTER JOIN
            dbo.tparCalibrators ON tparTestCalibrators_1.CalibratorID = dbo.tparCalibrators.CalibratorID ON
            tparTestCalibratorValues_1.TestCalibratorID = tparTestCalibrators_1.TestCalibratorID LEFT OUTER JOIN
            dbo.twksWSRepetitionsToAdd ON dbo.twksResults.OrderTestID = dbo.twksWSRepetitionsToAdd.OrderTestID INNER JOIN
            dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID LEFT OUTER JOIN
            dbo.tfmwPreloadedMasterData ON dbo.tparTests.AnalysisMode = dbo.tfmwPreloadedMasterData.ItemID AND
            dbo.tfmwPreloadedMasterData.SubTableID = 'ANALYSIS_MODES' LEFT OUTER JOIN
            dbo.tcfgUserSettings ON dbo.tcfgUserSettings.SettingID = 'CURRENT_LANGUAGE' LEFT OUTER JOIN
            dbo.tfmwMultiLanguageResources ON dbo.tfmwPreloadedMasterData.ResourceID = dbo.tfmwMultiLanguageResources.ResourceID AND
            dbo.tfmwMultiLanguageResources.LanguageID = dbo.tcfgUserSettings.CurrentValue
            WHERE     (dbo.twksOrderTests.TestType = 'STD') AND (dbo.twksOrders.SampleClass != 'CTRL')

            GO


            IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksCalcResults]'))
            DROP VIEW [dbo].[vwksCalcResults]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vwksCalcResults]
            AS
            SELECT dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
            dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
            dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
            dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
            dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
            dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
            dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
            dbo.twksResults.TS_DateTime, dbo.tparCalculatedTests.CalcTestLongName AS TestName, dbo.twksOrderTests.SampleType,
            dbo.tparCalculatedTests.Decimals AS DecimalsAllowed, dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, dbo.twksOrderTests.AnalyzerID,
            dbo.twksOrderTests.TestType, 0 AS TheoricalConcentration, dbo.twksOrderCalculatedTests.OrderTestID AS STDOrderTestID, dbo.twksOrderTests.TestID,
            dbo.tparCalculatedTests.ActiveRangeType, dbo.twksOrderTests.OrderID, dbo.twksWSOrderTests.WorkSessionID, dbo.twksOrders.StatFlag,
            dbo.twksOrders.SampleClass, dbo.twksResults.Collapsed, ISNULL(dbo.twksOrders.PatientID, dbo.twksOrders.SampleID) AS PatientID, dbo.tparCalculatedTests.CalcTestName AS ShortName
            FROM   dbo.twksResults INNER JOIN dbo.twksOrderCalculatedTests ON dbo.twksResults.OrderTestID = dbo.twksOrderCalculatedTests.CalcOrderTestID
            INNER JOIN dbo.twksOrderTests ON dbo.twksOrderCalculatedTests.CalcOrderTestID = dbo.twksOrderTests.OrderTestID
            INNER JOIN dbo.tparCalculatedTests ON dbo.twksOrderTests.TestID = dbo.tparCalculatedTests.CalcTestID
            INNER JOIN dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparCalculatedTests.MeasureUnit
            INNER JOIN dbo.twksWSOrderTests ON dbo.twksOrderTests.OrderTestID = dbo.twksWSOrderTests.OrderTestID
            INNER JOIN dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID;

            GO


            IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksWSISEOffSystemResults]'))
            DROP VIEW [dbo].[vwksWSISEOffSystemResults]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vwksWSISEOffSystemResults]
            AS
            SELECT     PartialWSEResult.OrderTestID, PartialWSEResult.RerunNumber, PartialWSEResult.MultiPointNumber, PartialWSEResult.ValidationStatus,
            PartialWSEResult.AcceptedResultFlag, PartialWSEResult.TestVersion, PartialWSEResult.ManualResultFlag, PartialWSEResult.UserComment,
            PartialWSEResult.ExportStatus, PartialWSEResult.ExportDateTime, PartialWSEResult.Printed, PartialWSEResult.ABSValue, PartialWSEResult.ABS_Error,
            PartialWSEResult.SubstrateDepletion, PartialWSEResult.ABS_Initial, PartialWSEResult.ABS_MainFilter, PartialWSEResult.ABS_WorkReagent,
            PartialWSEResult.CalibratorFactor, PartialWSEResult.CalibrationError, PartialWSEResult.CalibratorBlankAbsUsed, PartialWSEResult.CurveResultsID,
            PartialWSEResult.CurveGrowthType, PartialWSEResult.CurveType, PartialWSEResult.CurveAxisXType, PartialWSEResult.CurveAxisYType,
            PartialWSEResult.RelativeErrorCurve, PartialWSEResult.CONC_VALUE, PartialWSEResult.ManualResultText, PartialWSEResult.CONC_Error,
            PartialWSEResult.ResultDateTime, PartialWSEResult.TS_User, PartialWSEResult.TS_DateTime, PartialWSEResult.SampleType, PartialWSEResult.AnalyzerID,
            PartialWSEResult.TestType, PartialWSEResult.TestID, PartialWSEResult.OrderID, PartialWSEResult.TheoricalConcentration, PartialWSEResult.ControlNum,
            PartialWSEResult.WorkSessionID, PartialWSEResult.StatFlag, PartialWSEResult.SampleClass, PartialWSEResult.OrderTestStatus,
            (CASE PartialWSEResult.TestType WHEN 'ISE' THEN IT.Name ELSE OST.Name END) AS TestName,
            (CASE PartialWSEResult.TestType WHEN 'ISE' THEN
            (SELECT     cfg.FixedItemDesc
            FROM          tcfgMasterData cfg
            WHERE      cfg.SubTableID = 'TEST_UNITS' AND cfg.ItemID = IT.Units) ELSE
            (SELECT     cfg.FixedItemDesc
            FROM          tcfgMasterData cfg
            WHERE      cfg.SubTableID = 'TEST_UNITS' AND cfg.ItemID = OST.Units) END) AS MeasureUnit,
            (CASE PartialWSEResult.TestType WHEN 'ISE' THEN ITS.Decimals ELSE OST.Decimals END) AS DecimalsAllowed,
            (CASE PartialWSEResult.TestType WHEN 'ISE' THEN ITS.ActiveRangeType ELSE OSTS.ActiveRangeType END) AS ActiveRangeType,
            PartialWSEResult.Collapsed,
            PartialWSEResult.PatientName,
            PartialWSEResult.PatientID,
            (CASE PartialWSEResult.TestType WHEN 'ISE' THEN IT.ShortName ELSE OST.ShortName END) AS ShortName
            FROM         (SELECT     R.OrderTestID, R.RerunNumber, R.MultiPointNumber, R.ValidationStatus, R.AcceptedResultFlag, R.TestVersion, R.ManualResultFlag, R.UserComment,
            R.ExportStatus, R.ExportDateTime, R.Printed, R.ABSValue, R.ABS_Error, R.SubstrateDepletion, R.ABS_Initial, R.ABS_MainFilter, R.ABS_WorkReagent,
            R.CalibratorFactor, R.CalibrationError, R.CalibratorBlankAbsUsed, R.CurveResultsID, R.CurveGrowthType, R.CurveType, R.CurveAxisXType,
            R.CurveAxisYType, R.RelativeErrorCurve, (CASE OT.TestType WHEN 'ISE' THEN R.CONC_Value ELSE R.ManualResult END) AS CONC_VALUE,
            R.ManualResultText, R.CONC_Error, R.ResultDateTime, R.TS_User, R.TS_DateTime, R.Collapsed, OT.SampleType, OT.AnalyzerID, OT.TestType,
            OT.TestID, OT.OrderID, OT.OrderTestStatus, 0 AS TheoricalConcentration, 0 AS ControlNum, WSOT.WorkSessionID, O.StatFlag, O.SampleClass,
            (CASE WHEN O.PatientID IS NOT NULL THEN P.FirstName + ' ' + P.LastName ELSE O.SampleID END) AS PatientName, ISNULL(O.PatientID, O.SampleID)
            AS PatientID
            FROM          dbo.twksResults AS R INNER JOIN
            dbo.twksOrderTests AS OT ON R.OrderTestID = OT.OrderTestID INNER JOIN
            dbo.twksWSOrderTests AS WSOT ON OT.OrderTestID = WSOT.OrderTestID INNER JOIN
            dbo.twksOrders AS O ON OT.OrderID = O.OrderID LEFT OUTER JOIN
            dbo.tparPatients AS P ON O.PatientID = P.PatientID
            WHERE      (O.SampleClass = 'PATIENT') AND (OT.TestType = 'ISE') OR
            (OT.TestType = 'OFFS')) AS PartialWSEResult LEFT OUTER JOIN
            dbo.tparISETests AS IT ON PartialWSEResult.TestID = IT.ISETestID LEFT OUTER JOIN
            dbo.tparISETestSamples AS ITS ON IT.ISETestID = ITS.ISETestID AND PartialWSEResult.SampleType = ITS.SampleType LEFT OUTER JOIN
            dbo.tparOffSystemTests AS OST ON PartialWSEResult.TestID = OST.OffSystemTestID LEFT OUTER JOIN
            dbo.tparOffSystemTestSamples AS OSTS ON OST.OffSystemTestID = OSTS.OffSystemTestID AND PartialWSEResult.SampleType = OSTS.SampleType

            GO


            IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksResults]'))
            DROP VIEW [dbo].[vwksResults]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vwksResults]
            AS
            SELECT     *
            FROM         dbo.vwksResultsNotCTRL
            UNION ALL
            SELECT     *
            FROM         dbo.vwksResultsCTRL

            GO


            IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksCompleteResults]'))
            DROP VIEW [dbo].[vwksCompleteResults]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vwksCompleteResults]
            AS
            SELECT DISTINCT
            OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
            Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
            CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
            TS_DateTime, AnalyzerID, WorkSessionID, BlankAbsorbanceLimit, KineticBlankLimit, CalibratorLotNumber, SampleType, TheoricalConcentration, MeasureUnit,
            FactorLowerLimit, FactorUpperLimit, DecimalsAllowed, ControlName, ControlLotNumber, MinConcentration, MaxConcentration, TestType, Collapsed, TestName,
            OrderTestStatus, PostDilutionType, TestID, ActiveRangeType, OrderID, ManualResult, ManualResultText, StatFlag, CalibratorName, AnalysisMode, CurveSlope,
            CurveOffset, CurveCorrelation, CalibratorID, SampleClass, NumberOfCalibrators, NULL AS STDOrderTestID, NULL AS PatientName, ISNULL(PatientID, SampleID)
            AS PatientID, NULL AS ControlNum, TestLongName, ShortName
            FROM         dbo.vwksResults
            UNION ALL
            SELECT DISTINCT
            OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
            Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
            CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
            TS_DateTime, AnalyzerID, WorkSessionID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL AS CalibratorLotNumber, SampleType,
            TheoricalConcentration, MeasureUnit, NULL AS FactorLowerLimit, NULL AS FactorUpperLimit, DecimalsAllowed, NULL AS ControlName, NULL
            AS ControlLotNumber, NULL AS MinConcentration, NULL AS MaxConcentration, TestType, Collapsed, TestName, NULL AS OrderTestStatus, NULL AS PostDilutionType,
            TestID, ActiveRangeType, OrderID, NULL AS ManualResult, NULL AS ManualResultText, StatFlag, NULL AS CalibratorName, NULL AS AnalysisMode, NULL
            AS CurveSlope, NULL AS CurveOffset, NULL AS CurveCorrelation, NULL AS CalibratorID, SampleClass, NULL AS NumberOfCalibrators, STDOrderTestID, NULL
            AS PatientName, PatientID, NULL AS ControlNum, NULL AS TestLongName, ShortName
            FROM         dbo.vwksCalcResults
            UNION ALL
            SELECT DISTINCT
            OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
            Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
            CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
            TS_DateTime, AnalyzerID, WorkSessionID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL AS CalibratorLotNumber, SampleType,
            TheoricalConcentration, MeasureUnit, NULL AS FactorLowerLimit, NULL AS FactorUpperLimit, DecimalsAllowed, NULL AS ControlName, NULL
            AS ControlLotNumber, NULL AS MinConcentration, NULL AS MaxConcentration, TestType, Collapsed, TestName, OrderTestStatus, NULL AS PostDilutionType, TestID,
            ActiveRangeType, OrderID, NULL AS ManualResult, ManualResultText, StatFlag, NULL AS CalibratorName, NULL AS AnalysisMode, NULL AS CurveSlope, NULL
            AS CurveOffset, NULL AS CurveCorrelation, NULL AS CalibratorID, SampleClass, NULL AS NumberOfCalibrators, NULL AS STDOrderTestID, PatientName, PatientID,
            ControlNum, NULL AS TestLongName, ShortName
            FROM         vwksWSISEOffSystemResults;

            GO

            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSResults' AND sc.name = 'ManualResultText' AND sc.xtype = 231) = 0)
            BEGIN
            ALTER TABLE [Ax00].[dbo].thisWSResults ALTER COLUMN ManualResultText NVARCHAR(15) COLLATE Modern_Spanish_CI_AS NULL
            END

            GO

            IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksWSISEOffSystemResults]'))
            DROP VIEW [dbo].[vwksWSISEOffSystemResults]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vwksWSISEOffSystemResults]
            AS
            SELECT     PartialWSEResult.OrderTestID, PartialWSEResult.RerunNumber, PartialWSEResult.MultiPointNumber, PartialWSEResult.ValidationStatus,
            PartialWSEResult.AcceptedResultFlag, PartialWSEResult.TestVersion, PartialWSEResult.ManualResultFlag, PartialWSEResult.UserComment,
            PartialWSEResult.ExportStatus, PartialWSEResult.ExportDateTime, PartialWSEResult.Printed, PartialWSEResult.ABSValue, PartialWSEResult.ABS_Error,
            PartialWSEResult.SubstrateDepletion, PartialWSEResult.ABS_Initial, PartialWSEResult.ABS_MainFilter, PartialWSEResult.ABS_WorkReagent,
            PartialWSEResult.CalibratorFactor, PartialWSEResult.CalibrationError, PartialWSEResult.CalibratorBlankAbsUsed, PartialWSEResult.CurveResultsID,
            PartialWSEResult.CurveGrowthType, PartialWSEResult.CurveType, PartialWSEResult.CurveAxisXType, PartialWSEResult.CurveAxisYType,
            PartialWSEResult.RelativeErrorCurve, PartialWSEResult.CONC_VALUE, PartialWSEResult.ManualResultText, PartialWSEResult.CONC_Error,
            PartialWSEResult.ResultDateTime, PartialWSEResult.TS_User, PartialWSEResult.TS_DateTime, PartialWSEResult.SampleType, PartialWSEResult.AnalyzerID,
            PartialWSEResult.TestType, PartialWSEResult.TestID, PartialWSEResult.OrderID, PartialWSEResult.TheoricalConcentration, PartialWSEResult.ControlNum,
            PartialWSEResult.WorkSessionID, PartialWSEResult.StatFlag, PartialWSEResult.SampleClass, PartialWSEResult.OrderTestStatus,
            (CASE PartialWSEResult.TestType WHEN 'ISE' THEN IT.Name ELSE OST.Name END) AS TestName, (CASE PartialWSEResult.TestType WHEN 'ISE' THEN
            (SELECT     cfg.FixedItemDesc
            FROM          tcfgMasterData cfg
            WHERE      cfg.SubTableID = 'TEST_UNITS' AND cfg.ItemID = IT.Units) ELSE
            (SELECT     cfg.FixedItemDesc
            FROM          tcfgMasterData cfg
            WHERE      cfg.SubTableID = 'TEST_UNITS' AND cfg.ItemID = OST.Units) END) AS MeasureUnit,
            (CASE PartialWSEResult.TestType WHEN 'ISE' THEN ITS.Decimals ELSE OST.Decimals END) AS DecimalsAllowed,
            (CASE PartialWSEResult.TestType WHEN 'ISE' THEN ITS.ActiveRangeType ELSE OSTS.ActiveRangeType END) AS ActiveRangeType, PartialWSEResult.Collapsed,
            PartialWSEResult.PatientName, PartialWSEResult.PatientID, (CASE PartialWSEResult.TestType WHEN 'ISE' THEN IT.ShortName ELSE OST.ShortName END)
            AS ShortName, (CASE PartialWSEResult.TestType WHEN 'ISE' THEN ITS.TestLongName ELSE OST.Name END) AS TestLongName
            FROM         (SELECT     R.OrderTestID, R.RerunNumber, R.MultiPointNumber, R.ValidationStatus, R.AcceptedResultFlag, R.TestVersion, R.ManualResultFlag, R.UserComment,
            R.ExportStatus, R.ExportDateTime, R.Printed, R.ABSValue, R.ABS_Error, R.SubstrateDepletion, R.ABS_Initial, R.ABS_MainFilter, R.ABS_WorkReagent,
            R.CalibratorFactor, R.CalibrationError, R.CalibratorBlankAbsUsed, R.CurveResultsID, R.CurveGrowthType, R.CurveType, R.CurveAxisXType,
            R.CurveAxisYType, R.RelativeErrorCurve, (CASE OT.TestType WHEN 'ISE' THEN R.CONC_Value ELSE R.ManualResult END) AS CONC_VALUE,
            R.ManualResultText, R.CONC_Error, R.ResultDateTime, R.TS_User, R.TS_DateTime, R.Collapsed, OT.SampleType, OT.AnalyzerID, OT.TestType,
            OT.TestID, OT.OrderID, OT.OrderTestStatus, 0 AS TheoricalConcentration, 0 AS ControlNum, WSOT.WorkSessionID, O.StatFlag, O.SampleClass,
            (CASE WHEN O.PatientID IS NOT NULL THEN P.FirstName + ' ' + P.LastName ELSE O.SampleID END) AS PatientName, ISNULL(O.PatientID, O.SampleID)
            AS PatientID
            FROM          dbo.twksResults AS R INNER JOIN
            dbo.twksOrderTests AS OT ON R.OrderTestID = OT.OrderTestID INNER JOIN
            dbo.twksWSOrderTests AS WSOT ON OT.OrderTestID = WSOT.OrderTestID INNER JOIN
            dbo.twksOrders AS O ON OT.OrderID = O.OrderID LEFT OUTER JOIN
            dbo.tparPatients AS P ON O.PatientID = P.PatientID
            WHERE      (O.SampleClass = 'PATIENT') AND (OT.TestType = 'ISE') OR
            (OT.TestType = 'OFFS')) AS PartialWSEResult LEFT OUTER JOIN
            dbo.tparISETests AS IT ON PartialWSEResult.TestID = IT.ISETestID LEFT OUTER JOIN
            dbo.tparISETestSamples AS ITS ON IT.ISETestID = ITS.ISETestID AND PartialWSEResult.SampleType = ITS.SampleType LEFT OUTER JOIN
            dbo.tparOffSystemTests AS OST ON PartialWSEResult.TestID = OST.OffSystemTestID LEFT OUTER JOIN
            dbo.tparOffSystemTestSamples AS OSTS ON OST.OffSystemTestID = OSTS.OffSystemTestID AND PartialWSEResult.SampleType = OSTS.SampleType

            GO

            IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksCompleteResults]'))
            DROP VIEW [dbo].[vwksCompleteResults]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vwksCompleteResults]
            AS
            SELECT DISTINCT
            OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
            Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
            CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
            TS_DateTime, AnalyzerID, WorkSessionID, BlankAbsorbanceLimit, KineticBlankLimit, CalibratorLotNumber, SampleType, TheoricalConcentration, MeasureUnit,
            FactorLowerLimit, FactorUpperLimit, DecimalsAllowed, ControlName, ControlLotNumber, MinConcentration, MaxConcentration, TestType, Collapsed, TestName,
            OrderTestStatus, PostDilutionType, TestID, ActiveRangeType, OrderID, ManualResult, ManualResultText, StatFlag, CalibratorName, AnalysisMode, CurveSlope,
            CurveOffset, CurveCorrelation, CalibratorID, SampleClass, NumberOfCalibrators, NULL AS STDOrderTestID, NULL AS PatientName, ISNULL(PatientID, SampleID)
            AS PatientID, NULL AS ControlNum, TestLongName, ShortName
            FROM         dbo.vwksResults
            UNION ALL
            SELECT DISTINCT
            OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
            Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
            CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
            TS_DateTime, AnalyzerID, WorkSessionID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL AS CalibratorLotNumber, SampleType,
            TheoricalConcentration, MeasureUnit, NULL AS FactorLowerLimit, NULL AS FactorUpperLimit, DecimalsAllowed, NULL AS ControlName, NULL
            AS ControlLotNumber, NULL AS MinConcentration, NULL AS MaxConcentration, TestType, Collapsed, TestName, NULL AS OrderTestStatus, NULL AS PostDilutionType,
            TestID, ActiveRangeType, OrderID, NULL AS ManualResult, NULL AS ManualResultText, StatFlag, NULL AS CalibratorName, NULL AS AnalysisMode, NULL
            AS CurveSlope, NULL AS CurveOffset, NULL AS CurveCorrelation, NULL AS CalibratorID, SampleClass, NULL AS NumberOfCalibrators, STDOrderTestID, NULL
            AS PatientName, PatientID, NULL AS ControlNum, NULL AS TestLongName, ShortName
            FROM         dbo.vwksCalcResults
            UNION ALL
            SELECT DISTINCT
            OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
            Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
            CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
            TS_DateTime, AnalyzerID, WorkSessionID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL AS CalibratorLotNumber, SampleType,
            TheoricalConcentration, MeasureUnit, NULL AS FactorLowerLimit, NULL AS FactorUpperLimit, DecimalsAllowed, NULL AS ControlName, NULL
            AS ControlLotNumber, NULL AS MinConcentration, NULL AS MaxConcentration, TestType, Collapsed, TestName, OrderTestStatus, NULL AS PostDilutionType, TestID,
            ActiveRangeType, OrderID, NULL AS ManualResult, ManualResultText, StatFlag, NULL AS CalibratorName, NULL AS AnalysisMode, NULL AS CurveSlope, NULL
            AS CurveOffset, NULL AS CurveCorrelation, NULL AS CalibratorID, SampleClass, NULL AS NumberOfCalibrators, NULL AS STDOrderTestID, PatientName, PatientID,
            ControlNum, TestLongName, ShortName
            FROM         vwksWSISEOffSystemResults;
            GO


            IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vhisTestSamples]'))
            DROP VIEW [dbo].[vhisTestSamples]
            GO
            USE [Ax00]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vhisTestSamples]
            AS
            SELECT     'STD' AS TestType, TS .HistTestID, TS .TestID, TS .TestName, TS .TestVersionNumber, TS .DecimalsAllowed, NULL AS FormulaText,
            (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, TS .TestLongName, Ts.CalibPointUsed
            FROM         thisTestSamples TS LEFT OUTER JOIN
            vcfgTestSortingForReports T ON TS .TestName = T .TestName AND T .TestType = 'STD'
            UNION
            SELECT     'ISE' AS TestType, TS .HistISETestID AS HistTestID, TS .ISETestID AS TestID, TS .ISETestName AS TestName, 0 AS TestVersionNumber, TS .DecimalsAllowed, NULL
            AS FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, TS.TestLongName, NULL CalibPointUsed
            FROM         thisISETestSamples TS LEFT OUTER JOIN
            vcfgTestSortingForReports T ON TS .ISETestName = T .TestName AND T .TestType = 'ISE'
            UNION
            SELECT     'CALC' AS TestType, TS .HistCalcTestID AS HistTestID, TS .CalcTestID AS TestID, TS .CalcTestLongName AS TestName, 0 AS TestVersionNumber,
            TS .DecimalsAllowed, TS .FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, NULL
            AS TestLongName, NULL CalibPointUsed
            FROM         thisCalculatedTests TS LEFT OUTER JOIN
            vcfgTestSortingForReports T ON TS .CalcTestLongName = T .TestName AND T .TestType = 'CALC'
            UNION
            SELECT     'OFFS' AS TestType, TS .HistOffSystemTestID AS HistTestID, TS .OffSystemTestID AS TestID, TS .OffSystemTestName AS TestName, 0 AS TestVersionNumber,
            TS .DecimalsAllowed, NULL AS FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, NULL
            AS TestLongName, NULL CalibPointUsed
            FROM         thisOffSystemTestSamples TS LEFT OUTER JOIN
            vcfgTestSortingForReports T ON TS .OffSystemTestName = T .TestName AND T .TestType = 'OFFS'
            GO


            IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vhisWSBlankCalibResults]'))
            DROP VIEW [dbo].[vhisWSBlankCalibResults]
            GO
            USE [Ax00]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vhisWSBlankCalibResults]
            AS
            SELECT DISTINCT
            hres.HistOrderTestID, hres.AnalyzerID, hres.ResultDateTime, hres.ABSValue, hres.ABSWorkReagent, hres.KineticBlankLimit, hres.ABSInitial, hres.ABSMainFilter,
            hres.BlankAbsorbanceLimit, hres.AlarmList, hres.CalibratorFactor, hres.FactorLowerLimit, hres.FactorUpperLimit, hot.SampleClass, hot.SampleType, hts.TestName,
            tcfg.FixedItemDesc AS MeasureUnit, hca.CalibratorName, hca.LotNumber, hca.NumberOfCalibrators, htc.TheoreticalConcentration, hres.MultiPointNumber,
            hres.WorkSessionID, hts.CalibPointUsed, hts.DecimalsAllowed, hres.RemarkAlert, htc.TestVersionNumber, hot.TestType, hts.TestID, hts.TestPosition, hts.TestLongName
            FROM         dbo.thisWSResults AS hres
            INNER JOIN dbo.thisWSOrderTests AS hot ON hres.HistOrderTestID = hot.HistOrderTestID AND hres.AnalyzerID = hot.AnalyzerID AND hres.WorkSessionID = hot.WorkSessionID
            --INNER JOIN dbo.thisTestSamples AS hts ON hot.HistTestID = hts.HistTestID AND hot.TestVersionNumber = hts.TestVersionNumber AND hot.SampleType = hts.SampleType
            INNER JOIN dbo.vhisTestSamples AS hts ON hot.HistTestID = hts.HistTestID AND hot.TestType = hts.TestType AND hts.TestVersionNumber = COALESCE (hot.TestVersionNumber, 0)
            LEFT OUTER JOIN dbo.thisCalibrators AS hca ON hot.HistCalibratorID = hca.HistCalibratorID
            LEFT OUTER JOIN dbo.thisTestCalibratorsValues AS htc ON hot.HistCalibratorID = htc.HistCalibratorID AND hot.SampleType = htc.SampleType AND hot.TestVersionNumber = htc.TestVersionNumber AND hot.HistTestID = htc.HistTestID AND hres.MultiPointNumber = htc.CalibratorNum
            LEFT OUTER JOIN dbo.tcfgMasterData AS tcfg ON tcfg.SubTableID = 'TEST_UNITS' AND tcfg.ItemID = hot.MeasureUnit
            WHERE     (hot.SampleClass &lt;&gt; 'PATIENT')
            GO

            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE  so.xtype = 'U' AND so.name = 'tqcResults' AND sc.name = 'CtrlsSendingGroup' AND sc.xtype = 48) = 1)
            ALTER TABLE dbo.tqcResults ALTER COLUMN CtrlsSendingGroup INT NULL
            GO
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE  so.xtype = 'U' AND so.name = 'twksWSOrderTests' AND sc.name = 'CtrlsSendingGroup' AND sc.xtype = 48) = 1)
            ALTER TABLE dbo.twksWSOrderTests ALTER COLUMN CtrlsSendingGroup INT NULL
            GO
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE  so.xtype = 'U' AND so.name = 'tqcResults' AND sc.name = 'SampleClass') = 1)
            ALTER TABLE dbo.tqcResults DROP COLUMN SampleClass
            GO
          </StructureScript>
          <DataScript />
        </CommonRevision>
      </CommonRevisions>
      <DataRevisions />
    </Release>
    <Release Version="03.02.00">
      <CommonRevisions>
        <CommonRevision SequenceNumber="0" JiraID="BA-2469">
          <PrerequisiteScript />
          <IntegrityScript />
          <StructureScript>
            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparOffSystemTests' AND sc.name = 'PreloadedOffSystemTest') = 0
            BEGIN
            ALTER TABLE [dbo].tparOffSystemTests ADD PreloadedOffSystemTest bit NOT NULL
            CONSTRAINT PreloadedOffSystemTest_Default DEFAULT 0;
            END
            GO

            IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparOffSystemTests' AND sc.name = 'BiosystemsID') = 0
            BEGIN
            ALTER TABLE [dbo].tparOffSystemTests ADD BiosystemsID int NULL
            END
            GO

            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tcfgAnalyzers') = 1)
            BEGIN
            IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
            WHERE so.xtype = 'U' AND so.name = 'tcfgAnalyzers' AND sc.name = 'FirmwareVersion') = 1)
            BEGIN
            ALTER TABLE [dbo].tcfgAnalyzers ALTER COLUMN FirmwareVersion  [varchar] (10) NOT NULL
            END
            END
            GO

            IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksOperateCalculatedTest]'))
            DROP VIEW [dbo].[vwksOperateCalculatedTest]
            GO
            USE [Ax00]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vwksOperateCalculatedTest]
            AS
            SELECT     dbo.twksOrderTests.OrderTestID, (CASE dbo.twksOrderTests.TestType WHEN 'OFFS' THEN dbo.twksResults.ManualResult ELSE dbo.twksResults.CONC_Value END)
            AS Result, dbo.twksOrderTests.TestID, dbo.twksOrderTests.SampleType, dbo.twksOrderTests.TestType
            FROM         dbo.twksOrderTests INNER JOIN
            dbo.twksResults ON dbo.twksOrderTests.OrderTestID = dbo.twksResults.OrderTestID
            WHERE     (dbo.twksResults.AcceptedResultFlag = 1) AND (dbo.twksResults.CONC_Error IS NULL)
            GO

            USE [Ax00]
            GO
            IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'V' AND name = 'vhisWSBlankCalibResults') = 1)
            DROP VIEW [dbo].[vhisWSBlankCalibResults]
            GO
            SET ANSI_NULLS ON
            GO
            SET QUOTED_IDENTIFIER ON
            GO
            CREATE VIEW [dbo].[vhisWSBlankCalibResults]	AS
            SELECT DISTINCT hres.HistOrderTestID, hres.AnalyzerID, hres.ResultDateTime, hres.ABSValue, hres.ABSWorkReagent, hres.KineticBlankLimit, hres.ABSInitial, hres.ABSMainFilter,
            hres.BlankAbsorbanceLimit, hres.AlarmList, hres.FactorLowerLimit, hres.FactorUpperLimit, hot.SampleClass, hot.SampleType, hts.TestName,
            tcfg.FixedItemDesc AS MeasureUnit, hca.CalibratorName, hca.LotNumber, hca.NumberOfCalibrators, htc.TheoreticalConcentration, hres.MultiPointNumber,
            hres.WorkSessionID, hts.CalibPointUsed, hts.DecimalsAllowed, hres.RemarkAlert, htc.TestVersionNumber, hot.TestType, hts.TestID, hts.TestPosition,
            hts.TestLongName, hres.ManualResultFlag, (CASE WHEN hres.ManualResultFlag = 1 THEN hres.ManualResult ELSE hres.CalibratorFactor END) AS CalibratorFactor
            FROM            dbo.thisWSResults AS hres INNER JOIN dbo.thisWSOrderTests AS hot ON hres.HistOrderTestID = hot.HistOrderTestID AND hres.AnalyzerID = hot.AnalyzerID
            AND hres.WorkSessionID = hot.WorkSessionID
            INNER JOIN dbo.vhisTestSamples AS hts ON hot.HistTestID = hts.HistTestID AND hot.TestType = hts.TestType
            AND hts.TestVersionNumber = COALESCE (hot.TestVersionNumber, 0)
            LEFT OUTER JOIN dbo.thisCalibrators AS hca ON hot.HistCalibratorID = hca.HistCalibratorID
            LEFT OUTER JOIN dbo.thisTestCalibratorsValues AS htc ON hot.HistCalibratorID = htc.HistCalibratorID
            AND hot.SampleType = htc.SampleType
            AND hot.TestVersionNumber = htc.TestVersionNumber
            AND hot.HistTestID = htc.HistTestID
            AND hres.MultiPointNumber = htc.CalibratorNum
            LEFT OUTER JOIN dbo.tcfgMasterData AS tcfg ON tcfg.SubTableID = 'TEST_UNITS' AND tcfg.ItemID = hot.MeasureUnit
            WHERE     		  hot.SampleClass &lt;&gt; 'PATIENT'
          </StructureScript>
          <DataScript />
        </CommonRevision>
      </CommonRevisions>
      <DataRevisions />
    </Release>
  </Releases>
</DatabaseUpdatesManager>