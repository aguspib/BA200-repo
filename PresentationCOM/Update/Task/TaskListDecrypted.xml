<?xml version="1.0" standalone="yes"?>
<TaskListDS xmlns="http://tempuri.org/TaskListDS.xsd">
  <CommonTask>
    <StructureScript>
      IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_tfmwMultiLanguageResources_ResourceID]') AND type = 'D')
      BEGIN
      ALTER TABLE [dbo].[tfmwMultiLanguageResources] DROP CONSTRAINT [DF_tfmwMultiLanguageResources_ResourceID]
      END
      GO
      IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_tfmwMultiLanguageResources_OnlyService]') AND type = 'D')
      BEGIN
      ALTER TABLE [dbo].[tfmwMultiLanguageResources] DROP CONSTRAINT [DF_tfmwMultiLanguageResources_OnlyService]
      END
      GO
      IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tfmwMultiLanguageResources]') AND type in (N'U'))
      DROP TABLE [dbo].[tfmwMultiLanguageResources]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      SET ANSI_PADDING ON
      GO
      CREATE TABLE [dbo].[tfmwMultiLanguageResources](
      [ResourceID] [varchar](35) NOT NULL,
      [LanguageID] [varchar](15) NOT NULL,
      [ResourceText] [nvarchar](500) NOT NULL,
      [ApplicationVersion] [varchar](20) NULL,
      [Translated] [bit] NULL,
      [TS_DateTime] [datetime] NULL,
      [OnlyService] [bit] NOT NULL,
      [CreationDate] [datetime] NULL,
      [CreationUser] [varchar](5) NULL,
      [TranslatedDate] [datetime] NULL,
      [TranslatedUser] [varchar](5) NULL,
      [TS_User] [varchar](5) NULL,
      CONSTRAINT [PK_tfmwMultiLanguageResources] PRIMARY KEY CLUSTERED
      (
      [ResourceID] ASC,
      [LanguageID] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]
      GO
      SET ANSI_PADDING OFF
      GO
      ALTER TABLE [dbo].[tfmwMultiLanguageResources] ADD  CONSTRAINT [DF_tfmwMultiLanguageResources_ResourceID]  DEFAULT ((0)) FOR [ResourceID]
      GO
      ALTER TABLE [dbo].[tfmwMultiLanguageResources] ADD  CONSTRAINT [DF_tfmwMultiLanguageResources_OnlyService]  DEFAULT ((0)) FOR [OnlyService]
      GO

      IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tfmwPreloadedMasterData]') AND type in (N'U'))
      DROP TABLE [dbo].[tfmwPreloadedMasterData]

      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      SET ANSI_PADDING ON
      GO
      CREATE TABLE [dbo].[tfmwPreloadedMasterData](
      [SubTableID] [varchar](20) NOT NULL,
      [ItemID] [varchar](15) NOT NULL,
      [ResourceID] [varchar](35) NULL,
      [FixedItemDesc] [nvarchar](255) NOT NULL,
      [MultiLanguageFlag] [bit] NOT NULL,
      [Position] [tinyint] NULL,
      [Status] [bit] NOT NULL,
      CONSTRAINT [PK_tfmwPreloadedMasterData] PRIMARY KEY CLUSTERED
      (
      [SubTableID] ASC,
      [ItemID] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]
      GO
      SET ANSI_PADDING OFF
      GO

      IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tfmwSwParameters]') AND type in (N'U'))
      DROP TABLE [dbo].[tfmwSwParameters]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      SET ANSI_PADDING ON
      GO
      CREATE TABLE [dbo].[tfmwSwParameters](
      [ParameterName] [varchar](50) NOT NULL,
      [DependByModel] [bit] NOT NULL,
      [AnalyzerModel] [varchar](10) NULL,
      [ValueNumeric] [real] NULL,
      [ValueText] [nvarchar](50) NULL,
      [Description] [varchar](255) NULL,
      [ParameterID] [int] IDENTITY(1,1) NOT NULL,
      CONSTRAINT [PK_tfmwSwParameters_1] PRIMARY KEY CLUSTERED
      (
      [ParameterID] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]
      GO
      SET ANSI_PADDING OFF
      GO
      IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tfmwFieldLimits]') AND type in (N'U'))
      DROP TABLE [dbo].[tfmwFieldLimits]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      SET ANSI_PADDING ON
      GO
      CREATE TABLE [dbo].[tfmwFieldLimits](
      [LimitID] [varchar](30) NOT NULL,
      [LimitDescription] [nvarchar](255) NULL,
      [MinValue] [real] NOT NULL,
      [MaxValue] [real] NOT NULL,
      [StepValue] [real] NULL,
      [DefaultValue] [real] NULL,
      [DecimalsAllowed] [tinyint] NOT NULL,
      [AnalyzerModel] [varchar](10) NULL,
      [IndexID] [int] IDENTITY(1,1) NOT NULL,
      CONSTRAINT [PK_tfmwFieldLimits_1] PRIMARY KEY CLUSTERED
      (
      [IndexID] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]
      GO
      SET ANSI_PADDING OFF
      GO
    </StructureScript>
    <UpdateScript>
      INSERT INTO [Ax00].[dbo].[tfmwMultiLanguageResources]
      SELECT * FROM [Ax00TEM].[dbo].[tfmwMultiLanguageResources]
      GO
      INSERT INTO  [Ax00].[dbo].[tfmwPreloadedMasterData]
      SELECT * FROM [Ax00TEM].[dbo].[tfmwPreloadedMasterData]
      GO
      INSERT INTO  [Ax00].[dbo].[tfmwSwParameters] (ParameterName , DependByModel ,AnalyzerModel ,ValueNumeric ,ValueText , Description )
      SELECT ParameterName , DependByModel ,AnalyzerModel ,ValueNumeric ,ValueText , Description  FROM [Ax00TEM].[dbo].[tfmwSwParameters]
      GO
      INSERT INTO  [Ax00].[dbo].[tfmwFieldLimits] (LimitID, LimitDescription ,MinValue , MaxValue ,StepValue ,DefaultValue ,DecimalsAllowed ,AnalyzerModel )
      SELECT LimitID, LimitDescription ,MinValue , MaxValue ,StepValue ,DefaultValue ,DecimalsAllowed ,AnalyzerModel FROM [Ax00TEM].[dbo].[tfmwFieldLimits]
      GO
      DELETE tparContaminations
      WHERE tparContaminations.ReagentContaminatorID IN( SELECT reagentID FROM tparReagents WHERE tparReagents.PreloadedReagent = 1)
      AND tparContaminations.ReagentContaminatedID  IN (SELECT reagentID FROM tparReagents WHERE tparReagents.PreloadedReagent = 1)
      GO
      DELETE tparContaminations
      WHERE tparContaminations.TestContaminaCuvetteID IN( SELECT TestID FROM tparTests WHERE tparTests.PreloadedTest  = 1)
      GO
    </UpdateScript>
  </CommonTask>
  <AppVersion>
    <Version>2.0</Version>
    <StructureScript>
      IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Ax00].[dbo].[ApplicationSetting]') AND type in (N'U'))
      DROP TABLE [Ax00].[dbo].[ApplicationSetting]
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparCalculatedTests' AND sc.name = 'BiosystemsID') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].[tparCalculatedTests] ADD [BiosystemsID] int NULL
      END
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'twksXMLMessages') = 0)
      BEGIN
      SET ANSI_NULLS ON
      SET QUOTED_IDENTIFIER ON

      SET ANSI_PADDING ON
      CREATE TABLE [Ax00].[dbo].[twksXMLMessages]([MessageID] [varchar] (40) NOT NULL,
      [XMLMessage] [xml] NOT NULL,
      [Status] [varchar](15) NOT NULL,

      CONSTRAINT [PK_twksXMLMessages] PRIMARY KEY CLUSTERED([MessageID] ASC)
      WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]
      SET ANSI_PADDING OFF
      END
      GO
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksOrderTests' AND sc.name = 'LISRequest') = 0)
      ALTER TABLE Ax00.dbo.twksOrderTests ADD LISRequest BIT DEFAULT ((0))
      GO
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksWSExecutions' AND sc.name = 'LockedByLIS') = 0)
      ALTER TABLE Ax00.dbo.twksWSExecutions ADD LockedByLIS BIT DEFAULT ((0))
      GO
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksOrderTests' AND sc.name = 'ExternalQC') = 0)
      ALTER TABLE dbo.twksOrderTests ADD ExternalQC BIT DEFAULT ((0))
      GO

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparTests' AND sc.name = 'LISValue') = 0
      BEGIN
      ALTER TABLE [dbo].[tparTests] ADD [LISValue] nvarchar(50) NULL
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparISETests' AND sc.name = 'LISValue') = 0
      BEGIN
      ALTER TABLE [dbo].[tparISETests] ADD [LISValue] nvarchar(50) NULL
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparCalculatedTests' AND sc.name = 'LISValue') = 0
      BEGIN
      ALTER TABLE [dbo].[tparCalculatedTests] ADD [LISValue] nvarchar(50) NULL
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparOffSystemTests' AND sc.name = 'LISValue') = 0
      BEGIN
      ALTER TABLE [dbo].[tparOffSystemTests] ADD [LISValue] nvarchar(50) NULL
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tcfgMasterData' AND sc.name = 'LISValue') = 0
      BEGIN
      ALTER TABLE [dbo].[tcfgMasterData] ADD [LISValue] nvarchar(50) NULL
      END
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tparSavedWSOrderTests') = 1)
      BEGIN
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'PatientIDType') = 0)
      ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [PatientIDType] [varchar] (15) NULL
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'AwosID') = 0)
      ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [AwosID] [varchar] (40) NULL
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'SpecimenID') = 0)
      ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [SpecimenID] [nvarchar] (30) NULL
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'ESOrderID') = 0)
      ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [ESOrderID] [nvarchar] (40) NULL
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'LISOrderID') = 0)
      ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [LISOrderID] [nvarchar] (50) NULL
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'ESPatientID') = 0)
      ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [ESPatientID] [nvarchar] (40) NULL
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'LISPatientID') = 0)
      ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [LISPatientID]  [nvarchar] (50) NULL
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'CalcTestIDs') = 0)
      ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [CalcTestIDs]  [varchar] (25) NULL
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'CalcTestNames') = 0)
      ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [CalcTestNames]  [nvarchar] (50) NULL
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'ExternalQC') = 0)
      ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [ExternalQC] [bit] NULL
      END

      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'twksWSBarcodePositionsWithNoRequests') = 1)
      BEGIN
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
      WHERE so.xtype = 'U' AND so.name = 'twksWSBarcodePositionsWithNoRequests' AND sc.name = 'LISStatus') = 0)
      BEGIN
      ALTER TABLE [Ax00].[dbo].twksWSBarcodePositionsWithNoRequests ADD LISStatus  [varchar] (15) NULL
      END

      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
      WHERE so.xtype = 'U' AND so.name = 'twksWSBarcodePositionsWithNoRequests' AND sc.name = 'BarcodeInfo') = 0)
      BEGIN
      ALTER TABLE [Ax00].[dbo].twksWSBarcodePositionsWithNoRequests ADD BarcodeInfo  [nvarchar](30) NULL
      END

      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
      WHERE so.xtype = 'U' AND so.name = 'twksWSBarcodePositionsWithNoRequests' AND sc.name = 'MessageID') = 0)
      BEGIN
      ALTER TABLE [Ax00].[dbo].twksWSBarcodePositionsWithNoRequests ADD MessageID [varchar](40) NULL
      END

      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
      WHERE so.xtype = 'U' AND so.name = 'twksWSBarcodePositionsWithNoRequests' AND sc.name = 'ExternalPID') = 1)
      BEGIN
      ALTER TABLE [Ax00].[dbo].twksWSBarcodePositionsWithNoRequests ALTER COLUMN ExternalPID [nvarchar] (30) NULL
      END
      END
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tparSavedWS') = 1)
      BEGIN
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
      WHERE so.xtype = 'U' AND so.name = 'tparSavedWS' AND sc.name = 'SavedWSName') = 1)
      ALTER TABLE [Ax00].[dbo].tparSavedWS ALTER COLUMN [SavedWSName] [nvarchar] (40) NULL
      END
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tparSavedWSOrderTests') = 1)
      BEGIN
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
      WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'CreationOrder') = 1)
      BEGIN
      ALTER TABLE [Ax00].[dbo].[tparSavedWSOrderTests] ALTER COLUMN CreationOrder int NULL
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'D' AND name = 'DF_tparSavedWSOrderTests_CreationOrder') = 0)
      ALTER TABLE [Ax00].[dbo].[tparSavedWSOrderTests] ADD  CONSTRAINT [DF_tparSavedWSOrderTests_CreationOrder]  DEFAULT ((1)) FOR [CreationOrder]
      END
      END
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'twksOrderTestsLISInfo') = 0)
      BEGIN
      SET ANSI_NULLS ON
      SET QUOTED_IDENTIFIER ON

      SET ANSI_PADDING ON
      CREATE TABLE [dbo].[twksOrderTestsLISInfo](
      [OrderTestID]    [int]           NOT NULL,
      [RerunNumber]	  [tinyint]		     NOT NULL,
      [AwosID]         [varchar]  (40) NOT NULL,
      [SpecimenID]     [nvarchar] (30) NOT NULL,
      [ESOrderID]      [nvarchar] (40) NOT NULL,
      [LISOrderID]     [nvarchar] (50) NULL,
      [ESPatientID]    [nvarchar] (40) NOT NULL,
      [LISPatientID]   [nvarchar] (30) NULL,

      CONSTRAINT [PK_twksOrderTestsLISInfo] PRIMARY KEY CLUSTERED([OrderTestID], [RerunNumber] ASC)
      WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]
      SET ANSI_PADDING OFF

      ALTER TABLE [dbo].[twksOrderTestsLISInfo]  WITH CHECK ADD  CONSTRAINT [OrderTestsID_FK] FOREIGN KEY([OrderTestID])
      REFERENCES  [dbo].[twksOrderTests] ([OrderTestID])
      END

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'twksXMLMessages') = 1)
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksXMLMessages' AND sc.name = 'TS_DateTime') = 0)
      ALTER TABLE [dbo].[twksXMLMessages] ADD [TS_DateTime] [datetime] NOT NULL
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'twksResults') = 1)
      BEGIN
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksResults' AND sc.name = 'LISMessageID') = 0)
      ALTER TABLE [dbo].[twksResults] ADD [LISMessageID] [varchar] (40) NULL
      END
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vparAllTestsByType') = 1)
      DROP VIEW [dbo].[vparAllTestsByType]
      GO

      SET ANSI_NULLS ON
      GO

      SET QUOTED_IDENTIFIER ON
      GO

      CREATE VIEW [dbo].[vparAllTestsByType] AS
      SELECT     'STD' AS TestType, TestID AS TestID, ShortName AS TestShortName, TestName AS TestName, LISValue, InUse, 1 As UniqueSampleType
      FROM         [dbo].tparTests
      UNION
      SELECT     'ISE' AS TestType, ISETestID AS TestID, ShortName AS TestShortName, [Name] AS TestName, LISValue, InUse, 1 As UniqueSampleType
      FROM         [dbo].tparISETests
      UNION
      SELECT     'CALC' AS TestType, CalcTestID AS TestID, CalcTestName AS TestShortName, CalcTestLongName AS TestName, LISValue, InUse, UniqueSampleType
      FROM         [dbo].tparCalculatedTests
      UNION
      SELECT     'OFFS' AS TestType, OffSystemTestID AS TestID, ShortName AS TestShortName, [Name] AS TestName, LISValue, InUse, 1 As UniqueSampleType
      FROM         [dbo].tparOffSystemTests
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vcfgLISMappings') = 1)
      DROP VIEW [dbo].[vcfgLISMappings]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vcfgLISMappings') = 1)
      DROP VIEW [dbo].[vcfgLISMappings]
      GO

      SET ANSI_NULLS ON
      GO

      SET QUOTED_IDENTIFIER ON
      GO

      CREATE VIEW [dbo].[vcfgLISMappings] AS
      SELECT MD.SubtableId AS ValueType, MD.ItemID AS ValueID, NULL AS LanguageID, MD.fixedItemDesc AS LongName, MD.LISValue
      FROM         [dbo].[tcfgMasterData] AS MD
      WHERE     MD.SubTableID = 'TEST_UNITS' AND MD.ItemID != 'BLANK'
      UNION
      SELECT     MD.SubtableId AS ValueType, MD.ItemID AS ValueID, MR.LanguageID AS LanguageID, MR.ResourceText AS LongName, MD.LISValue
      FROM         [dbo].[tcfgMasterData] AS MD INNER JOIN
      [dbo].tfmwMultiLanguageResources MR ON MD.ResourceID = MR.ResourceID
      WHERE     MD.SubTableID = 'SAMPLE_TYPES' AND MD.fixedItemDesc != 'Empty'
      UNION
      SELECT     MD.SubtableId AS ValueType, MD.ItemID AS ValueID,
      (SELECT     CurrentValue
      FROM          tcfgUserSettings
      WHERE      SettingID = 'CURRENT_LANGUAGE') AS LanguageID, MD.FixedItemDesc AS LongName, MD.LISValue
      FROM         [dbo].[tcfgMasterData] AS MD
      WHERE     MD.SubTableID = 'SAMPLE_TYPES' AND MD.fixedItemDesc != 'Empty' AND MD.MultiLanguageFlag = 0
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'twksWSRequiredElements') = 1)
      BEGIN
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksWSRequiredElements' AND sc.name = 'SpecimenIDList') = 0)
      ALTER TABLE [dbo].[twksWSRequiredElements] ADD [SpecimenIDList] [nvarchar] (100) NULL
      END
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'thisWSResults') = 1)
      BEGIN
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSResults' AND sc.name = 'LISMessageID') = 0)
      ALTER TABLE [dbo].[thisWSResults] ADD [LISMessageID] [varchar] (40) NULL
      END
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'thisWSOrderTests') = 1)
      BEGIN
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'LISRequest') = 0)
      ALTER TABLE [dbo].[thisWSOrderTests] ADD [LISRequest] [bit] NULL

      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'ExternalQC') = 0)
      ALTER TABLE [dbo].[thisWSOrderTests] ADD [ExternalQC] [bit] NULL

      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'SpecimenID') = 0)
      ALTER TABLE [dbo].[thisWSOrderTests] ADD [SpecimenID] [nvarchar] (30) NULL

      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'AwosID') = 0)
      ALTER TABLE [dbo].[thisWSOrderTests] ADD [AwosID] [varchar] (40) NULL

      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'ESOrderID') = 0)
      ALTER TABLE [dbo].[thisWSOrderTests] ADD [ESOrderID] [nvarchar] (40) NULL

      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'ESPatientID') = 0)
      ALTER TABLE [dbo].[thisWSOrderTests] ADD [ESPatientID] [nvarchar] (40) NULL

      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'LISOrderID') = 0)
      ALTER TABLE [dbo].[thisWSOrderTests] ADD [LISOrderID] [nvarchar] (50) NULL

      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'LISPatientID') = 0)
      ALTER TABLE [dbo].[thisWSOrderTests] ADD [LISPatientID] [nvarchar] (50) NULL

      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'LISTestName') = 0)
      ALTER TABLE [dbo].[thisWSOrderTests] ADD [LISTestName] [nvarchar] (50) NULL

      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'LISSampleType') = 0)
      ALTER TABLE [dbo].[thisWSOrderTests] ADD [LISSampleType] [nvarchar] (50) NULL

      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'LISUnits') = 0)
      ALTER TABLE [dbo].[thisWSOrderTests] ADD [LISUnits] [nvarchar] (50) NULL
      END
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vhisWSResults') = 1)
      DROP VIEW [dbo].[vhisWSResults]
      GO

      SET ANSI_NULLS ON
      GO

      SET QUOTED_IDENTIFIER ON
      GO

      CREATE VIEW [dbo].[vhisWSResults] AS
      SELECT R.HistOrderTestID, R.AnalyzerID, R.WorkSessionID, R.ResultDateTime,
      (CASE WHEN OT.SampleClass = 'PATIENT' AND OT.SampleID IS NOT NULL THEN OT.SampleID
      WHEN OT.SampleClass = 'PATIENT' AND P.PatientID IS NOT NULL THEN P.PatientID
      ELSE NULL END) AS PatientID,
      OT.HistPatientID,
      OT.SampleClass,
      OT.StatFlag,
      OT.TestType,
      OT.SampleType,
      TS.TestID,
      TS.TestName,
      TS.TestVersionNumber,
      (CASE WHEN NOT r.RemarkAlert IS NULL THEN r.RemarkAlert
      ELSE CASE WHEN r.AlarmList IS NULL OR r.AlarmList='' THEN ''
      ELSE '*' END
      END) AS RemarkAlert,
      R.CONCValue,
      TS.DecimalsAllowed,
      MD.FixedItemDesc AS MeasureUnit,
      R.MinRefRange,
      R.MaxRefRange,
      R.ExportStatus,
      R.AlarmList,
      TS.FormulaText,
      R.MultiPointNumber,
      R.ManualResultFlag,
      R.ManualResult,
      R.ManualResultText,
      R.LISMessageID,
      OT.LISRequest,
      OT.ExternalQC,
      OT.ESOrderID,
      OT.LISOrderID,
      OT.ESPatientID,
      OT.LISPatientID,
      OT.LISTestName,
      OT.LISSampleType,
      OT.LISUnits
      FROM thisWSResults R INNER JOIN thisWSOrderTests OT ON R.HistOrderTestID = OT.HistOrderTestID
      INNER JOIN vhisTestSamples  TS ON OT.HistTestID = TS.HistTestID AND OT.TestType = TS.TestType AND TS.TestVersionNumber = COALESCE(OT.TestVersionNumber, 0)
      LEFT  JOIN tcfgMasterData   MD ON MD.SubTableID = 'TEST_UNITS' AND MD.ItemID = OT.MeasureUnit
      LEFT  JOIN thisPatients     P  ON P.HistPatientID = OT.HistPatientID
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tparSavedWSOrderTests') = 1)
      BEGIN
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'DeletedTestFlag') = 0)
      ALTER TABLE [dbo].[tparSavedWSOrderTests] ADD [DeletedTestFlag] [bit] NULL
      END
      GO
    </StructureScript>
    <UpdateScript>
      UPDATE  Ax00.dbo.tfmwVersions SET UserSoftware = '2.0.0', ServiceSoftware = '1.0.2', Firmware = '2.00'
      GO
      UPDATE  Ax00.dbo.tparCalculatedTests SET PreloadedCalculatedTest =1  WHERE CalcTestID &lt;= 11
      GO
      UPDATE Ax00.dbo.tparCalculatedTests SET BiosystemsID = 1 WHERE CalcTestID = 1
      GO
      UPDATE Ax00.dbo.tparCalculatedTests SET BiosystemsID = 2 WHERE CalcTestID = 2
      GO
      UPDATE Ax00.dbo.tparCalculatedTests SET BiosystemsID = 3 WHERE CalcTestID = 3
      GO
      UPDATE Ax00.dbo.tparCalculatedTests SET BiosystemsID = 4 WHERE CalcTestID = 4
      GO
      UPDATE Ax00.dbo.tparCalculatedTests SET BiosystemsID = 5 WHERE CalcTestID = 5
      GO
      UPDATE Ax00.dbo.tparCalculatedTests SET BiosystemsID = 6 WHERE CalcTestID = 6
      GO
      UPDATE Ax00.dbo.tparCalculatedTests SET BiosystemsID = 7 WHERE CalcTestID = 7
      GO
      UPDATE Ax00.dbo.tparCalculatedTests SET BiosystemsID = 8 WHERE CalcTestID = 8
      GO
      UPDATE Ax00.dbo.tparCalculatedTests SET BiosystemsID = 9 WHERE CalcTestID = 9
      GO
      UPDATE Ax00.dbo.tparCalculatedTests SET BiosystemsID = 10 WHERE CalcTestID = 10
      GO
      UPDATE Ax00.dbo.tparCalculatedTests SET BiosystemsID = 11 WHERE CalcTestID = 11
      GO
      UPDATE  Ax00.dbo.tparReagents SET PreloadedReagent = 1 WHERE CodeTest = 558
      GO
      UPDATE Ax00.dbo.tparReagents SET PreloadedReagent = 1 WHERE CodeTest =811
      GO
      UPDATE Ax00.dbo.tparReagents SET PreloadedReagent = 1 WHERE CodeTest = 588
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tcfgMasterData' AND sc.name = 'LISValue') = 1
      BEGIN
      UPDATE [dbo].tcfgMasterData SET LISValue = ItemID WHERE SubTableID='SAMPLE_TYPES'  AND LISValue IS NULL
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tcfgMasterData' AND sc.name = 'LISValue') = 1
      BEGIN
      UPDATE [dbo].tcfgMasterData SET LISValue = FixedItemDesc WHERE SubTableID='TEST_UNITS' AND LISValue IS NULL
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparTests' AND sc.name = 'LISValue') = 1
      BEGIN
      UPDATE [dbo].tparTests SET LISValue = TestName
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparISETests' AND sc.name = 'LISValue') = 1
      BEGIN
      UPDATE [dbo].tparISETests SET LISValue = Name
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparCalculatedTests' AND sc.name = 'LISValue') = 1
      BEGIN
      UPDATE [dbo].tparCalculatedTests SET LISValue = CalcTestName
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tparOffSystemTests' AND sc.name = 'LISValue') = 1
      BEGIN
      UPDATE [dbo].tparOffSystemTests SET LISValue = Name
      END
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_HOST_QUERY') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_HOST_QUERY','BOOLEAN','1',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_ACCEPT_UNSOLICITED') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_ACCEPT_UNSOLICITED','BOOLEAN','1',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_DOWNLOAD_ONRUNNING') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_DOWNLOAD_ONRUNNING','BOOLEAN','1',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_WORKING_MODE_RERUNS') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_WORKING_MODE_RERUNS','CHAR','BOTH',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_WORKING_MODE_REFLEX_TESTS') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_WORKING_MODE_REFLEX_TESTS','CHAR','0',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_UPLOAD_UNSOLICITED_PAT_RES') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_UPLOAD_UNSOLICITED_PAT_RES','BOOLEAN','1',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_UPLOAD_UNSOLICITED_QC_RES') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_UPLOAD_UNSOLICITED_QC_RES','BOOLEAN','0',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_ENABLE_COMMS') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_ENABLE_COMMS','BOOLEAN','0',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_DATA_TRANSMISSION_TYPE') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_DATA_TRANSMISSION_TYPE','CHAR','TCPIP-Client',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_HOST_NAME') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_HOST_NAME','CHAR','localhost',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_TCP_PORT') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_TCP_PORT','INTEGER','1024',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_TCP_PORT2') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_TCP_PORT2','INTEGER','5000',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_STORAGE_RECEPTION_MAX_MSG') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_STORAGE_RECEPTION_MAX_MSG','INTEGER','9999',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_STORAGE_TRANS_MAX_MSG') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_STORAGE_TRANS_MAX_MSG','INTEGER','9999',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_BAx00maxTimeToRespond') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_BAx00maxTimeToRespond','INTEGER','1',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_PROTOCOL_NAME') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_PROTOCOL_NAME','CHAR','ASTM',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_IHE_COMPLIANT') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_IHE_COMPLIANT','BOOLEAN','1',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_CODEPAGE') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_CODEPAGE','CHAR','65001',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_HOST_QUERY_PACKAGE') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_HOST_QUERY_PACKAGE','INTEGER','10',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_maxTimeWaitingForResponse') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_maxTimeWaitingForResponse','INTEGER','10',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_maxTimeWaitingForACK') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_maxTimeWaitingForACK','INTEGER','60',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_HOST_ID') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_HOST_ID','CHAR','Host',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_HOST_PROVIDER') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_HOST_PROVIDER','CHAR','Host provider',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_INSTRUMENT_ID') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_INSTRUMENT_ID','CHAR','BA400',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_INSTRUMENT_PROVIDER') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_INSTRUMENT_PROVIDER','CHAR','Biosystems',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_FIELD_SEPARATOR_HL7') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_FIELD_SEPARATOR_HL7','CHAR','|',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_COMP_SEPARATOR_HL7') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_COMP_SEPARATOR_HL7','CHAR','^',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_REP_SEPARATOR_HL7') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_REP_SEPARATOR_HL7','CHAR','~',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_SPEC_SEPARATOR_HL7') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_SPEC_SEPARATOR_HL7','CHAR','\',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_SUBC_SEPARATOR_HL7') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_SUBC_SEPARATOR_HL7','CHAR','&amp;',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_FIELD_SEPARATOR_ASTM') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_FIELD_SEPARATOR_ASTM','CHAR','|',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_COMP_SEPARATOR_ASTM') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_COMP_SEPARATOR_ASTM','CHAR','^',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_REP_SEPARATOR_ASTM') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_REP_SEPARATOR_ASTM','CHAR','\',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_SPEC_SEPARATOR_ASTM') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_SPEC_SEPARATOR_ASTM','CHAR','&amp;',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO

      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_LOG_FOLDER') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_LOG_FOLDER','CHAR','C:\TEMP',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_LOW_LEVEL_LOG') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_LOW_LEVEL_LOG','BOOLEAN','0',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_WITHFILES_MODE') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_WITHFILES_MODE','BOOLEAN','0',1,'BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM dbo.tcfgUserSettings WHERE SettingID ='BARCODE_SAMPLEID_FLAG')) = 0
      INSERT INTO [Ax00].[dbo].[tcfgUserSettings]
      ([SettingID], [SettingDataType], [CurrentValue], [Status], [TS_User], [TS_DateTime])
      VALUES
      ('BARCODE_SAMPLEID_FLAG','BOOLEAN','0','1','BIOSYSTEMS','2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'CONFIRM_BARCODE_WARNING') = 0)
      INSERT INTO [Ax00].[dbo].[tfmwMessages]
      ([MessageID],[MessageType],[ResourceID])
      VALUES
      ('CONFIRM_BARCODE_WARNING','Question' ,'MSG_CONFIRM_BARCODE_WARNING')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_TRACE_LEVEL') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_TRACE_LEVEL',	'STRING',	'NONE',	'1',	'BIOSYSTEMS',	'2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'PENDING_ORDER_DOWNLOAD') = 0)
      INSERT INTO [dbo].[tfmwMessages] ([MessageID],[MessageType],[ResourceID])
      VALUES ('PENDING_ORDER_DOWNLOAD','Question','MSG_PENDING_ORDER_DOWNLOAD')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'LIS_MAX_ORDER_DOWNLOAD_RUNNING') = 0)
      INSERT INTO [dbo].[tcfgUserSettings]
      ([SettingID],[SettingDataType],[CurrentValue],[Status],[TS_User],[TS_DateTime])
      VALUES
      ('LIS_MAX_ORDER_DOWNLOAD_RUNNING','INTEGER',100,1,'BIOSYSTEMS', '2013-03-04 10:46:58.000')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'LIS_STORAGE_LIMIT') = 0)
      INSERT INTO [dbo].[tfmwMessages] ([MessageID],[MessageType],[ResourceID])
      VALUES ('LIS_STORAGE_LIMIT', 'Error', 'MSG_STORAGE_LIMIT')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'RESET_WS_FAILED') = 0)
      INSERT INTO [dbo].[tfmwMessages] ([MessageID],[MessageType],[ResourceID])
      VALUES ('RESET_WS_FAILED', 'Warning', 'MSG_RESET_WS_FAILED')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tfmwAlarms] WHERE [AlarmID] = 'DS_NO_VOLUME_WARN') = 1)
      UPDATE [dbo].[tfmwAlarms] SET [OnRunningSound]= 1 WHERE [AlarmID] = 'DS_NO_VOLUME_WARN'
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tfmwAlarms] WHERE [AlarmID] = 'R1_NO_VOLUME_WARN') = 1)
      UPDATE [dbo].[tfmwAlarms] SET [OnRunningSound]= 1 WHERE [AlarmID] = 'R1_NO_VOLUME_WARN'
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tfmwAlarms] WHERE [AlarmID] = 'R2_NO_VOLUME_WARN') = 1)
      UPDATE [dbo].[tfmwAlarms] SET [OnRunningSound]= 1 WHERE [AlarmID] = 'R2_NO_VOLUME_WARN'
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tfmwAlarms] WHERE [AlarmID] = 'S_NO_VOLUME_WARN') = 1)
      UPDATE [dbo].[tfmwAlarms] SET [OnRunningSound]= 1 WHERE [AlarmID] = 'S_NO_VOLUME_WARN'
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'LIS_STORAGE_LIMIT') = 0)
      INSERT INTO [dbo].[tfmwMessages] (MessageID, MessageType, ResourceID)
      VALUES ('LIS_STORAGE_LIMIT', 'Error', 'MSG_STORAGE_LIMIT')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'RESET_WS_FAILED') = 0)
      INSERT INTO [dbo].[tfmwMessages] (MessageID, MessageType, ResourceID)
      VALUES ('RESET_WS_FAILED', 'Warning', 'MSG_RESET_WS_FAILED')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'REMOVE_NOTINUSE') = 0)
      INSERT INTO [dbo].[tfmwMessages] (MessageID, MessageType, ResourceID)
      VALUES ('REMOVE_NOTINUSE', 'Warning', 'MSG_REMOVE_NOTINUSE')
      GO
      IF ((SELECT COUNT(*) FROM dbo.tcfgBarCodeSampleTypesMapping WHERE SampleType = 'SEM') = 0)
      INSERT INTO dbo.tcfgBarCodeSampleTypesMapping
      (SampleType, ActiveSampleType, ExternalSampleType)
      VALUES('SEM', 1, NULL)
      GO
      IF ((SELECT COUNT(*) FROM dbo.tcfgBarCodeSampleTypesMapping WHERE SampleType = 'LIQ') = 0)
      INSERT INTO dbo.tcfgBarCodeSampleTypesMapping
      (SampleType, ActiveSampleType, ExternalSampleType)
      VALUES('LIQ', 1, NULL)
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'LIS_MAPPING_WARNING') = 0)
      INSERT INTO [dbo].[tfmwMessages] (MessageID, MessageType, ResourceID)
      VALUES ('LIS_MAPPING_WARNING', 'Warning', 'MSG_LIS_MAPPING_WARNING')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'LIS_DUPLICATED_NAME') = 0)
      INSERT INTO [dbo].[tfmwMessages] (MessageID, MessageType, ResourceID)
      VALUES ('LIS_DUPLICATED_NAME', 'Warning', 'MSG_FILE_EXIST')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].tcfgMasterData WHERE SubTableID = 'SAMPLE_TYPES' AND ItemID = 'SEM') = 0)
      INSERT INTO Ax00.dbo.tcfgMasterData
      (SubTableID,ItemID,LoadStatus,ResourceID,FixedItemDesc,MultiLanguageFlag,Position,Status,TS_User,TS_DateTime,LISValue)
      VALUES
      ('SAMPLE_TYPES',	'SEM',	'AP', 'MAD_SAMPLE_TYPES_SEM',	'Semen',	1,	7,	1,	'BIOSYSTEMS',	'009-06-19 13:27:00.000',	'SEM')
      GO
      IF ((SELECT COUNT(*) FROM [dbo].tcfgMasterData WHERE SubTableID = 'SAMPLE_TYPES' AND ItemID = 'LIQ') = 0)
      INSERT INTO Ax00.dbo.tcfgMasterData
      (SubTableID,ItemID,LoadStatus,ResourceID,FixedItemDesc,MultiLanguageFlag,Position,Status,TS_User,TS_DateTime,LISValue)
      VALUES
      ('SAMPLE_TYPES',	'LIQ',	'AP', 'MAD_SAMPLE_TYPES_LIQ',	'Biological Liquids',	1,	6,	1,	'BIOSYSTEMS',	'009-06-19 13:27:00.000',	'LIQ')
      GO
      IF ((SELECT COUNT(*) FROM tfmwPreloadedMasterData WHERE SubtableID = 'ICON_PATHS' AND ItemID = 'HQ' ) = 0)
      INSERT INTO tfmwPreloadedMasterData
      VALUES ('ICON_PATHS', 'HQ', NULL, 'HQ.png', 0, 0, 1)
      GO
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
      WHERE so.xtype = 'U' AND so.name = 'twksOrderTests' AND sc.name = 'LISRequest') = 1)
      UPDATE dbo.twksOrderTests SET LISRequest = 'False' WHERE LISRequest IS NULL
      GO
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
      WHERE so.xtype = 'U' AND so.name = 'twksOrderTests' AND sc.name = 'ExternalQC') = 1)
      UPDATE dbo.twksOrderTests SET ExternalQC = 'False' WHERE ExternalQC IS NULL
      GO
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
      WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'ExternalQC') = 1)
      UPDATE dbo.tparSavedWSOrderTests SET ExternalQC = 'False' WHERE ExternalQC IS NULL
      GO
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
      WHERE so.xtype = 'U' AND so.name = 'tparSavedWSOrderTests' AND sc.name = 'DeletedTestFlag') = 1)
      UPDATE dbo.tparSavedWSOrderTests SET DeletedTestFlag = 'False' WHERE DeletedTestFlag IS NULL
      GO
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
      WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'ExternalQC') = 1)
      UPDATE dbo.thisWSOrderTests SET ExternalQC = 'False' WHERE ExternalQC IS NULL
      GO
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
      WHERE so.xtype = 'U' AND so.name = 'thisWSOrderTests' AND sc.name = 'LISRequest') = 1)
      UPDATE dbo.thisWSOrderTests SET LISRequest = 'False' WHERE LISRequest IS NULL
      GO
      IF ((SELECT COUNT(*) FROM [dbo].tcfgUserSettings WHERE [SettingID] = 'LIS_CODEPAGE') = 1)
      UPDATE tcfgUserSettings SET CurrentValue = '28591' WHERE [SettingID] = 'LIS_CODEPAGE'
      GO
      UPDATE dbo.tcfgUserSettings SET CurrentValue = '30' WHERE SettingID = 'BARCODE_FULL_TOTAL'
      GO
    </UpdateScript>
  </AppVersion>
  <AppVersion>
    <Version>2.1</Version>
    <StructureScript>
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'P' AND name = 'DeleteHistPatientData') = 1)
      DROP PROCEDURE DeleteHistPatientData
      GO

      CREATE PROCEDURE DeleteHistPatientData AS
      BEGIN
      DECLARE @myAnalyzerID NVARCHAR(25), @myWorkSessionID VARCHAR(10), @myHistOTID INT

      BEGIN TRANSACTION DeleteHis

      -- Search all Historic Order Tests which results have been deleted that are
      -- included in the Formula of not deleted Calculated Tests
      DECLARE calcToDEL CURSOR FOR
      SELECT AnalyzerID, WorkSessionID, HistOrderTestIDCALC FROM thisWSCalcTestsRelations
      WHERE  HistOrderTestID NOT IN (SELECT HistOrderTestID FROM thisWSResults)

      OPEN calcToDEL
      FETCH NEXT FROM calcToDEL INTO @myAnalyzerID, @myWorkSessionID, @myHistOTID
      WHILE @@FETCH_STATUS = 0
      BEGIN
      -- Delete Results for the Historic Order Test
      DELETE FROM thisWSResults
      WHERE  AnalyzerID      = @myAnalyzerID
      AND    WorkSessionID   = @myWorkSessionID
      AND    HistOrderTestID = @myHistOTID

      FETCH NEXT FROM calcToDEL INTO @myAnalyzerID, @myWorkSessionID, @myHistOTID
      END
      CLOSE calcToDEL
      DEALLOCATE calcToDEL

      -- Delete all Readings for the Historic Order Tests that have been deleted
      --DELETE FROM thisWSReadings
      --WHERE  HistOrderTestID NOT IN (SELECT HistOrderTestID FROM thisWSResults)

      -- Delete all Executions for the Historic Order Tests that have been deleted
      --DELETE FROM thisWSExecutions
      --WHERE  HistOrderTestID NOT IN (SELECT HistOrderTestID FROM thisWSResults)

      -- Delete all Adjust Base Lines for the Executions that have been deleted
      --DELETE FROM thisAdjustBaseLines
      --WHERE HistAdjustBaseLineID NOT IN (SELECT HistAdjustBaseLineID FROM thisWSExecutions)

      -- Delete all Curve Results (for Multipoint Calibrators; it works only when
      -- the stored procedure is called for automatic deletion of Calibrator results)
      DELETE FROM thisWSCurveResults
      WHERE  HistOrderTestID NOT IN (SELECT HistOrderTestID FROM thisWSResults)

      -- Delete all links with Historic Order Tests included in the Formula of
      -- Calculated Tests which results have been deleted
      DELETE FROM thisWSCalcTestsRelations
      WHERE  HistOrderTestIDCALC NOT IN (SELECT HistOrderTestID FROM thisWSResults)

      -- Delete all Historic Order Tests without results
      DELETE FROM thisWSOrderTests
      WHERE  HistOrderTestID NOT IN (SELECT HistOrderTestID FROM thisWSResults)

      -- Search all Analyzer Work Sessions without Historic Order Tests
      DECLARE emptyWS CURSOR FOR
      SELECT AnalyzerID, WorkSessionID FROM thisAnalyzerWorkSessions AW
      WHERE  (SELECT COUNT(*) FROM thisWSOrderTests OT
      WHERE  AW.AnalyzerID = OT.AnalyzerID
      AND    AW.WorkSessionID = OT.WorkSessionID) = 0

      OPEN emptyWS
      FETCH NEXT FROM emptyWS INTO @myAnalyzerID, @myWorkSessionID
      WHILE @@FETCH_STATUS = 0
      BEGIN
      -- Delete all Alarms for the Analyzer Work Session
      DELETE FROM thisWSAnalyzerAlarms
      WHERE  AnalyzerID = @myAnalyzerID
      AND    WorkSessionID = @myWorkSessionID

      -- Delete the Analyzer Work Session
      DELETE FROM thisAnalyzerWorkSessions
      WHERE  AnalyzerID = @myAnalyzerID
      AND    WorkSessionID = @myWorkSessionID

      FETCH NEXT FROM emptyWS INTO @myAnalyzerID, @myWorkSessionID
      END
      CLOSE emptyWS
      DEALLOCATE emptyWS

      COMMIT TRANSACTION DeleteHis

      -- Change the initial value for the autonumeric field HistOrderTestID in table
      -- thisWSOrderTests
      DECLARE @MaxHistOTID INT
      SELECT @MaxHistOTID = MAX(HistOrderTestID) + 1 FROM thisWSOrderTests
      DBCC CHECKIDENT ('thisWSOrderTests', RESEED, @MaxHistOTID)
      END
      GO

      IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksResultsCTRL]'))
      DROP VIEW [dbo].[vwksResultsCTRL]
      GO
      CREATE VIEW [dbo].[vwksResultsCTRL]
      AS
      SELECT     dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
      dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
      dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
      dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
      dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
      dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
      dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
      dbo.twksResults.TS_DateTime, dbo.twksResults.WorkSessionID, dbo.twksResults.AnalyzerID, dbo.tparTestSamples.BlankAbsorbanceLimit,
      dbo.tparTests.KineticBlankLimit, 'NULL' AS CalibratorLotNumber, dbo.twksOrderTests.SampleType, NULL AS TheoricalConcentration,
      dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, dbo.tparTestSamples.FactorLowerLimit, dbo.tparTestSamples.FactorUpperLimit, dbo.tparTests.DecimalsAllowed,
      dbo.tparControls.ControlName, dbo.tparControls.LotNumber AS ControlLotNumber, dbo.tparTestControls.MinConcentration, dbo.tparTestControls.MaxConcentration,
      dbo.twksOrderTests.TestType, dbo.twksResults.Collapsed, dbo.tparTests.TestName, dbo.twksOrderTests.OrderTestStatus,
      dbo.twksWSRepetitionsToAdd.PostDilutionType, dbo.twksOrderTests.TestID, dbo.tparTestSamples.ActiveRangeType, dbo.twksOrderTests.OrderID,
      dbo.twksResults.ManualResult, dbo.twksResults.ManualResultText, dbo.twksOrders.StatFlag, '' AS CalibratorName, '' AS AnalysisMode, dbo.twksResults.CurveSlope,
      dbo.twksResults.CurveOffset, dbo.twksResults.CurveCorrelation, NULL AS CalibratorID, dbo.twksOrders.SampleClass, NULL AS NumberOfCalibrator,
      dbo.twksOrders.PatientID, dbo.twksOrders.SampleID, dbo.twksOrderTests.TubeType
      FROM         dbo.twksResults INNER JOIN
      dbo.twksOrderTests ON dbo.twksResults.OrderTestID = dbo.twksOrderTests.OrderTestID INNER JOIN
      dbo.tparTestSamples ON dbo.twksOrderTests.TestID = dbo.tparTestSamples.TestID AND
      dbo.twksOrderTests.SampleType = dbo.tparTestSamples.SampleType INNER JOIN
      dbo.tparTests ON dbo.tparTestSamples.TestID = dbo.tparTests.TestID INNER JOIN
      dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparTests.MeasureUnit LEFT OUTER JOIN
      dbo.twksWSRepetitionsToAdd ON dbo.twksResults.OrderTestID = dbo.twksWSRepetitionsToAdd.OrderTestID INNER JOIN
      dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID INNER JOIN
      dbo.tparControls ON dbo.twksOrderTests.ControlID = dbo.tparControls.ControlID INNER JOIN
      dbo.tparTestControls ON dbo.twksOrderTests.ControlID = dbo.tparTestControls.ControlID AND dbo.twksOrderTests.TestID = dbo.tparTestControls.TestID AND
      dbo.twksOrderTests.SampleType = dbo.tparTestControls.SampleType
      WHERE     (dbo.twksOrderTests.TestType = 'STD') AND (dbo.twksOrders.SampleClass = 'CTRL')
      AND       (dbo.twksOrderTests.TestType = dbo.tparTestControls.TestType)
      UNION
      SELECT     dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
      dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
      dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
      dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
      dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
      dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
      dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
      dbo.twksResults.TS_DateTime, dbo.twksResults.WorkSessionID, dbo.twksResults.AnalyzerID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL
      AS CalibratorLotNumber, dbo.twksOrderTests.SampleType, NULL AS TheoricalConcentration, dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, NULL
      AS FactorLowerLimit, NULL AS FactorUpperLimit, tparISETestSamples.Decimals AS DecimalsAllowed, dbo.tparControls.ControlName,
      dbo.tparControls.LotNumber AS ControlLotNumber, dbo.tparTestControls.MinConcentration, dbo.tparTestControls.MaxConcentration, dbo.twksOrderTests.TestType,
      dbo.twksResults.Collapsed, dbo.tparISETests.Name, dbo.twksOrderTests.OrderTestStatus, dbo.twksWSRepetitionsToAdd.PostDilutionType,
      dbo.twksOrderTests.TestID, dbo.tparISETestSamples.ActiveRangeType, dbo.twksOrderTests.OrderID, dbo.twksResults.ManualResult,
      dbo.twksResults.ManualResultText, dbo.twksOrders.StatFlag, '' AS CalibratorName, '' AS AnalysisMode, dbo.twksResults.CurveSlope, dbo.twksResults.CurveOffset,
      dbo.twksResults.CurveCorrelation, NULL AS CalibratorID, dbo.twksOrders.SampleClass, NULL AS NumberOfCalibrator, dbo.twksOrders.PatientID,
      dbo.twksOrders.SampleID, dbo.twksOrderTests.TubeType
      FROM         dbo.twksResults INNER JOIN
      dbo.twksOrderTests ON dbo.twksResults.OrderTestID = dbo.twksOrderTests.OrderTestID INNER JOIN
      dbo.tparISETestSamples ON dbo.twksOrderTests.TestID = dbo.tparISETestSamples.ISETestID AND
      dbo.twksOrderTests.SampleType = dbo.tparISETestSamples.SampleType INNER JOIN
      dbo.tparISETests ON dbo.tparISETestSamples.ISETestID = dbo.tparISETests.ISETestID INNER JOIN
      dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparISETests.Units LEFT OUTER JOIN
      dbo.twksWSRepetitionsToAdd ON dbo.twksResults.OrderTestID = dbo.twksWSRepetitionsToAdd.OrderTestID INNER JOIN
      dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID INNER JOIN
      dbo.tparControls ON dbo.twksOrderTests.ControlID = dbo.tparControls.ControlID INNER JOIN
      dbo.tparTestControls ON dbo.twksOrderTests.ControlID = dbo.tparTestControls.ControlID AND dbo.twksOrderTests.TestID = dbo.tparTestControls.TestID AND
      dbo.twksOrderTests.SampleType = dbo.tparTestControls.SampleType
      WHERE     (dbo.twksOrderTests.TestType = 'ISE') AND (dbo.twksOrders.SampleClass = 'CTRL')
      AND       (dbo.twksOrderTests.TestType = dbo.tparTestControls.TestType)

      GO

    </StructureScript>
    <UpdateScript>
      UPDATE  Ax00.dbo.tfmwVersions SET UserSoftware = '2.1.0', ServiceSoftware = '1.0.1', Firmware = '1.20'
      GO
      UPDATE Ax00.dbo.tparISETestSamples SET ISE_DilutionFactor = 10 WHERE SampleType_ResultID = 'URN'
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'thisWSReadings') = 1)
      BEGIN
      TRUNCATE TABLE [Ax00].[dbo].[thisWSReadings]
      END
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'thisWSExecutions') = 1)
      BEGIN
      TRUNCATE TABLE [Ax00].[dbo].[thisWSExecutions]
      END
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'thisAdjustBaseLines') = 1)
      BEGIN
      TRUNCATE TABLE [Ax00].[dbo].[thisAdjustBaseLines]
      END
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tfmwAlarms' AND sc.name = 'LISValue') = 0
      BEGIN
      ALTER TABLE [dbo].[tfmwAlarms] ADD [LISValue] nvarchar(5) NULL
      END
      GO

      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '001'	 WHERE [AlarmID] = 'ABS_REMARK1'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '010'	 WHERE [AlarmID] = 'ABS_REMARK10'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '011'	 WHERE [AlarmID] = 'ABS_REMARK11'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '012'	 WHERE [AlarmID] = 'ABS_REMARK12'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '013'	 WHERE [AlarmID] = 'ABS_REMARK13'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '002'	 WHERE [AlarmID] = 'ABS_REMARK2'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '003'	 WHERE [AlarmID] = 'ABS_REMARK3'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '004'	 WHERE [AlarmID] = 'ABS_REMARK4'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '005'	 WHERE [AlarmID] = 'ABS_REMARK5'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '006'	 WHERE [AlarmID] = 'ABS_REMARK6'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '007'	 WHERE [AlarmID] = 'ABS_REMARK7'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '008'	 WHERE [AlarmID] = 'ABS_REMARK8'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '009'	 WHERE [AlarmID] = 'ABS_REMARK9'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '014'	 WHERE [AlarmID] = 'BLANK_REMARK1'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '015'	 WHERE [AlarmID] = 'BLANK_REMARK2'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '016'	 WHERE [AlarmID] = 'BLANK_REMARK3'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '017'	 WHERE [AlarmID] = 'BLANK_REMARK4'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '018'	 WHERE [AlarmID] = 'BLANK_REMARK5'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '019'	 WHERE [AlarmID] = 'BLANK_REMARK6'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '020'	 WHERE [AlarmID] = 'BLANK_REMARK7'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '021'	 WHERE [AlarmID] = 'BLANK_REMARK8'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '022'	 WHERE [AlarmID] = 'CALIB_REMARK1'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '023'	 WHERE [AlarmID] = 'CALIB_REMARK2'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '024'	 WHERE [AlarmID] = 'CALIB_REMARK3'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '025'	 WHERE [AlarmID] = 'CALIB_REMARK4'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '026'	 WHERE [AlarmID] = 'CONC_REMARK1'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '035'	 WHERE [AlarmID] = 'CONC_REMARK10'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '036'	 WHERE [AlarmID] = 'CONC_REMARK11'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '027'	 WHERE [AlarmID] = 'CONC_REMARK2'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '028'	 WHERE [AlarmID] = 'CONC_REMARK3'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '029'	 WHERE [AlarmID] = 'CONC_REMARK4'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '030'	 WHERE [AlarmID] = 'CONC_REMARK5'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '031'	 WHERE [AlarmID] = 'CONC_REMARK6'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '032'	 WHERE [AlarmID] = 'CONC_REMARK7'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '033'	 WHERE [AlarmID] = 'CONC_REMARK8'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '034'	 WHERE [AlarmID] = 'CONC_REMARK9'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '037'	 WHERE [AlarmID] = 'ISE_Drift_CAL'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '038'	 WHERE [AlarmID] = 'ISE_Drift_SER'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '039'	 WHERE [AlarmID] = 'ISE_mVNoiseA_SER'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '040'	 WHERE [AlarmID] = 'ISE_mVNoiseB'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '041'	 WHERE [AlarmID] = 'ISE_mVNoiseB_URI'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '042'	 WHERE [AlarmID] = 'ISE_mVOutA_SER'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '043'	 WHERE [AlarmID] = 'ISE_mVOutB'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '044'	 WHERE [AlarmID] = 'ISE_mVOutB_URI'
      UPDATE [dbo].[tfmwAlarms] SET [LISValue] = '045'	 WHERE [AlarmID] = 'ISE_OutSlope'
      GO

      IF ((SELECT COUNT(*) FROM [dbo].[tfmwAlarms] WHERE [AlarmID] = 'ISE_REMARK6') = 1)
      DELETE [dbo].[tfmwAlarms] WHERE [AlarmID] = 'ISE_REMARK6'
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vcfgLISMappings') = 1)
      DROP VIEW [dbo].[vcfgLISMappings]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vcfgLISMappings') = 1)
      DROP VIEW [dbo].[vcfgLISMappings]
      GO

      SET ANSI_NULLS ON
      GO

      SET QUOTED_IDENTIFIER ON
      GO

      CREATE VIEW [dbo].[vcfgLISMappings] AS
      SELECT MD.SubtableId AS ValueType, MD.ItemID AS ValueID, NULL AS LanguageID, MD.fixedItemDesc AS LongName, MD.LISValue
      FROM         [dbo].[tcfgMasterData] AS MD
      WHERE     MD.SubTableID = 'TEST_UNITS' AND MD.ItemID != 'BLANK'
      UNION
      SELECT     MD.SubtableId AS ValueType, MD.ItemID AS ValueID, MR.LanguageID AS LanguageID, MR.ResourceText AS LongName, MD.LISValue
      FROM         [dbo].[tcfgMasterData] AS MD INNER JOIN
      [dbo].tfmwMultiLanguageResources MR ON MD.ResourceID = MR.ResourceID
      WHERE     MD.SubTableID = 'SAMPLE_TYPES' AND MD.fixedItemDesc != 'Empty'
      UNION
      SELECT     MD.SubtableId AS ValueType, MD.ItemID AS ValueID,
      (SELECT     CurrentValue
      FROM          tcfgUserSettings
      WHERE      SettingID = 'CURRENT_LANGUAGE') AS LanguageID, MD.FixedItemDesc AS LongName, MD.LISValue
      FROM         [dbo].[tcfgMasterData] AS MD
      WHERE     MD.SubTableID = 'SAMPLE_TYPES' AND MD.fixedItemDesc != 'Empty' AND MD.MultiLanguageFlag = 0
      UNION
      SELECT     MD.AlarmType AS ValueType, MD.AlarmID AS ValueID, NULL AS LanguageID, MD.Description AS LongName, MD.LISValue
      FROM         [dbo].[tfmwAlarms] AS MD
      WHERE     MD.AlarmType = 'REMARK'
      GO

      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'AUTO_WS_WITH_LIS_MODE') = 0)
      INSERT INTO [dbo].[tcfgUserSettings] (SettingID, SettingDataType, CurrentValue, Status, TS_User , TS_DateTime )
      VALUES ('AUTO_WS_WITH_LIS_MODE', 'BOOLEAN', '1', 1, 'BIOSYSTEMS', GETDATE())
      GO

      IF ((SELECT COUNT(*) FROM [dbo].[tcfgUserSettings] WHERE [SettingID] = 'AUTO_LIS_WAIT_TIME') = 0)
      INSERT INTO [dbo].[tcfgUserSettings] (SettingID, SettingDataType, CurrentValue, Status, TS_User , TS_DateTime )
      VALUES ('AUTO_LIS_WAIT_TIME', 'INTEGER', '60', 1, 'BIOSYSTEMS', GETDATE())
      GO

      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'AUTOLIS_LIS_NOT_READY') = 0)
      INSERT INTO [dbo].[tfmwMessages] ([MessageID],[MessageType],[ResourceID])
      VALUES ('AUTOLIS_LIS_NOT_READY','WarnCancel','MSG_AUTOLIS_LIS_NOT_READY')
      GO

      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'AUTOLIS_NO_TUBES_FOUND') = 0)
      INSERT INTO [dbo].[tfmwMessages] ([MessageID],[MessageType],[ResourceID])
      VALUES ('AUTOLIS_NO_TUBES_FOUND','WarnCancel','MSG_AUTOLIS_NO_TUBES_FOUND')
      GO

      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'AUTOLIS_BARCODE_DISABLED') = 0)
      INSERT INTO [dbo].[tfmwMessages] ([MessageID],[MessageType],[ResourceID])
      VALUES ('AUTOLIS_BARCODE_DISABLED','Warning','MSG_AUTOLIS_BARCODE_DISABLED')
      GO

      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'BARCODE_AUTOLIS_WARNING') = 0)
      INSERT INTO [dbo].[tfmwMessages] ([MessageID],[MessageType],[ResourceID])
      VALUES ('BARCODE_AUTOLIS_WARNING','WarnCancel','MSG_BARCODE_AUTOLIS_WARNING')
      GO

      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'AUTOLIS_ALL_ORDERS_WRONG') = 0)
      INSERT INTO [dbo].[tfmwMessages] ([MessageID],[MessageType],[ResourceID])
      VALUES ('AUTOLIS_ALL_ORDERS_WRONG','WarnCancel','MSG_AUTOLIS_ALL_ORDERS_WRONG')
      GO

      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'AUTOLIS_NO_TUBES_MATCHED') = 0)
      INSERT INTO [dbo].[tfmwMessages] ([MessageID],[MessageType],[ResourceID])
      VALUES ('AUTOLIS_NO_TUBES_MATCHED','WarnCancel','MSG_AUTOLIS_NO_TUBES_MATCHED')
      GO

      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'AUTOLIS_WAITING_ORDERS') = 0)
      INSERT INTO [dbo].[tfmwMessages] ([MessageID],[MessageType],[ResourceID])
      VALUES ('AUTOLIS_WAITING_ORDERS','Information','MSG_AUTOLIS_WAITING_ORDERS')
      GO
      IF ((SELECT COUNT(*) FROM [Ax00].[dbo].[tcfgUserSettings] WHERE SettingID = 'AUTOMATIC_EXPORT') = 1)
      UPDATE [dbo].[tcfgUserSettings]  SET CurrentValue = 1 WHERE SettingID = 'AUTOMATIC_EXPORT'
      GO
    </UpdateScript>
  </AppVersion >
  <AppVersion>
    <Version>2.11</Version>
    <StructureScript>
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id
      WHERE so.xtype = 'U' AND so.name = 'tparCalibrators' AND sc.name = 'ExpirationDate') > 0)
      ALTER TABLE Ax00.dbo.tparCalibrators ALTER COLUMN ExpirationDate DATETIME NULL


      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vcfgTestSortingForReports') = 1)
      DROP VIEW [dbo].[vcfgTestSortingForReports]
      GO

      SET ANSI_NULLS ON
      GO

      SET QUOTED_IDENTIFIER ON
      GO

      CREATE VIEW vcfgTestSortingForReports AS
      SELECT RTS.TestType, T.TestID, T.TestName, RTS.TestPosition
      FROM   tparTests T INNER JOIN tcfgReportsTestsSorting RTS ON RTS.TestID = T.TestID AND RTS.TestType = 'STD'
      UNION
      SELECT RTS.TestType, T.ISETestID AS TestID, T.Name AS TestName, RTS.TestPosition
      FROM   tparISETests T INNER JOIN tcfgReportsTestsSorting RTS ON RTS.TestID = T.ISETestID AND RTS.TestType = 'ISE'
      UNION
      SELECT RTS.TestType, T.CalcTestID AS TestID, T.CalcTestLongName AS TestName, RTS.TestPosition
      FROM   tparCalculatedTests T INNER JOIN tcfgReportsTestsSorting RTS ON RTS.TestID = T.CalcTestID AND RTS.TestType = 'CALC'
      UNION
      SELECT RTS.TestType, T.OffSystemTestID AS TestID, T.Name AS TestName, RTS.TestPosition
      FROM   tparOffSystemTests T INNER JOIN tcfgReportsTestsSorting RTS ON RTS.TestID = T.OffSystemTestID AND RTS.TestType = 'OFFS'
      GO


      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vhisTestSamples') = 1)
      DROP VIEW [dbo].[vhisTestSamples]
      GO

      SET ANSI_NULLS ON
      GO

      SET QUOTED_IDENTIFIER ON
      GO

      CREATE VIEW vhisTestSamples AS
      SELECT 'STD' AS TestType, TS.HistTestID, TS.TestID, TS.TestName, TS.TestVersionNumber, TS.DecimalsAllowed,
      NULL AS FormulaText, (CASE WHEN T.TestPosition IS NOT NULL THEN T.TestPosition ELSE 999999999 END) AS TestPosition
      FROM   thisTestSamples TS LEFT OUTER JOIN vcfgTestSortingForReports T ON TS.TestName = T.TestName AND T.TestType = 'STD'
      UNION
      SELECT 'ISE' AS TestType, TS.HistISETestID AS HistTestID, TS.ISETestID AS TestID, TS.ISETestName AS TestName,
      0 AS TestVersionNumber, TS.DecimalsAllowed, NULL AS FormulaText,
      (CASE WHEN T.TestPosition IS NOT NULL THEN T.TestPosition ELSE 999999999 END) AS TestPosition
      FROM   thisISETestSamples TS LEFT OUTER JOIN vcfgTestSortingForReports T ON TS.ISETestName = T.TestName AND T.TestType = 'ISE'
      UNION
      SELECT 'CALC' AS TestType, TS.HistCalcTestID AS HistTestID, TS.CalcTestID AS TestID,
      TS.CalcTestLongName AS TestName, 0 AS TestVersionNumber, TS.DecimalsAllowed, TS.FormulaText,
      (CASE WHEN T.TestPosition IS NOT NULL THEN T.TestPosition ELSE 999999999 END) AS TestPosition
      FROM   thisCalculatedTests TS LEFT OUTER JOIN vcfgTestSortingForReports T ON TS.CalcTestLongName = T.TestName AND T.TestType = 'CALC'
      UNION
      SELECT 'OFFS' AS TestType, TS.HistOffSystemTestID AS HistTestID, TS.OffSystemTestID AS TestID,
      TS.OffSystemTestName AS TestName, 0 AS TestVersionNumber, TS.DecimalsAllowed, NULL AS FormulaText,
      (CASE WHEN T.TestPosition IS NOT NULL THEN T.TestPosition ELSE 999999999 END) AS TestPosition
      FROM   thisOffSystemTestSamples TS LEFT OUTER JOIN vcfgTestSortingForReports T ON TS.OffSystemTestName = T.TestName AND T.TestType = 'OFFS'
      GO


      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vhisWSResults') = 1)
      DROP VIEW [dbo].[vhisWSResults]
      GO

      SET ANSI_NULLS ON
      GO

      SET QUOTED_IDENTIFIER ON
      GO

      CREATE VIEW [dbo].[vhisWSResults] AS
      SELECT R.HistOrderTestID, R.AnalyzerID, R.WorkSessionID, R.ResultDateTime,
      (CASE WHEN OT.SampleClass = 'PATIENT' AND OT.SampleID IS NOT NULL THEN OT.SampleID
      WHEN OT.SampleClass = 'PATIENT' AND P.PatientID IS NOT NULL THEN P.PatientID
      ELSE NULL
      END) AS PatientID, OT.HistPatientID, OT.SampleClass, OT.StatFlag, OT.TestType, OT.SampleType,
      TS.TestID, TS.TestName, TS.TestVersionNumber,TS.TestPosition, R.CONCValue,
      (CASE WHEN NOT r.RemarkAlert IS NULL THEN r.RemarkAlert ELSE '' END) AS RemarkAlert,
      TS.DecimalsAllowed, MD.FixedItemDesc AS MeasureUnit,
      R.MinRefRange, R.MaxRefRange, R.ExportStatus, R.AlarmList, TS.FormulaText, R.MultiPointNumber,
      R.ManualResultFlag, R.ManualResult, R.ManualResultText, R.LISMessageID, OT.LISRequest, OT.ExternalQC,
      OT.ESOrderID, OT.LISOrderID, OT.ESPatientID, OT.LISPatientID, OT.LISTestName, OT.LISSampleType, OT.LISUnits
      FROM   dbo.thisWSResults AS R INNER JOIN dbo.thisWSOrderTests AS OT ON R.HistOrderTestID = OT.HistOrderTestID
      INNER JOIN dbo.vhisTestSamples AS TS ON OT.HistTestID = TS.histTestID
      AND OT.TestType = TS.TestType
      AND TS.TestVersionNumber = COALESCE (OT.TestVersionNumber, 0)
      LEFT OUTER JOIN dbo.tcfgMasterData AS MD ON MD.SubTableID = 'TEST_UNITS'
      AND MD.ItemID = OT.MeasureUnit
      LEFT OUTER JOIN dbo.thisPatients AS P ON P.HistPatientID = OT.HistPatientID
      GO
    </StructureScript>
    <UpdateScript>
      UPDATE Ax00.dbo.tfmwVersions SET UserSoftware = '2.1.1', ServiceSoftware = '1.1.0', FirmwareScripts = '1.1.0', Firmware = '1.26'
      GO
      IF ((SELECT COUNT(*) FROM [Ax00].[dbo].[tfmwMessages] WHERE [MessageID] = 'AUTOLIS_BARCODE_ERROR') = 0)
      INSERT INTO [Ax00].[dbo].[tfmwMessages] ([MessageID],[MessageType],[ResourceID])
      VALUES ('AUTOLIS_BARCODE_ERROR','Information','MSG_AUTOLIS_BARCODE_ERROR')
      GO
      UPDATE Ax00.dbo.tcfgUserSettings SET CurrentValue = '1' WHERE SettingID = 'BARCODE_EXTERNAL_INI'
      UPDATE Ax00.dbo.tcfgUserSettings SET CurrentValue = '30' WHERE SettingID = 'BARCODE_EXTERNAL_END'
      GO
      IF ((SELECT COUNT(*) FROM [Ax00].[dbo].[tcfgUserSettings] WHERE SettingID = 'AUT_RESULTS_PRINT') = 1)
      UPDATE [Ax00].[dbo].[tcfgUserSettings]  SET Status = 1 WHERE SettingID = 'AUT_RESULTS_PRINT'
      GO
      IF ((SELECT COUNT(*) FROM [Ax00].[dbo].[tcfgUserSettings] WHERE SettingID = 'AUT_RESULTS_FREQ') = 0)
      INSERT INTO [Ax00].[dbo].[tcfgUserSettings] values ('AUT_RESULTS_FREQ', 'CHAR', 'RESET', 1, 'BIOSYSTEMS', '2013-09-04 12:53:46.933')
      GO
      IF ((SELECT COUNT(*) FROM [Ax00].[dbo].[tcfgUserSettings] WHERE SettingID = 'AUT_RESULTS_TYPE') = 0)
      INSERT INTO [Ax00].[dbo].[tcfgUserSettings] values ('AUT_RESULTS_TYPE', 'CHAR', 'COMPACT', 1, 'BIOSYSTEMS', '2013-09-04 12:53:46.950')
      GO
    </UpdateScript>
  </AppVersion >
  <AppVersion>
    <Version>2.12</Version>
    <StructureScript>
      GO
    </StructureScript>
    <UpdateScript>
      UPDATE Ax00.dbo.tfmwVersions SET UserSoftware = '2.1.2', ServiceSoftware = '1.1.1', FirmwareScripts = '1.1.0', Firmware = '1.30'
      GO
    </UpdateScript>
  </AppVersion >
  <AppVersion>
    <Version>3.0</Version>
    <StructureScript>
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksWSReadings' AND sc.name = 'Pause') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].[twksWSReadings] ADD [Pause] bit NOT NULL default 0
      END
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'V' AND name = 'vwksAlarmsMonitor') = 1)
      DROP VIEW [dbo].[vwksAlarmsMonitor]
      GO
      CREATE VIEW [dbo].[vwksAlarmsMonitor] AS
      SELECT AA.AlarmID, AA.AnalyzerID, AA.AlarmDateTime, AA.AlarmItem, AA.WorkSessionID, AA.AdditionalInfo, AA.AlarmStatus, A.AlarmSource,
      A.AlarmType, A.Name, A.Description, A.Solution, AA.OKDateTime,
      (CASE WHEN AA.OKDateTime IS NULL THEN NULL ELSE DateDiff(second, AA.AlarmDateTime, AA.OKDateTime) END) AS AlarmPeriodSEC
      FROM   tfmwAlarms A INNER JOIN twksWSAnalyzerAlarms AA ON A.AlarmID = AA.AlarmID
      GO
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE  so.xtype = 'U'
      AND ((so.name = 'tqcResults' AND sc.name = 'RunNumber' AND sc.xtype = 48) OR (so.name = 'tqcResultAlarms' AND sc.name = 'RunNumber' AND sc.xtype = 48))) &gt; 0)
      BEGIN
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'F' AND name = 'FK_tqcResultAlarms_tqcResults') = 1)
      ALTER TABLE dbo.tqcResultAlarms DROP CONSTRAINT [FK_tqcResultAlarms_tqcResults]
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tqcResultAlarms' AND sc.name = 'RunNumber') = 1)
      IF ((SELECT sc.xtype FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE  so.xtype = 'U'
      AND so.name = 'tqcResultAlarms' AND sc.name = 'RunNumber') &lt;&gt; 56)
      BEGIN
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tqcResultAlarms') = 1)
      ALTER TABLE dbo.tqcResultAlarms DROP CONSTRAINT [PK_tqcResultAlarms]
      ALTER TABLE dbo.tqcResultAlarms ALTER COLUMN RunNumber INT NOT NULL
      END
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tqcResults' AND sc.name = 'RunNumber') = 1)
      IF ((SELECT sc.xtype FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE  so.xtype = 'U' AND so.name = 'tqcResults' AND sc.name = 'RunNumber') &lt;&gt; 56)
      BEGIN
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tqcResults') = 1)
      ALTER TABLE dbo.tqcResults DROP CONSTRAINT [PK_tqcResults]
      ALTER TABLE dbo.tqcResults ALTER COLUMN RunNumber INT NOT NULL
      END
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tqcResultAlarms') = 0)
      ALTER TABLE dbo.tqcResultAlarms ADD CONSTRAINT [PK_tqcResultAlarms] PRIMARY KEY CLUSTERED (QCTestSampleID ASC, QCControlLotID ASC, AnalyzerID ASC, RunsGroupNumber ASC, RunNumber ASC, AlarmID ASC)
      WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tqcResults') = 0)
      ALTER TABLE dbo.tqcResults ADD CONSTRAINT [PK_tqcResults] PRIMARY KEY CLUSTERED (QCTestSampleID ASC, QCControlLotID ASC, AnalyzerID ASC, RunsGroupNumber ASC, RunNumber ASC)
      WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'F' AND name = 'FK_tqcResultAlarms_tqcResults') = 0)
      BEGIN
      ALTER TABLE dbo.tqcResultAlarms WITH CHECK ADD CONSTRAINT [FK_tqcResultAlarms_tqcResults]
      FOREIGN KEY(QCTestSampleID, QCControlLotID, AnalyzerID, RunsGroupNumber, RunNumber)
      REFERENCES dbo.tqcResults (QCTestSampleID, QCControlLotID, AnalyzerID, RunsGroupNumber, RunNumber)
      ALTER TABLE dbo.tqcResultAlarms CHECK CONSTRAINT [FK_tqcResultAlarms_tqcResults]
      END
      END
      GO
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U'
      AND  (so.name = 'twksWSReadings' AND sc.name = 'ReadingNumber' AND sc.xtype = 48)) &gt; 0)
      BEGIN
      IF ((SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksWSReadings' AND sc.name = 'ReadingNumber') = 1)
      IF ((SELECT sc.xtype FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE  so.xtype = 'U' AND so.name = 'twksWSReadings' AND sc.name = 'ReadingNumber') &lt;&gt; 56)
      BEGIN
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_twksWSReadings_1') = 1)
      ALTER TABLE dbo.twksWSReadings DROP CONSTRAINT [PK_twksWSReadings_1]
      ALTER TABLE dbo.twksWSReadings ALTER COLUMN ReadingNumber INT NOT NULL
      END
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_twksWSReadings_1') = 0)
      ALTER TABLE dbo.twksWSReadings ADD CONSTRAINT [PK_twksWSReadings_1]
      PRIMARY KEY CLUSTERED (AnalyzerID ASC, WorkSessionID ASC, ExecutionID ASC, ReactionComplete ASC, ReadingNumber ASC)
      WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
      ON [PRIMARY]
      END
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'twksWSRotorPositionsInProcess') = 0)
      BEGIN
      SET ANSI_NULLS ON
      SET QUOTED_IDENTIFIER ON
      SET ANSI_PADDING ON

      CREATE TABLE [dbo].[twksWSRotorPositionsInProcess]([AnalyzerID] [varchar](25) NOT NULL,
      [RotorType] [varchar](15) NOT NULL,
      [CellNumber] [tinyint] NOT NULL,
      [InProcessTestsNumber] [tinyint] NOT NULL,
      CONSTRAINT [PK_twksWSRotorPositionsInProcess] PRIMARY KEY CLUSTERED ([AnalyzerID] ASC, [RotorType] ASC, [CellNumber] ASC)
      WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      ) ON [PRIMARY]

      SET ANSI_PADDING OFF

      ALTER TABLE [dbo].[twksWSRotorPositionsInProcess]  WITH CHECK ADD  CONSTRAINT [FK_tcfgAnalyzers_twksWSRotorPositionsInProcess] FOREIGN KEY([AnalyzerID])
      REFERENCES [dbo].[tcfgAnalyzers] ([AnalyzerID])

      ALTER TABLE [dbo].[twksWSRotorPositionsInProcess] CHECK CONSTRAINT [FK_tcfgAnalyzers_twksWSRotorPositionsInProcess]
      END
      GO

      IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwksWSOrderTests]'))
      DROP VIEW [dbo].[vwksWSOrderTests]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vwksWSOrderTests]
      AS
      SELECT     WSOT.WorkSessionID, O.OrderID, O.SampleClass, O.StatFlag, O.PatientID, O.SampleID, OT.OrderTestID, OT.TestType, OT.SampleType, OT.TestID, T .TestName,
      OT.TubeType, OT.ReplicatesNumber, OT.AlternativeOrderTestID, OT.PreviousOrderTestID, OT.TestProfileID, OT.OrderTestStatus, OT.ControlID, WSOT.ToSendFlag,
      WSOT.OpenOTFlag, OT.AnalyzerID, OT.CreationOrder, T .MeasureUnit, O.OrderStatus, TS .PredilutionUseFlag, TS .PredilutionMode, TS .PredilutionFactor,
      T .SpecialTest, C.ControlName, C.LotNumber, O.OrderToExport
      FROM         dbo.twksWSOrderTests AS WSOT INNER JOIN
      dbo.twksOrderTests AS OT ON WSOT.OrderTestID = OT.OrderTestID INNER JOIN
      dbo.twksOrders AS O ON OT.OrderID = O.OrderID INNER JOIN
      dbo.tparTests AS T ON OT.TestID = T .TestID INNER JOIN
      dbo.tparTestSamples AS TS ON OT.TestID = TS .TestID AND OT.SampleType = TS .SampleType LEFT JOIN
      dbo.tparControls AS C ON OT.ControlID = C.ControlID
      WHERE     OT.TestType = 'STD'
      UNION
      SELECT     WSOT.WorkSessionID, O.OrderID, O.SampleClass, O.StatFlag, O.PatientID, O.SampleID, OT.OrderTestID, OT.TestType, OT.SampleType, OT.TestID,
      IT.Name AS TestName, OT.TubeType, OT.ReplicatesNumber, OT.AlternativeOrderTestID, OT.PreviousOrderTestID, OT.TestProfileID, OT.OrderTestStatus, OT.ControlID,
      WSOT.ToSendFlag, WSOT.OpenOTFlag, OT.AnalyzerID, OT.CreationOrder, IT.ISE_Units AS MeasureUnit, O.OrderStatus, (CASE WHEN ITS.ISE_DilutionFactor IS NULL
      THEN 0 ELSE 1 END) AS PredilutionUseFlag, (CASE WHEN ITS.ISE_DilutionFactor IS NULL THEN NULL ELSE 'USER' END) AS PredilutionMode,
      ITS.ISE_DilutionFactor AS PredilutionFactor, 0 AS SpecialTest, C.ControlName, C.LotNumber, O.OrderToExport
      FROM         dbo.twksWSOrderTests AS WSOT INNER JOIN
      dbo.twksOrderTests AS OT ON WSOT.OrderTestID = OT.OrderTestID INNER JOIN
      dbo.twksOrders AS O ON OT.OrderID = O.OrderID INNER JOIN
      dbo.tparISETests AS IT ON OT.TestID = IT.ISETestID INNER JOIN
      dbo.tparISETestSamples AS ITS ON OT.TestID = ITS.ISETestID AND OT.SampleType = ITS.SampleType LEFT JOIN
      dbo.tparControls AS C ON OT.ControlID = C.ControlID
      WHERE     OT.TestType = 'ISE'
      UNION
      SELECT     WSOT.WorkSessionID, O.OrderID, O.SampleClass, O.StatFlag, O.PatientID, O.SampleID, OT.OrderTestID, OT.TestType, OT.SampleType, OT.TestID,
      CT.CalcTestLongName AS TestName, OT.TubeType, OT.ReplicatesNumber, OT.AlternativeOrderTestID, OT.PreviousOrderTestID, OT.TestProfileID, OT.OrderTestStatus,
      OT.ControlID, WSOT.ToSendFlag, WSOT.OpenOTFlag, OT.AnalyzerID, OT.CreationOrder, CT.MeasureUnit, O.OrderStatus, NULL AS PredilutionUseFlag, NULL
      AS PredilutionMode, NULL AS PredilutionFactor, 0 AS SpecialTest, NULL AS ControlName, NULL AS LotNumber, O.OrderToExport
      FROM         dbo.twksWSOrderTests AS WSOT INNER JOIN
      dbo.twksOrderTests AS OT ON WSOT.OrderTestID = OT.OrderTestID INNER JOIN
      dbo.twksOrders AS O ON OT.OrderID = O.OrderID INNER JOIN
      dbo.tparCalculatedTests AS CT ON OT.TestID = CT.CalcTestID
      WHERE     OT.TestType = 'CALC'
      UNION
      SELECT     WSOT.WorkSessionID, O.OrderID, O.SampleClass, O.StatFlag, O.PatientID, O.SampleID, OT.OrderTestID, OT.TestType, OT.SampleType, OT.TestID,
      OS.Name AS TestName, OT.TubeType, OT.ReplicatesNumber, OT.AlternativeOrderTestID, OT.PreviousOrderTestID, OT.TestProfileID, OT.OrderTestStatus,
      OT.ControlID, WSOT.ToSendFlag, WSOT.OpenOTFlag, OT.AnalyzerID, OT.CreationOrder, OS.Units AS MeasureUnit, O.OrderStatus, NULL AS PredilutionUseFlag, NULL
      AS PredilutionMode, NULL AS PredilutionFactor, 0 AS SpecialTest, NULL AS ControlName, NULL AS LotNumber, O.OrderToExport
      FROM         dbo.twksWSOrderTests AS WSOT INNER JOIN
      dbo.twksOrderTests AS OT ON WSOT.OrderTestID = OT.OrderTestID INNER JOIN
      dbo.twksOrders AS O ON OT.OrderID = O.OrderID INNER JOIN
      dbo.tparOffSystemTests AS OS ON OT.TestID = OS.OffSystemTestID
      WHERE     OT.TestType = 'OFFS'
      GO
      IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tparContaminationWashings_tparContaminations]') AND parent_object_id = OBJECT_ID(N'[dbo].[tparContaminationWashings]'))
      ALTER TABLE [dbo].[tparContaminationWashings] DROP CONSTRAINT [FK_tparContaminationWashings_tparContaminations]
      GO
      IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tparContaminationWashings]') AND type in (N'U'))
      DROP TABLE [dbo].[tparContaminationWashings]
      GO
      IF OBJECT_ID('FK_twksImportErrorsLog_tfmwMessages', 'F') IS NOT NULL ALTER TABLE twksImportErrorsLog DROP CONSTRAINT [FK_twksImportErrorsLog_tfmwMessages]
      GO
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'thisReagentsBottles' AND sc.name = 'Status') = 0
      ALTER TABLE [dbo].[thisReagentsBottles] ADD [Status] nvarchar(15) NULL
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksCalcResults') = 1)
      DROP VIEW [dbo].[vwksCalcResults]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vwksCalcResults] AS
      SELECT dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
      dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
      dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
      dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
      dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
      dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
      dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
      dbo.twksResults.TS_DateTime, dbo.tparCalculatedTests.CalcTestLongName AS TestName, dbo.twksOrderTests.SampleType,
      dbo.tparCalculatedTests.Decimals AS DecimalsAllowed, dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, dbo.twksOrderTests.AnalyzerID,
      dbo.twksOrderTests.TestType, 0 AS TheoricalConcentration, dbo.twksOrderCalculatedTests.OrderTestID AS STDOrderTestID, dbo.twksOrderTests.TestID,
      dbo.tparCalculatedTests.ActiveRangeType, dbo.twksOrderTests.OrderID, dbo.twksWSOrderTests.WorkSessionID, dbo.twksOrders.StatFlag,
      dbo.twksOrders.SampleClass, dbo.twksResults.Collapsed, ISNULL(dbo.twksOrders.PatientID, dbo.twksOrders.SampleID) AS PatientID
      FROM   dbo.twksResults INNER JOIN dbo.twksOrderCalculatedTests ON dbo.twksResults.OrderTestID = dbo.twksOrderCalculatedTests.CalcOrderTestID
      INNER JOIN dbo.twksOrderTests ON dbo.twksOrderCalculatedTests.CalcOrderTestID = dbo.twksOrderTests.OrderTestID
      INNER JOIN dbo.tparCalculatedTests ON dbo.twksOrderTests.TestID = dbo.tparCalculatedTests.CalcTestID
      INNER JOIN dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparCalculatedTests.MeasureUnit
      INNER JOIN dbo.twksWSOrderTests ON dbo.twksOrderTests.OrderTestID = dbo.twksWSOrderTests.OrderTestID
      INNER JOIN dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID;
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksCompleteResults') = 1)
      DROP VIEW [dbo].[vwksCompleteResults]
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vwksCompleteResults] AS
      SELECT DISTINCT OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
      Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
      CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
      TS_DateTime, AnalyzerID, WorkSessionID, BlankAbsorbanceLimit, KineticBlankLimit, CalibratorLotNumber, SampleType, TheoricalConcentration, MeasureUnit,
      FactorLowerLimit, FactorUpperLimit, DecimalsAllowed, ControlName, ControlLotNumber, MinConcentration, MaxConcentration, TestType, Collapsed, TestName,
      OrderTestStatus, PostDilutionType, TestID, ActiveRangeType, OrderID, ManualResult, ManualResultText, StatFlag, CalibratorName, AnalysisMode, CurveSlope,
      CurveOffset, CurveCorrelation, CalibratorID, SampleClass, NumberOfCalibrators, NULL AS STDOrderTestID, NULL AS PatientName,
      ISNULL(PatientID, SampleID) AS PatientID, NULL AS ControlNum
      FROM dbo.vwksResults
      UNION ALL
      SELECT DISTINCT OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
      Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
      CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
      TS_DateTime, AnalyzerID, WorkSessionID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL AS CalibratorLotNumber, SampleType,
      TheoricalConcentration, MeasureUnit, NULL AS FactorLowerLimit, NULL AS FactorUpperLimit, DecimalsAllowed, NULL AS ControlName, NULL AS ControlLotNumber,
      NULL AS MinConcentration, NULL AS MaxConcentration, TestType, Collapsed, TestName, NULL AS OrderTestStatus, NULL AS PostDilutionType, TestID,
      ActiveRangeType, OrderID, NULL AS ManualResult, NULL AS ManualResultText, StatFlag, NULL AS CalibratorName, NULL AS AnalysisMode, NULL AS CurveSlope,
      NULL AS CurveOffset, NULL AS CurveCorrelation, NULL AS CalibratorID, SampleClass, NULL AS NumberOfCalibrators, STDOrderTestID,
      NULL AS PatientName, PatientID, NULL AS ControlNum
      FROM dbo.vwksCalcResults
      UNION ALL
      SELECT DISTINCT OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
      Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
      CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
      TS_DateTime, AnalyzerID, WorkSessionID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL AS CalibratorLotNumber, SampleType,
      TheoricalConcentration, MeasureUnit, NULL AS FactorLowerLimit, NULL AS FactorUpperLimit, DecimalsAllowed, NULL AS ControlName, NULL AS ControlLotNumber,
      NULL AS MinConcentration, NULL AS MaxConcentration, TestType, Collapsed, TestName, OrderTestStatus, NULL AS PostDilutionType, TestID, ActiveRangeType,
      OrderID, NULL AS ManualResult, ManualResultText, StatFlag, NULL AS CalibratorName, NULL AS AnalysisMode, NULL AS CurveSlope, NULL AS CurveOffset,
      NULL AS CurveCorrelation, NULL AS CalibratorID, SampleClass, NULL AS NumberOfCalibrators, NULL AS STDOrderTestID, PatientName, PatientID, ControlNum
      FROM vwksWSISEOffSystemResults;
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksWSExecutionsAlarms') = 1)
      DROP VIEW [dbo].[vwksWSExecutionsAlarms]
      GO

      SET ANSI_NULLS ON
      GO

      SET QUOTED_IDENTIFIER ON
      GO

      CREATE VIEW [dbo].[vwksWSExecutionsAlarms]
      AS
      SELECT     dbo.twksWSExecutions.ExecutionID, dbo.tfmwAlarms.Description, dbo.twksWSExecutionAlarms.AlarmID, dbo.twksWSExecutions.OrderTestID,
      dbo.twksWSExecutions.RerunNumber
      FROM         dbo.twksWSExecutionAlarms INNER JOIN
      dbo.twksWSExecutions ON dbo.twksWSExecutionAlarms.ExecutionID = dbo.twksWSExecutions.ExecutionID INNER JOIN
      dbo.tfmwAlarms ON dbo.twksWSExecutionAlarms.AlarmID = dbo.tfmwAlarms.AlarmID
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksMonitorWSTabSTDISE') = 1)
      DROP VIEW [dbo].vwksMonitorWSTabSTDISE
      GO

      SET ANSI_NULLS ON
      GO

      SET QUOTED_IDENTIFIER ON
      GO

      CREATE VIEW [dbo].[vwksMonitorWSTabSTDISE]
      AS
      SELECT     ex.ExecutionStatus, ex.ExecutionID, ex.RerunNumber, ex.WorkSessionID, ex.AnalyzerID, ex.Paused, ex.StatFlag, ot.OrderTestID, ot.TestType, ot.TestID,
      (CASE ot.TestType WHEN 'ISE' THEN ise.Name WHEN 'STD' THEN std.TestName ELSE NULL END) AS TestName, ot.SampleType, ot.OrderTestStatus, O.OrderID,
      O.SampleClass, O.OrderStatus,
      (CASE o.SampleClass WHEN 'CALIB' THEN calibs.CalibratorName WHEN 'CTRL' THEN ctrls.ControlName WHEN 'PATIENT' THEN ISNULL(o.PatientID, o.SampleID)
      ELSE 'BLANK' END) AS ElementName, REPLACE(re.SpecimenIDList, CHAR(13), ', ') AS SpecimenIDList, re.ElementFinished, CASE WHEN o.PatientID IS NOT NULL
      THEN pat.FirstName + ' ' + pat.LastName ELSE o.SampleID END AS PatientName, r.ExportStatus, r.Printed
      FROM         dbo.twksWSExecutions AS ex INNER JOIN
      dbo.twksOrderTests AS ot ON ex.OrderTestID = ot.OrderTestID INNER JOIN
      dbo.twksOrders AS O ON ot.OrderID = O.OrderID LEFT OUTER JOIN
      dbo.tparTests AS std ON ot.TestType = 'STD' AND ot.TestID = std.TestID LEFT OUTER JOIN
      dbo.tparISETests AS ise ON ot.TestType = 'ISE' AND ot.TestID = ise.ISETestID LEFT OUTER JOIN
      dbo.tparTestCalibrators AS testcalib ON ot.TestType = 'STD' AND ot.TestID = testcalib.TestID AND ot.SampleType = testcalib.SampleType LEFT OUTER JOIN
      dbo.tparCalibrators AS calibs ON testcalib.CalibratorID = calibs.CalibratorID LEFT OUTER JOIN
      dbo.tparControls AS ctrls ON ot.ControlID = ctrls.ControlID LEFT OUTER JOIN
      dbo.twksWSRequiredElements AS re ON O.PatientID = re.PatientID AND ot.SampleType = re.SampleType AND re.PredilutionFactor IS NULL LEFT OUTER JOIN
      dbo.tparPatients AS pat ON O.SampleClass = 'PATIENT' AND O.PatientID = pat.PatientID LEFT OUTER JOIN
      dbo.twksResults AS r ON ex.OrderTestID = r.OrderTestID AND ex.RerunNumber = r.RerunNumber AND ex.MultiItemNumber = r.MultiPointNumber
      WHERE     (ex.ReplicateNumber = 1) AND (ex.MultiItemNumber = 1)
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksMonitorWSTabOFFSCALC') = 1)
      DROP VIEW [dbo].vwksMonitorWSTabOFFSCALC
      GO

      SET ANSI_NULLS ON
      GO

      SET QUOTED_IDENTIFIER ON
      GO

      CREATE VIEW [dbo].[vwksMonitorWSTabOFFSCALC]
      AS
      SELECT     NULL AS ExecutionStatus, NULL AS ExecutionID, NULL AS RerunNumber, NULL AS Paused, ot.AnalyzerID, re.WorkSessionID, ot.OrderTestID, ot.TestType, ot.TestID,
      (CASE ot.TestType WHEN 'CALC' THEN calc.CalcTestName WHEN 'OFFS' THEN offs.Name ELSE 'BLANK' END) AS TestName, ot.SampleType, ot.OrderTestStatus,
      o.OrderID, o.SampleClass, o.StatFlag, o.OrderStatus, ISNULL(o.PatientID, o.SampleID) AS ElementName, REPLACE(re.SpecimenIDList, CHAR(13), ', ') AS SpecimenIDList, re.ElementFinished,
      CASE WHEN o.PatientID IS NOT NULL THEN pat.FirstName + ' ' + pat.LastName ELSE o.SampleID END AS PatientName, r.ExportStatus, r.Printed
      FROM         dbo.twksOrderTests AS ot INNER JOIN
      dbo.twksOrders AS o ON o.OrderID = ot.OrderID LEFT OUTER JOIN
      dbo.tparCalculatedTests AS calc ON calc.CalcTestID = ot.TestID LEFT OUTER JOIN
      dbo.tparOffSystemTests AS offs ON offs.OffSystemTestID = ot.TestID LEFT OUTER JOIN
      dbo.twksWSRequiredElements AS re ON o.PatientID = re.PatientID AND ot.SampleType = re.SampleType LEFT OUTER JOIN
      dbo.tparPatients AS pat ON o.SampleClass = 'PATIENT' AND o.PatientID = pat.PatientID LEFT OUTER JOIN
      dbo.twksResults AS r ON ot.OrderTestID = r.OrderTestID
      WHERE     (o.SampleClass = 'PATIENT') AND (ot.TestType = 'CALC') AND (ot.OrderTestStatus &lt;&gt; 'OPEN') OR
      (ot.TestType = 'OFFS')
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksResultsCTRL') = 1)
      DROP VIEW [dbo].vwksResultsCTRL
      GO

      SET ANSI_NULLS ON
      GO

      SET QUOTED_IDENTIFIER ON
      GO

      CREATE VIEW [dbo].[vwksResultsCTRL]
      AS
      SELECT     dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
      dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
      dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
      dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
      dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
      dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
      dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
      dbo.twksResults.TS_DateTime, dbo.twksResults.WorkSessionID, dbo.twksResults.AnalyzerID, dbo.tparTestSamples.BlankAbsorbanceLimit,
      dbo.tparTests.KineticBlankLimit, 'NULL' AS CalibratorLotNumber, dbo.twksOrderTests.SampleType, NULL AS TheoricalConcentration,
      dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, dbo.tparTestSamples.FactorLowerLimit, dbo.tparTestSamples.FactorUpperLimit, dbo.tparTests.DecimalsAllowed,
      dbo.tparControls.ControlName, dbo.tparControls.LotNumber AS ControlLotNumber, dbo.tparTestControls.MinConcentration, dbo.tparTestControls.MaxConcentration,
      dbo.twksOrderTests.TestType, dbo.twksResults.Collapsed, dbo.tparTests.TestName, dbo.twksOrderTests.OrderTestStatus,
      dbo.twksWSRepetitionsToAdd.PostDilutionType, dbo.twksOrderTests.TestID, dbo.tparTestSamples.ActiveRangeType, dbo.twksOrderTests.OrderID,
      dbo.twksResults.ManualResult, dbo.twksResults.ManualResultText, dbo.twksOrders.StatFlag, '' AS CalibratorName, '' AS AnalysisMode, dbo.twksResults.CurveSlope,
      dbo.twksResults.CurveOffset, dbo.twksResults.CurveCorrelation, NULL AS CalibratorID, dbo.twksOrders.SampleClass, NULL AS NumberOfCalibrator,
      dbo.twksOrders.PatientID, dbo.twksOrders.SampleID, dbo.twksOrderTests.TubeType, dbo.tparTestSamples.TestLongName
      FROM         dbo.twksResults INNER JOIN
      dbo.twksOrderTests ON dbo.twksResults.OrderTestID = dbo.twksOrderTests.OrderTestID INNER JOIN
      dbo.tparTestSamples ON dbo.twksOrderTests.TestID = dbo.tparTestSamples.TestID AND
      dbo.twksOrderTests.SampleType = dbo.tparTestSamples.SampleType INNER JOIN
      dbo.tparTests ON dbo.tparTestSamples.TestID = dbo.tparTests.TestID INNER JOIN
      dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparTests.MeasureUnit LEFT OUTER JOIN
      dbo.twksWSRepetitionsToAdd ON dbo.twksResults.OrderTestID = dbo.twksWSRepetitionsToAdd.OrderTestID INNER JOIN
      dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID INNER JOIN
      dbo.tparControls ON dbo.twksOrderTests.ControlID = dbo.tparControls.ControlID INNER JOIN
      dbo.tparTestControls ON dbo.twksOrderTests.ControlID = dbo.tparTestControls.ControlID AND dbo.twksOrderTests.TestID = dbo.tparTestControls.TestID AND
      dbo.twksOrderTests.SampleType = dbo.tparTestControls.SampleType
      WHERE     (dbo.twksOrderTests.TestType = 'STD') AND (dbo.twksOrders.SampleClass = 'CTRL') AND (dbo.twksOrderTests.TestType = dbo.tparTestControls.TestType)
      UNION
      SELECT     dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
      dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
      dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
      dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
      dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
      dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
      dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
      dbo.twksResults.TS_DateTime, dbo.twksResults.WorkSessionID, dbo.twksResults.AnalyzerID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL
      AS CalibratorLotNumber, dbo.twksOrderTests.SampleType, NULL AS TheoricalConcentration, dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, NULL
      AS FactorLowerLimit, NULL AS FactorUpperLimit, tparISETestSamples.Decimals AS DecimalsAllowed, dbo.tparControls.ControlName,
      dbo.tparControls.LotNumber AS ControlLotNumber, dbo.tparTestControls.MinConcentration, dbo.tparTestControls.MaxConcentration, dbo.twksOrderTests.TestType,
      dbo.twksResults.Collapsed, dbo.tparISETests.Name, dbo.twksOrderTests.OrderTestStatus, dbo.twksWSRepetitionsToAdd.PostDilutionType,
      dbo.twksOrderTests.TestID, dbo.tparISETestSamples.ActiveRangeType, dbo.twksOrderTests.OrderID, dbo.twksResults.ManualResult,
      dbo.twksResults.ManualResultText, dbo.twksOrders.StatFlag, '' AS CalibratorName, '' AS AnalysisMode, dbo.twksResults.CurveSlope, dbo.twksResults.CurveOffset,
      dbo.twksResults.CurveCorrelation, NULL AS CalibratorID, dbo.twksOrders.SampleClass, NULL AS NumberOfCalibrator, dbo.twksOrders.PatientID,
      dbo.twksOrders.SampleID, dbo.twksOrderTests.TubeType, NULL AS TestLongName
      FROM         dbo.twksResults INNER JOIN
      dbo.twksOrderTests ON dbo.twksResults.OrderTestID = dbo.twksOrderTests.OrderTestID INNER JOIN
      dbo.tparISETestSamples ON dbo.twksOrderTests.TestID = dbo.tparISETestSamples.ISETestID AND
      dbo.twksOrderTests.SampleType = dbo.tparISETestSamples.SampleType INNER JOIN
      dbo.tparISETests ON dbo.tparISETestSamples.ISETestID = dbo.tparISETests.ISETestID INNER JOIN
      dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparISETests.Units LEFT OUTER JOIN
      dbo.twksWSRepetitionsToAdd ON dbo.twksResults.OrderTestID = dbo.twksWSRepetitionsToAdd.OrderTestID INNER JOIN
      dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID INNER JOIN
      dbo.tparControls ON dbo.twksOrderTests.ControlID = dbo.tparControls.ControlID INNER JOIN
      dbo.tparTestControls ON dbo.twksOrderTests.ControlID = dbo.tparTestControls.ControlID AND dbo.twksOrderTests.TestID = dbo.tparTestControls.TestID AND
      dbo.twksOrderTests.SampleType = dbo.tparTestControls.SampleType
      WHERE     (dbo.twksOrderTests.TestType = 'ISE') AND (dbo.twksOrders.SampleClass = 'CTRL') AND (dbo.twksOrderTests.TestType = dbo.tparTestControls.TestType)

      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksResultsNotCTRL') = 1)
      DROP VIEW [dbo].vwksResultsNotCTRL
      GO

      SET ANSI_NULLS ON
      GO

      SET QUOTED_IDENTIFIER ON
      GO

      CREATE VIEW [dbo].[vwksResultsNotCTRL]
      AS
      SELECT     dbo.twksResults.OrderTestID, dbo.twksResults.RerunNumber, dbo.twksResults.MultiPointNumber, dbo.twksResults.ValidationStatus,
      dbo.twksResults.AcceptedResultFlag, dbo.twksResults.TestVersion, dbo.twksResults.ManualResultFlag, dbo.twksResults.UserComment,
      dbo.twksResults.ExportStatus, dbo.twksResults.ExportDateTime, dbo.twksResults.Printed, dbo.twksResults.ABSValue, dbo.twksResults.ABS_Error,
      dbo.twksResults.SubstrateDepletion, dbo.twksResults.ABS_Initial, dbo.twksResults.ABS_MainFilter, dbo.twksResults.ABS_WorkReagent,
      dbo.twksResults.CalibratorFactor, dbo.twksResults.CalibrationError, dbo.twksResults.CalibratorBlankAbsUsed, dbo.twksResults.CurveResultsID,
      dbo.twksResults.CurveGrowthType, dbo.twksResults.CurveType, dbo.twksResults.CurveAxisXType, dbo.twksResults.CurveAxisYType,
      dbo.twksResults.RelativeErrorCurve, dbo.twksResults.CONC_Value, dbo.twksResults.CONC_Error, dbo.twksResults.ResultDateTime, dbo.twksResults.TS_User,
      dbo.twksResults.TS_DateTime, dbo.twksResults.WorkSessionID, dbo.twksResults.AnalyzerID, dbo.tparTestSamples.BlankAbsorbanceLimit,
      dbo.tparTests.KineticBlankLimit, dbo.tparCalibrators.LotNumber AS CalibratorLotNumber, dbo.twksOrderTests.SampleType,
      ISNULL(ISNULL(tparTestCalibratorValues_1.TheoricalConcentration,
      (SELECT     TOP (1) dbo.tparTestCalibratorValues.TheoricalConcentration
      FROM          dbo.tparTestCalibrators INNER JOIN
      dbo.tparTestCalibratorValues ON dbo.tparTestCalibrators.TestCalibratorID = dbo.tparTestCalibratorValues.TestCalibratorID
      WHERE      (dbo.tparTestCalibrators.TestID = dbo.tparTestSamples.TestID) AND
      (dbo.tparTestCalibrators.SampleType = dbo.tparTestSamples.SampleTypeAlternative))), 0) AS TheoricalConcentration,
      dbo.tcfgMasterData.FixedItemDesc AS MeasureUnit, dbo.tparTestSamples.FactorLowerLimit, dbo.tparTestSamples.FactorUpperLimit, dbo.tparTests.DecimalsAllowed,
      CONVERT(NVARCHAR(16), NULL) AS ControlName, CONVERT(NVARCHAR(16), NULL) AS ControlLotNumber, NULL AS MinConcentration, NULL AS MaxConcentration,
      dbo.twksOrderTests.TestType, dbo.twksResults.Collapsed, dbo.tparTests.TestName, dbo.twksOrderTests.OrderTestStatus,
      dbo.twksWSRepetitionsToAdd.PostDilutionType, dbo.twksOrderTests.TestID, dbo.tparTestSamples.ActiveRangeType, dbo.twksOrderTests.OrderID,
      dbo.twksResults.ManualResult, dbo.twksResults.ManualResultText, dbo.twksOrders.StatFlag, dbo.tparCalibrators.CalibratorName,
      dbo.tfmwMultiLanguageResources.ResourceText AS AnalysisMode, dbo.twksResults.CurveSlope, dbo.twksResults.CurveOffset, dbo.twksResults.CurveCorrelation,
      dbo.tparCalibrators.CalibratorID, dbo.twksOrders.SampleClass, dbo.tparCalibrators.NumberOfCalibrators, dbo.twksOrders.PatientID, dbo.twksOrders.SampleID,
      dbo.twksOrderTests.TubeType, dbo.tparTestSamples.TestLongName
      FROM         dbo.tparTestCalibratorValues AS tparTestCalibratorValues_1 RIGHT OUTER JOIN
      dbo.twksResults INNER JOIN
      dbo.twksOrderTests ON dbo.twksResults.OrderTestID = dbo.twksOrderTests.OrderTestID INNER JOIN
      dbo.tparTestSamples ON dbo.twksOrderTests.TestID = dbo.tparTestSamples.TestID AND
      dbo.twksOrderTests.SampleType = dbo.tparTestSamples.SampleType INNER JOIN
      dbo.twksWSOrderTests ON dbo.twksWSOrderTests.OrderTestID = dbo.twksResults.OrderTestID INNER JOIN
      dbo.tparTests ON dbo.tparTestSamples.TestID = dbo.tparTests.TestID INNER JOIN
      dbo.tcfgMasterData ON dbo.tcfgMasterData.SubTableID = 'TEST_UNITS' AND dbo.tcfgMasterData.ItemID = dbo.tparTests.MeasureUnit LEFT OUTER JOIN
      dbo.tparTestCalibrators AS tparTestCalibrators_1 ON dbo.tparTestSamples.TestID = tparTestCalibrators_1.TestID AND
      dbo.tparTestSamples.SampleType = tparTestCalibrators_1.SampleType LEFT OUTER JOIN
      dbo.tparCalibrators ON tparTestCalibrators_1.CalibratorID = dbo.tparCalibrators.CalibratorID ON
      tparTestCalibratorValues_1.TestCalibratorID = tparTestCalibrators_1.TestCalibratorID LEFT OUTER JOIN
      dbo.twksWSRepetitionsToAdd ON dbo.twksResults.OrderTestID = dbo.twksWSRepetitionsToAdd.OrderTestID INNER JOIN
      dbo.twksOrders ON dbo.twksOrderTests.OrderID = dbo.twksOrders.OrderID LEFT OUTER JOIN
      dbo.tfmwPreloadedMasterData ON dbo.tparTests.AnalysisMode = dbo.tfmwPreloadedMasterData.ItemID AND
      dbo.tfmwPreloadedMasterData.SubTableID = 'ANALYSIS_MODES' LEFT OUTER JOIN
      dbo.tcfgUserSettings ON dbo.tcfgUserSettings.SettingID = 'CURRENT_LANGUAGE' LEFT OUTER JOIN
      dbo.tfmwMultiLanguageResources ON dbo.tfmwPreloadedMasterData.ResourceID = dbo.tfmwMultiLanguageResources.ResourceID AND
      dbo.tfmwMultiLanguageResources.LanguageID = dbo.tcfgUserSettings.CurrentValue
      WHERE     (dbo.twksOrderTests.TestType = 'STD') AND (dbo.twksOrders.SampleClass &lt;&gt; 'CTRL')
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vhisTestSamples') = 1)
      DROP VIEW [dbo].vhisTestSamples
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vhisTestSamples] AS
      SELECT  'STD' AS TestType, TS .HistTestID, TS .TestID, TS .TestName, TS .TestVersionNumber, TS .DecimalsAllowed, NULL AS FormulaText,
      (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition, TS.TestLongName
      FROM    thisTestSamples TS LEFT OUTER JOIN vcfgTestSortingForReports T ON TS .TestName = T .TestName AND T .TestType = 'STD'
      UNION
      SELECT  'ISE' AS TestType, TS .HistISETestID AS HistTestID, TS .ISETestID AS TestID, TS .ISETestName AS TestName, 0 AS TestVersionNumber,
      TS .DecimalsAllowed, NULL  AS FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition,
      NULL AS TestLongName
      FROM    thisISETestSamples TS LEFT OUTER JOIN vcfgTestSortingForReports T ON TS .ISETestName = T .TestName AND T .TestType = 'ISE'
      UNION
      SELECT  'CALC' AS TestType, TS .HistCalcTestID AS HistTestID, TS .CalcTestID AS TestID, TS .CalcTestLongName AS TestName, 0 AS TestVersionNumber,
      TS .DecimalsAllowed, TS .FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition,
      NULL AS TestLongName
      FROM    thisCalculatedTests TS LEFT OUTER JOIN vcfgTestSortingForReports T ON TS .CalcTestLongName = T .TestName AND T .TestType = 'CALC'
      UNION
      SELECT  'OFFS' AS TestType, TS .HistOffSystemTestID AS HistTestID, TS .OffSystemTestID AS TestID, TS .OffSystemTestName AS TestName, 0 AS TestVersionNumber,
      TS .DecimalsAllowed, NULL AS FormulaText, (CASE WHEN T .TestPosition IS NOT NULL THEN T .TestPosition ELSE 999999999 END) AS TestPosition,
      NULL AS TestLongName
      FROM    thisOffSystemTestSamples TS LEFT OUTER JOIN vcfgTestSortingForReports T ON TS .OffSystemTestName = T .TestName AND T .TestType = 'OFFS'
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vhisWSResults') = 1)
      DROP VIEW [dbo].vhisWSResults
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vhisWSResults] AS
      SELECT  R.HistOrderTestID, R.AnalyzerID, R.WorkSessionID, R.ResultDateTime,
      (CASE WHEN OT.SampleClass = 'PATIENT' AND OT.SampleID IS NOT NULL THEN OT.SampleID
      WHEN OT.SampleClass = 'PATIENT' AND P.PatientID IS NOT NULL THEN P.PatientID
      ELSE NULL END) AS PatientID,
      OT.HistPatientID, OT.SampleClass, OT.StatFlag, OT.TestType, OT.SampleType, TS.TestID, TS.TestName, TS.TestVersionNumber, TS.TestPosition, R.CONCValue,
      (CASE WHEN NOT r.RemarkAlert IS NULL THEN r.RemarkAlert ELSE '' END) AS RemarkAlert, TS.DecimalsAllowed, MD.FixedItemDesc AS MeasureUnit,
      R.MinRefRange, R.MaxRefRange, R.ExportStatus, R.AlarmList, TS.FormulaText, R.MultiPointNumber, R.ManualResultFlag, R.ManualResult, R.ManualResultText,
      R.LISMessageID, OT.LISRequest, OT.ExternalQC, OT.ESOrderID, OT.LISOrderID, OT.ESPatientID, OT.LISPatientID, OT.LISTestName, OT.LISSampleType, OT.LISUnits,
      TS.TestLongName
      FROM    dbo.thisWSResults AS R INNER JOIN dbo.thisWSOrderTests AS OT ON R.HistOrderTestID = OT.HistOrderTestID
      INNER JOIN dbo.vhisTestSamples AS TS ON OT.HistTestID = TS.HistTestID AND OT.TestType = TS.TestType AND TS.TestVersionNumber = COALESCE (OT.TestVersionNumber, 0)
      LEFT OUTER JOIN dbo.tcfgMasterData AS MD ON MD.SubTableID = 'TEST_UNITS' AND MD.ItemID = OT.MeasureUnit
      LEFT OUTER JOIN dbo.thisPatients AS P ON P.HistPatientID = OT.HistPatientID
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksResults') = 1)
      DROP VIEW [dbo].vwksResults
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vwksResults]
      AS
      SELECT     *
      FROM         dbo.vwksResultsNotCTRL
      UNION ALL
      SELECT     *
      FROM         dbo.vwksResultsCTRL
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'v' AND name = 'vwksCompleteResults') = 1)
      DROP VIEW [dbo].vwksCompleteResults
      GO
      SET ANSI_NULLS ON
      GO
      SET QUOTED_IDENTIFIER ON
      GO
      CREATE VIEW [dbo].[vwksCompleteResults]
      AS
      SELECT DISTINCT
      OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
      Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
      CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
      TS_DateTime, AnalyzerID, WorkSessionID, BlankAbsorbanceLimit, KineticBlankLimit, CalibratorLotNumber, SampleType, TheoricalConcentration, MeasureUnit,
      FactorLowerLimit, FactorUpperLimit, DecimalsAllowed, ControlName, ControlLotNumber, MinConcentration, MaxConcentration, TestType, Collapsed, TestName,
      OrderTestStatus, PostDilutionType, TestID, ActiveRangeType, OrderID, ManualResult, ManualResultText, StatFlag, CalibratorName, AnalysisMode, CurveSlope,
      CurveOffset, CurveCorrelation, CalibratorID, SampleClass, NumberOfCalibrators, NULL AS STDOrderTestID, NULL AS PatientName, ISNULL(PatientID, SampleID)
      AS PatientID, NULL AS ControlNum, TestLongName
      FROM         dbo.vwksResults
      UNION ALL
      SELECT DISTINCT
      OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
      Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
      CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
      TS_DateTime, AnalyzerID, WorkSessionID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL AS CalibratorLotNumber, SampleType,
      TheoricalConcentration, MeasureUnit, NULL AS FactorLowerLimit, NULL AS FactorUpperLimit, DecimalsAllowed, NULL AS ControlName, NULL
      AS ControlLotNumber, NULL AS MinConcentration, NULL AS MaxConcentration, TestType, Collapsed, TestName, NULL AS OrderTestStatus, NULL AS PostDilutionType,
      TestID, ActiveRangeType, OrderID, NULL AS ManualResult, NULL AS ManualResultText, StatFlag, NULL AS CalibratorName, NULL AS AnalysisMode, NULL
      AS CurveSlope, NULL AS CurveOffset, NULL AS CurveCorrelation, NULL AS CalibratorID, SampleClass, NULL AS NumberOfCalibrators, STDOrderTestID, NULL
      AS PatientName, PatientID, NULL AS ControlNum, NULL AS TestLongName
      FROM         dbo.vwksCalcResults
      UNION ALL
      SELECT DISTINCT
      OrderTestID, RerunNumber, MultiPointNumber, ValidationStatus, AcceptedResultFlag, TestVersion, ManualResultFlag, UserComment, ExportStatus, ExportDateTime,
      Printed, ABSValue, ABS_Error, SubstrateDepletion, ABS_Initial, ABS_MainFilter, ABS_WorkReagent, CalibratorFactor, CalibrationError, CalibratorBlankAbsUsed,
      CurveResultsID, CurveGrowthType, CurveType, CurveAxisXType, CurveAxisYType, RelativeErrorCurve, CONC_Value, CONC_Error, ResultDateTime, TS_User,
      TS_DateTime, AnalyzerID, WorkSessionID, NULL AS BlankAbsorbanceLimit, NULL AS KineticBlankLimit, NULL AS CalibratorLotNumber, SampleType,
      TheoricalConcentration, MeasureUnit, NULL AS FactorLowerLimit, NULL AS FactorUpperLimit, DecimalsAllowed, NULL AS ControlName, NULL
      AS ControlLotNumber, NULL AS MinConcentration, NULL AS MaxConcentration, TestType, Collapsed, TestName, OrderTestStatus, NULL AS PostDilutionType, TestID,
      ActiveRangeType, OrderID, NULL AS ManualResult, ManualResultText, StatFlag, NULL AS CalibratorName, NULL AS AnalysisMode, NULL AS CurveSlope, NULL
      AS CurveOffset, NULL AS CurveCorrelation, NULL AS CalibratorID, SampleClass, NULL AS NumberOfCalibrators, NULL AS STDOrderTestID, PatientName, PatientID,
      ControlNum, NULL AS TestLongName
      FROM         vwksWSISEOffSystemResults;
      GO
    </StructureScript>
    <UpdateScript>
      UPDATE dbo.tfmwVersions SET UserSoftware = '3.0.0', ServiceSoftware = '1.2.0', FirmwareScripts = '1.1.0', Firmware = '2.06'
      GO
      UPDATE tcfgUserSettings
      SET
      CurrentValue = (SELECT CurrentValue From tcfgUserSettings WHERE SettingID = 'BARCODE_SAMPLETYPE_FLAG'),
      Status = (SELECT Status From tcfgUserSettings WHERE SettingID = 'BARCODE_SAMPLETYPE_FLAG')
      WHERE SettingID = 'BARCODE_SAMPLEID_FLAG'
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwScreenBlockStatus') = 1)
      BEGIN
      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='AUTOPOS' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'AUTOPOS', 'RUNNINGPAUSE', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='CHANGESIZE' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'CHANGESIZE', 'RUNNINGPAUSE', 1, 0, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='CHECKPOS' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'CHECKPOS', 'RUNNINGPAUSE', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='DELETE' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'DELETE', 'RUNNINGPAUSE', 1, 0, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='INFOAREA' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'INFOAREA', 'RUNNINGPAUSE', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='LOAD' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'LOAD', 'RUNNINGPAUSE', 1, 0, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='REFILL' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'REFILL', 'RUNNINGPAUSE', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='REPORT' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'REPORT', 'RUNNINGPAUSE', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='RERUN' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'RERUN', 'RUNNINGPAUSE', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='RESET' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'RESET', 'RUNNINGPAUSE', 1, 0, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='ROTORCHECK' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'ROTORCHECK', 'RUNNINGPAUSE', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='ROTORDRAGDROP' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'ROTORDRAGDROP', 'RUNNINGPAUSE', 1, 0, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='SAVE' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'SAVE', 'RUNNINGPAUSE', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='SCAN' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'SCAN', 'RUNNINGPAUSE', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='SCROLL' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'SCROLL', 'RUNNINGPAUSE', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='TREEDRAGDROP' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'TREEDRAGDROP', 'RUNNINGPAUSE', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='VIEWRESULTS' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'VIEWRESULTS', 'RUNNINGPAUSE', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='WARNING' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'WARNING', 'RUNNINGPAUSE', 1, 1, NULL, NULL)
      END
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwScreenBlockStatus') = 1)
      BEGIN
      UPDATE tfmwScreenBlockStatus SET AppStatus = 'STANDBY'
      WHERE  ScreenID = 'WKS001' AND BlockID = 'TREEDRAGDROP' AND AppStatus = 'STANBY'
      END
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwSwFlags') = 1)
      BEGIN
      IF ((SELECT COUNT(*) FROM tfmwSwFlags WHERE FlagID='ENDprocess') = 0)
      INSERT INTO tfmwSwFlags (FlagID, AllowedValues)
      VALUES ('ENDprocess', 'INPROCESS, PAUSED, CLOSED or NULL')
      END
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwScreenBlockStatus') = 1)
      BEGIN
      UPDATE tfmwScreenBlockStatus SET BlockEnabled = 1 WHERE ScreenID = 'WKS001' AND AppStatus = 'EMPTY' AND DataLoaded = 0 AND BlockID = 'INFOAREA'
      UPDATE tfmwScreenBlockStatus SET BlockEnabled = 1 WHERE ScreenID = 'WKS001' AND AppStatus = 'EMPTY' AND DataLoaded = 0 AND BlockID = 'SCROLL'

      UPDATE tfmwScreenBlockStatus SET BlockEnabled = 0 WHERE ScreenID = 'WKS001' AND AppStatus = 'EMPTY' AND DataLoaded = 1 AND BlockID = 'WARNING'

      UPDATE tfmwScreenBlockStatus SET BlockEnabled = 1 WHERE ScreenID = 'WKS001' AND AppStatus = 'PENDING' AND DataLoaded = 0 AND BlockID = 'INFOAREA'
      UPDATE tfmwScreenBlockStatus SET BlockEnabled = 1 WHERE ScreenID = 'WKS001' AND AppStatus = 'PENDING' AND DataLoaded = 0 AND BlockID = 'SCROLL'

      UPDATE tfmwScreenBlockStatus SET BlockEnabled = 1 WHERE ScreenID = 'WKS001' AND AppStatus = 'STANDBY' AND DataLoaded = 1 AND BlockID = 'RESET'
      UPDATE tfmwScreenBlockStatus SET BlockEnabled = 1 WHERE ScreenID = 'WKS001' AND AppStatus = 'SAMPLINGSTOP' AND DataLoaded = 1 AND BlockID = 'RESET'
      END
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwAlarms') = 1)
      BEGIN
      INSERT INTO tfmwAlarms (AlarmID, AlarmSource, AlarmType, Name, NameResourceID, Description, DescResourceID, Solution, SolResourceID, Sound, OnRunningSound, Freeze, OKType, LISValue)
      VALUES('WS_PAUSE_MODE_WARN', 'INS', 'WARNING', 'Modo pausa', 'WS_PAUSE_MODE', 'Se ha entrado en el modo pausa', 'ALM_WS_PAUSE_MODE', NULL, NULL, 0, 0, NULL, 1, NULL)
      END
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwFieldLimits') = 1)
      BEGIN
      UPDATE tfmwFieldLimits  SET MinValue = 36 WHERE LimitID = 'READING2_CYCLES'
      END
      GO
      IF ((SELECT COUNT(*) FROM tfmwMessages WHERE MessageID = 'PAUSE_IN_RUNNING') = 0)
      BEGIN
      insert into tfmwMessages (MessageID, MessageType, ResourceID)
      VALUES ('PAUSE_IN_RUNNING', 'Information', 'MSG_PAUSE');
      END
      GO
      IF ((SELECT COUNT(*) FROM Ax00.dbo.tfmwScreenBlockStatus WHERE AppStatus ='RUNNINGPAUSE' AND BlockID = 'ROTORDRAGDROP')=1)
      UPDATE Ax00.dbo.tfmwScreenBlockStatus
      SET BlockEnableD = 1
      WHERE  appstatus ='RUNNINGPAUSE' AND BlockID = 'ROTORDRAGDROP'
      GO
      IF ((SELECT COUNT(*) FROM Ax00.dbo.tfmwScreenBlockStatus WHERE AppStatus ='RUNNINGPAUSE' AND BlockID = 'CHANGESIZE')=1)
      UPDATE Ax00.dbo.tfmwScreenBlockStatus
      SET BlockEnableD = 1
      WHERE  appstatus ='RUNNINGPAUSE' AND BlockID = 'CHANGESIZE'
      GO
      IF ((SELECT COUNT(*) FROM Ax00.dbo.tfmwScreenBlockStatus WHERE AppStatus ='RUNNINGPAUSE' AND BlockID = 'DELETE')=1)
      UPDATE Ax00.dbo.tfmwScreenBlockStatus
      SET BlockEnableD = 1
      WHERE  appstatus ='RUNNINGPAUSE' AND BlockID = 'DELETE'
      GO
      IF ((SELECT COUNT(*) FROM tfmwMessages WHERE MessageID = 'ALLOWED_ACTION_PAUSE') = 0)
      INSERT INTO Ax00.dbo.tfmwMessages
      (MessageID,MessageType,ResourceID)
      VALUES
      ('ALLOWED_ACTION_PAUSE','Information','MSG_ALLOWED_ACTION_PAUSE')
      GO
      IF ((SELECT COUNT(*) FROM tfmwSpecialTestsSettings WHERE TestID = 19 AND SampleType = 'SER' and SettingName = 'CRITICAL_PAUSEMODE') = 0)
      BEGIN
      INSERT INTO tfmwSpecialTestsSettings VALUES (19, 'SER', 'CRITICAL_PAUSEMODE', 1, 1)
      END
      IF ((SELECT COUNT(*) FROM tfmwSpecialTestsSettings WHERE TestID = 20 AND SampleType = 'SER' and SettingName = 'CRITICAL_PAUSEMODE') = 0)
      BEGIN
      INSERT INTO tfmwSpecialTestsSettings VALUES (20, 'SER', 'CRITICAL_PAUSEMODE', 1, 1)
      END
      GO
      IF ((SELECT COUNT(*) FROM tfmwMessages WHERE MessageID = 'CRITICAL_TESTS_PAUSEMODE') = 0)
      BEGIN
      INSERT INTO tfmwMessages VALUES('CRITICAL_TESTS_PAUSEMODE', 'Warning', 'MSG_CRITICAL_TESTS_PAUSEMODE')
      END
      GO
      IF ((SELECT COUNT(*) FROM tfmwScreenBlocks WHERE ScreenID='WKS001' AND BlockID='MANUALBARCODE') = 0)
      INSERT INTO Ax00.dbo.tfmwScreenBlocks
      (ScreenID, BlockID ,Description)
      VALUES
      ('WKS001', 'MANUALBARCODE', 'Allow to enter the barcode value')
      GO
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwScreenBlockStatus') = 1)
      BEGIN

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='MANUALBARCODE' AND AppStatus='ABORTED') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'MANUALBARCODE', 'ABORTED', 1, 0, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='MANUALBARCODE' AND AppStatus='EMPTY') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'MANUALBARCODE', 'EMPTY', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='MANUALBARCODE' AND AppStatus='FINISHED') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'MANUALBARCODE', 'FINISHED', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='MANUALBARCODE' AND AppStatus='PENDING') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'MANUALBARCODE', 'PENDING', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='MANUALBARCODE' AND AppStatus='RUNNING') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'MANUALBARCODE', 'RUNNING', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='MANUALBARCODE' AND AppStatus='RUNNINGPAUSE') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'MANUALBARCODE', 'RUNNINGPAUSE', 1, 1, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='MANUALBARCODE' AND AppStatus='SAMPLINGSTOP') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'MANUALBARCODE', 'SAMPLINGSTOP', 1, 0, NULL, NULL)

      IF ((SELECT COUNT(*) FROM tfmwScreenBlockStatus WHERE ScreenID='WKS001' AND BlockID='MANUALBARCODE' AND AppStatus='STANDBY') = 0)
      INSERT INTO tfmwScreenBlockStatus (ScreenID, BlockID, AppStatus, DataLoaded, BlockEnabled, LowerUserLevel, DefaultEnabled)
      VALUES ('WKS001', 'MANUALBARCODE', 'STANDBY', 1, 1, NULL, NULL)
      END
      GO
      IF ((SELECT COUNT(*) FROM tfmwMessages WHERE MessageID = 'RES_RECOVER_INPAUSE') = 0)
      BEGIN
      INSERT INTO tfmwMessages (MessageID, MessageType, ResourceID)
      VALUES ('RES_RECOVER_INPAUSE', 'Question', 'MSG_RES_RECOVER_INPAUSE');
      END
      GO
      UPDATE [Ax00].[dbo].[tparReagents]
      SET CodeTest = 511 WHERE ReagentID = 148 OR ReagentID = 149
      GO
    </UpdateScript>
  </AppVersion >
  <AppVersion>
    <Version>3.01</Version>
    <StructureScript>
      GO
    </StructureScript>
    <UpdateScript>
      UPDATE dbo.tfmwVersions SET UserSoftware = '3.0.1', ServiceSoftware = '1.2.1', FirmwareScripts = '1.1.0', Firmware = '2.08'
      GO
      IF ((SELECT COUNT(*) FROM [dbo].[tfmwMessages] WHERE [MessageID] = 'ONLY_ISE_WS_NOT_STARTED2') = 0)
      INSERT INTO [dbo].[tfmwMessages] ([MessageID],[MessageType],[ResourceID])
      VALUES ('ONLY_ISE_WS_NOT_STARTED2','Information','MSG_ONLY_ISE_WS_NOT_STARTED2')
      GO
    </UpdateScript>
  </AppVersion >
  <AppVersion>
    <Version>3.02</Version>
    <StructureScript>
      GO
    </StructureScript>
    <UpdateScript>
      UPDATE dbo.tfmwVersions SET UserSoftware = '3.0.2', ServiceSoftware = '1.2.2', FirmwareScripts = '1.1.0', Firmware = '2.10'
      GO
    </UpdateScript>
  </AppVersion >
  <AppVersion>
    <Version>3.03</Version>
    <StructureScript>
      GO
    </StructureScript>
    <UpdateScript>
      UPDATE dbo.tfmwVersions SET UserSoftware = '3.0.3', ServiceSoftware = '1.2.3', FirmwareScripts = '1.1.0', Firmware = '2.12'
      GO
    </UpdateScript>
  </AppVersion >
  <AppVersion>
    <Version>3.04</Version>
    <StructureScript>
      GO
    </StructureScript>
    <UpdateScript>
      UPDATE dbo.tfmwVersions SET UserSoftware = '3.0.4', ServiceSoftware = '1.2.4', FirmwareScripts = '1.1.0', Firmware = '0.13'
      GO
    </UpdateScript>
  </AppVersion >
  <AppVersion>
    <Version>3.05</Version>
    <StructureScript>
      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksWSBLines' AND sc.name = 'Type') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].twksWSBLines ADD Type [nvarchar](15) NOT NULL DEFAULT 'STATIC'
      END

      SET ANSI_PADDING ON
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_twksWSBLines') = 1)
      BEGIN
      ALTER TABLE [Ax00].[dbo].twksWSBLines DROP CONSTRAINT [PK_twksWSBLines]
      END

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_twksWSBLines') = 0)
      BEGIN
      ALTER TABLE [Ax00].[dbo].twksWSBLines ADD  CONSTRAINT [PK_twksWSBLines] PRIMARY KEY CLUSTERED
      (
      [AnalyzerID] ASC,
      [BaseLineID] ASC,
      [Wavelength] ASC,
      [WellUsed] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      END
      SET ANSI_PADDING OFF
      GO


      SET ANSI_PADDING ON
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tfmwSwParameters_1') = 1)
      BEGIN
      ALTER TABLE [Ax00].[dbo].tfmwSwParameters DROP CONSTRAINT PK_tfmwSwParameters_1
      END

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tfmwSwParameters' AND sc.name = 'ParameterID') = 1
      BEGIN
      ALTER TABLE [Ax00].[dbo].tfmwSwParameters DROP COLUMN [ParameterID]
      END

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tfmwSwParameters' AND sc.name = 'ParameterID') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].tfmwSwParameters ADD [ParameterID] [int] IDENTITY(1,1) NOT NULL
      END

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tfmwSwParameters_1') = 0)
      BEGIN
      ALTER TABLE [Ax00].[dbo].tfmwSwParameters ADD  CONSTRAINT [PK_tfmwSwParameters_1] PRIMARY KEY CLUSTERED
      (
      [ParameterID] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      END

      SET ANSI_PADDING OFF
      GO


      SET ANSI_PADDING ON
      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tfmwPreloadedRanges') = 1)
      BEGIN
      ALTER TABLE [Ax00].[dbo].tfmwFieldLimits DROP CONSTRAINT PK_tfmwPreloadedRanges
      END

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'tfmwFieldLimits' AND sc.name = 'IndexID') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].tfmwFieldLimits ADD [IndexID] [int] IDENTITY(1,1) NOT NULL
      END

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'PK' AND name = 'PK_tfmwFieldLimits_1') = 0)
      BEGIN
      ALTER TABLE [Ax00].[dbo].tfmwFieldLimits ADD  CONSTRAINT PK_tfmwFieldLimits_1 PRIMARY KEY CLUSTERED
      (
      [IndexID] ASC
      )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
      END

      SET ANSI_PADDING OFF
      GO

      IF (SELECT COUNT(*) FROM sys.syscolumns sc INNER JOIN sys.sysobjects so ON sc.id = so.id WHERE so.xtype = 'U' AND so.name = 'twksWSBLinesByWell' AND sc.name = 'Type') = 0
      BEGIN
      ALTER TABLE [Ax00].[dbo].twksWSBLinesByWell ADD Type [nvarchar](15) NOT NULL DEFAULT 'STATIC'
      END
      SET ANSI_PADDING OFF
      GO
    </StructureScript>
    <UpdateScript>
      UPDATE dbo.tfmwVersions SET UserSoftware = '3.0.5', ServiceSoftware = '1.2.4', FirmwareScripts = '1.1.0', Firmware = '0.20'
      GO

      IF ((SELECT COUNT(*) FROM [dbo].[tcfgAnalyzers] WHERE [AnalyzerID] = 'SN0000099999_Ax200' ) = 0)
      BEGIN
      INSERT INTO [dbo].[tcfgAnalyzers] ([AnalyzerID],[AnalyzerModel],[FirmwareVersion],[Generic],[Active]) VALUES('SN0000099999_Ax200', 'A200', '0.0', 1, 0)

      END
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwAnalyzerModelTubesByRing') = 1)
      BEGIN
      INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'SAMPLES',1,'T13',1)
      INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'SAMPLES',1,'T15',1)
      INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'SAMPLES',1,'PED',0)
      INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'REAGENTS',2,'BOTTLE3',1)
      INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'REAGENTS',2,'BOTTLE2',1)
      INSERT INTO [dbo].[tfmwAnalyzerModelTubesByRing] ([AnalyzerModel],[RotorType],[RingNumber],[TubeType],[ApplyToAllFlag]) VALUES ('A200', 'REAGENTS',2,'BOTTLE1',1)
      END
      GO


      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwAnalyzerModelRotorsConfig') = 1)
      BEGIN
      UPDATE tfmwAnalyzerModelRotorsConfig SET RotorType = 'SAMPLES', RingPositions = 44, FirstCellNumber = 1, LastCellNumber = 44
      WHERE AnalyzerModel = 'A200' AND RotorType = 'SAMP_REAG' AND RingNumber = 1

      UPDATE tfmwAnalyzerModelRotorsConfig SET RotorType = 'REAGENTS', RingPositions = 44, FirstCellNumber = 45, LastCellNumber = 88
      WHERE AnalyzerModel = 'A200' AND RotorType = 'SAMP_REAG' AND RingNumber = 2

      END
      GO

      IF ((SELECT COUNT(*) FROM sys.sysobjects WHERE xtype = 'U' AND name = 'tfmwSwFlags') = 1)
      BEGIN
      IF ((SELECT COUNT(*) FROM [dbo].[tfmwSwFlags] WHERE [FlagID] = 'DynamicBL_Fill' ) = 0)
      BEGIN
      INSERT INTO [dbo].[tfmwSwFlags] ([FlagID] ,[AllowedValues]) VALUES ('DynamicBL_Fill' ,'INI, END, CANCELED or NULL')
      END

      IF ((SELECT COUNT(*) FROM [dbo].[tfmwSwFlags] WHERE [FlagID] = 'DynamicBL_Read' ) = 0)
      BEGIN
      INSERT INTO [dbo].[tfmwSwFlags] ([FlagID] ,[AllowedValues]) VALUES ('DynamicBL_Read' ,'INI, END, CANCELED or NULL')
      END

      IF ((SELECT COUNT(*) FROM [dbo].[tfmwSwFlags] WHERE [FlagID] = 'DynamicBL_Empty' ) = 0)
      BEGIN
      INSERT INTO [dbo].[tfmwSwFlags] ([FlagID] ,[AllowedValues]) VALUES ('DynamicBL_Empty' ,'INI, END, CANCELED or NULL')
      END

      END
      GO
    </UpdateScript>
  </AppVersion >  
</TaskListDS>